[
    {
        "id": "165c2f30f87b1c32",
        "type": "tab",
        "label": "Operation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "28c60231abb95e2c",
        "type": "tab",
        "label": "RUT956",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "580bb6a3.5dc1d",
        "type": "tab",
        "label": "Heatweb",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9ad9f74f.55ef58",
        "type": "tab",
        "label": "Screen",
        "disabled": false,
        "info": ""
    },
    {
        "id": "38651eb07e123bba",
        "type": "tab",
        "label": "Docker",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c376bc72122fb9a2",
        "type": "tab",
        "label": "Connectivity",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d26c3be6.b5ef58",
        "type": "tab",
        "label": "Setup",
        "disabled": false,
        "info": ""
    },
    {
        "id": "caf59ec6.61c85",
        "type": "tab",
        "label": "Software",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9a9fe8141212d6cf",
        "type": "tab",
        "label": "Front",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ca03066f6a7451f4",
        "type": "tab",
        "label": "Sequent IO",
        "disabled": false,
        "info": "Flow for communicating with all versions of Heatweb BEMS IO Board.  Version 1 as standard. Requires manual adjustment to board type and port selection. Port selection can be pasted in from [HWWiki Wiring Editor](https://hwwiki.ddns.net/index.php/Wiring_Editor).",
        "env": []
    },
    {
        "id": "f0a27113.452c7",
        "type": "tab",
        "label": "WIFI Management",
        "disabled": true,
        "info": ""
    },
    {
        "id": "2841b6e7647d36d7",
        "type": "tab",
        "label": "Data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "789aa767.91c36",
        "type": "tab",
        "label": "M-Bus_Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f7189e37dc245121",
        "type": "tab",
        "label": "Sontay Modbus",
        "disabled": true,
        "info": "Heat Pump"
    },
    {
        "id": "beaf3f8ef0e03efe",
        "type": "tab",
        "label": "Grundfos Modbus",
        "disabled": false,
        "info": "https://www.binaryconvert.com/convert_signed_int.html?hexadecimal=000019FD"
    },
    {
        "id": "2f6b80b0432d3773",
        "type": "tab",
        "label": "Meter Modbus",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "42ed18ca.652838",
        "type": "tab",
        "label": "MB-Read-Write-Servers",
        "disabled": true,
        "info": ""
    },
    {
        "id": "d1f3d002.63ee48",
        "type": "subflow",
        "name": "rbe 1m",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "dd19c0de.9bebd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "29eae4ad.d68f2c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "a8d56bd2.c3c6f",
        "type": "subflow",
        "name": "runScript",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 139,
                "y": 96,
                "wires": [
                    {
                        "id": "469bad72.0a7394"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 830,
                "y": 460,
                "wires": [
                    {
                        "id": "6b7c3cb6.c9c104",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99",
        "inputLabels": [
            "Script"
        ],
        "outputLabels": [
            "Completed",
            ""
        ]
    },
    {
        "id": "3d0a40a7.66aa4",
        "type": "subflow",
        "name": "html table",
        "info": "",
        "in": [
            {
                "x": 100,
                "y": 180,
                "wires": [
                    {
                        "id": "790d9c49.fccc04"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 180,
                "wires": [
                    {
                        "id": "790d9c49.fccc04",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "1887c5fb483f5c64",
        "type": "subflow",
        "name": "sequent in",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "d24aada4e721da07"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 80,
                "wires": [
                    {
                        "id": "6bb4ad03.4f4974",
                        "port": 0
                    }
                ]
            },
            {
                "x": 620,
                "y": 160,
                "wires": [
                    {
                        "id": "6bb4ad03.4f4974",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "channel",
                "type": "num",
                "value": "1"
            },
            {
                "name": "block",
                "type": "str",
                "value": "universal"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 500,
            "y": 220,
            "wires": [
                {
                    "id": "6bb4ad03.4f4974",
                    "port": 2
                }
            ]
        }
    },
    {
        "id": "b2d492ed.c4def",
        "type": "subflow",
        "name": "rbe 3min",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "ee023f13.5958c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 160,
                "wires": [
                    {
                        "id": "61b66a77.aec334",
                        "port": 0
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "3bcc1796d56e0e4a",
        "type": "subflow",
        "name": "rbe 24h",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "ed3595ba7ad0e4b1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "6fdbb2068778d3c9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "344fa160119932f8",
        "type": "subflow",
        "name": "rbe 5m",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "486403111458df8e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "c822677b38fcd83c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "dadb5d41.655b1",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#1e7194",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#3037e8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#d91212",
                    "value": "#3037e8",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#282828",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#141414",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#757af0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#454ae8",
                    "edited": true
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 57,
                "sy": 52,
                "gx": 3,
                "gy": 2,
                "cx": 6,
                "cy": 6,
                "px": 6,
                "py": 5
            }
        }
    },
    {
        "id": "550ec543.b55bc4",
        "type": "heatwebConfig",
        "name": "Heatweb Controller zccnee9chah",
        "description": "Temperature Monitoring",
        "url": "https://hw3.ddns.net",
        "nodeId": "zccnee9chah",
        "networkId": "swanseashed",
        "localNetworkId": "local",
        "localDirectory": "/home/pi/node-hiu",
        "htmlDirectory": "",
        "httpPort": "",
        "httpsKey": "",
        "httpsCert": "",
        "deviceType": "",
        "adminPassword": "",
        "guestPassword": "",
        "loadBoot": true
    },
    {
        "id": "888f4ceb.4b158",
        "type": "ui_tab",
        "name": "Setup",
        "icon": "fa-cog",
        "order": 23,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cb203bcb.f1ec68",
        "type": "ui_group",
        "name": "DefaultSetup",
        "tab": "888f4ceb.4b158",
        "order": 1,
        "disp": false,
        "width": "9",
        "collapse": false
    },
    {
        "id": "ee34b8ab.222b68",
        "type": "ui_group",
        "name": "MQTT Data ",
        "tab": "c6a43c18.30063",
        "order": 2,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "8ef017d0.9a0628",
        "type": "ui_group",
        "name": "MenuReadings",
        "tab": "c6a43c18.30063",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "43af1847.935fd8",
        "type": "ui_group",
        "name": "Default",
        "tab": "c6a43c18.30063",
        "order": 3,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "c6a43c18.30063",
        "type": "ui_tab",
        "name": "Readings",
        "icon": "fa-table",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "31ddf4e3.0519dc",
        "type": "ui_group",
        "name": "Default",
        "tab": "4d7ab312.a67afc",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "4d7ab312.a67afc",
        "type": "ui_tab",
        "name": "Graph",
        "icon": "fa-line-chart",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "db644eb4.b9d0a",
        "type": "ui_group",
        "name": "M",
        "tab": "ad9b32d2.b3054",
        "order": 2,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ad9b32d2.b3054",
        "type": "ui_tab",
        "name": "Browser",
        "icon": "fa-line-chart",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "36b47e47.04f1c2",
        "type": "ui_group",
        "name": "Buttons",
        "tab": "888f4ceb.4b158",
        "order": 2,
        "disp": false,
        "width": "3",
        "collapse": false
    },
    {
        "id": "c982fbb8.1deb38",
        "type": "ui_group",
        "name": "hidden_group",
        "tab": "7c447e96.4b96a",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7c447e96.4b96a",
        "type": "ui_tab",
        "name": "Zooland Sys",
        "icon": "home",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "10aaba68.e21626",
        "type": "ui_tab",
        "name": "Browser",
        "icon": "fa-chrome",
        "order": 18,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e6210b42.32c588",
        "type": "ui_group",
        "name": "Browser",
        "tab": "10aaba68.e21626",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3d9e45e.bcd50ba",
        "type": "ui_group",
        "name": "Radial Gauges",
        "tab": "e625ce36.34cf3",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e625ce36.34cf3",
        "type": "ui_tab",
        "name": "Widgets",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "7aaf3d97.4092e4",
        "type": "ui_group",
        "z": "9a9fe8141212d6cf",
        "name": "Dash1",
        "tab": "d81a7cb4.620e68",
        "order": 4,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b41f6501.8d6cb8",
        "type": "ui_group",
        "z": "9a9fe8141212d6cf",
        "name": "Dash2",
        "tab": "d81a7cb4.620e68",
        "order": 3,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b7224d05.8b248",
        "type": "ui_group",
        "z": "9a9fe8141212d6cf",
        "name": "Head2",
        "tab": "d81a7cb4.620e68",
        "order": 1,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "84ad1d4c.e0002",
        "type": "ui_group",
        "z": "9a9fe8141212d6cf",
        "name": "Head",
        "tab": "d81a7cb4.620e68",
        "order": 2,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d81a7cb4.620e68",
        "type": "ui_tab",
        "z": "9a9fe8141212d6cf",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7ad2997b.42a908",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4d0f060d.dee7e8",
        "type": "ui_group",
        "name": "Update",
        "tab": "907bbe60.b555f",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a1e7431b.229d5",
        "type": "ui_group",
        "name": "Settings",
        "tab": "907bbe60.b555f",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f405b29b0175ff69",
        "type": "ui_group",
        "name": "Default",
        "tab": "7700440dec525a5e",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "907bbe60.b555f",
        "type": "ui_tab",
        "name": "Wifi",
        "icon": "wifi",
        "order": 21,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7700440dec525a5e",
        "type": "ui_tab",
        "name": "Network",
        "icon": "dashboard",
        "order": 30,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "72301e42389da199",
        "type": "serial-port",
        "z": "f7189e37dc245121",
        "serialport": "/dev/ttyAMA4",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "2",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "80",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "6b9c37ce7d1d32ec",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "heatweb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://eu-central-1-1.aws.cloud2.influxdata.com",
        "rejectUnauthorized": true,
        "info": "eL1lEr527yibtl-9hvaNQNWB6JLuOq_ZuQqfFfZw7F1jg3oZLz022IwRur9qQhw_FeeyE9i7aw8tcPwlUJz-3g=="
    },
    {
        "id": "618faf057d845369",
        "type": "mbus-client",
        "name": "M_BUS",
        "clienttype": "serial",
        "tcpHost": "127.0.0.1",
        "tcpPort": "10001",
        "tcpTimeout": "4000",
        "serialPort": "/dev/serial0",
        "serialBaudrate": "9600",
        "reconnectTimeout": "10000",
        "autoScan": true,
        "storeDevices": false,
        "disableLogs": true
    },
    {
        "id": "cbd3bd44.834398",
        "type": "ui_group",
        "name": "M-Bus Devices",
        "tab": "16de0243.87ddfe",
        "order": 3,
        "disp": true,
        "width": "14"
    },
    {
        "id": "fb0048e.a5eec38",
        "type": "ui_group",
        "name": "Data",
        "tab": "16de0243.87ddfe",
        "order": 4,
        "disp": true,
        "width": "14"
    },
    {
        "id": "de125633.ed6c5",
        "type": "ui_group",
        "name": "Commands",
        "tab": "16de0243.87ddfe",
        "order": 2,
        "disp": true,
        "width": "14"
    },
    {
        "id": "88aaec54.303928",
        "type": "ui_group",
        "name": "Status",
        "tab": "16de0243.87ddfe",
        "order": 1,
        "disp": true,
        "width": "14"
    },
    {
        "id": "16de0243.87ddfe",
        "type": "ui_tab",
        "name": "M-Bus",
        "icon": "plug",
        "order": 3
    },
    {
        "id": "b1efaf6df6d027b0",
        "type": "serial-port",
        "serialport": "/dev/ttyAMA4",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "2",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "50",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "83e9e245c2b6c61f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "dfca4ae6338cf9b4",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "tls": "",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "a24bea7c.848da",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "10502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "aefcd568.ff81c",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "11502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "d71e6162d7e087b2",
        "type": "modbus-client",
        "name": "Meters",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.60",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 206,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "0a9a86a0d76f9647",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.52",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8cc504061585d25f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.54",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "da55cd5fe456032a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.55",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "116211aaf44f254c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.51",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f3943ae9633ec6a0",
        "type": "modbus-client",
        "name": "RUT956",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 3000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "7ed2df76d3b6a6aa",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.heatweb.cloud",
        "port": "8883",
        "tls": "0f29cbf427bdb043",
        "clientid": "zccnee9chah",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0f29cbf427bdb043",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "cert.pem",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "dd19c0de.9bebd",
        "type": "rbe",
        "z": "d1f3d002.63ee48",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "29eae4ad.d68f2c"
            ]
        ]
    },
    {
        "id": "8b22fc2a.83d07",
        "type": "inject",
        "z": "d1f3d002.63ee48",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "dd19c0de.9bebd"
            ]
        ]
    },
    {
        "id": "29eae4ad.d68f2c",
        "type": "switch",
        "z": "d1f3d002.63ee48",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "eb92fac.cb1f108",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo bash /home/pi/node-hiu/addmqttacl.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 246.2857208251953,
        "y": 418.28569984436035,
        "wires": [
            [
                "6b7c3cb6.c9c104"
            ],
            [],
            []
        ]
    },
    {
        "id": "ef9bf9d9.e12f28",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo chown root:node-red /home/pi/node-hiu/addmqttacl.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 296.2857208251953,
        "y": 298.28569984436035,
        "wires": [
            [
                "47ddca7f.78036c"
            ],
            [],
            []
        ]
    },
    {
        "id": "47ddca7f.78036c",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo chmod 755 /home/pi/node-hiu/addmqttacl.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 266.2857208251953,
        "y": 358.28569984436035,
        "wires": [
            [
                "eb92fac.cb1f108"
            ],
            [],
            []
        ]
    },
    {
        "id": "6b7c3cb6.c9c104",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo mv /home/pi/node-hiu/addmqttacl.sh /home/pi/node-hiu/_lastrun.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 336.2857208251953,
        "y": 478.28569984436035,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "5ee23677.67d8e",
        "type": "file",
        "z": "a8d56bd2.c3c6f",
        "name": "",
        "filename": "/home/pi/node-hiu/addmqttacl.sh",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "x": 540,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "59609ed4.bee04",
        "type": "delay",
        "z": "a8d56bd2.c3c6f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 126.28572082519531,
        "y": 238.28569984436035,
        "wires": [
            [
                "ef9bf9d9.e12f28"
            ]
        ]
    },
    {
        "id": "469bad72.0a7394",
        "type": "trigger",
        "z": "a8d56bd2.c3c6f",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "5",
        "extend": false,
        "units": "s",
        "reset": "",
        "outputs": 1,
        "x": 279,
        "y": 96,
        "wires": [
            [
                "5ee23677.67d8e",
                "59609ed4.bee04"
            ]
        ]
    },
    {
        "id": "790d9c49.fccc04",
        "type": "function",
        "z": "3d0a40a7.66aa4",
        "name": "htmltable",
        "func": "var htmlt = '<table width=\"100%\">';\n\nfor (var key in msg.payload) {\n    \n    \n    htmlt += '<tr><td>' + key.replace(/_/g, ' ') + '</td><td align=\"right\">' + msg.payload[key] + '</td></tr>';\n}\n\nhtmlt += '<table>';\n\nmsg.payload=htmlt;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6bb4ad03.4f4974",
        "type": "function",
        "z": "1887c5fb483f5c64",
        "name": "",
        "func": "\nvar io = global.get(\"io\");\nio = io[msg.block+\"\"+msg.channel];\n\nvar msg1={\"payload\":\"1\"}\nif (!io) {\n    \n    return [null,msg1,msg3];\n}\n\nmsg.io = io;\n\nvar msg3 = {};\nmsg3.payload = msg.channel + \":  \" + io[\"type\"];\n\n\nif(io[\"type\"].indexOf(\"PULSE\")>-1) { msg.payload =  \"countrd\"; }\n\nelse if(io[\"type\"].indexOf(\"10K\")>-1) { \n    \n    if(msg.block==\"universal\") {   msg.payload =  \"r10krd\";  }\n    else {  msg.payload =  \"rthrd\";    msg.payload =  \"rthrd\"; }\n    \n}\n\nelse if(io[\"type\"].indexOf(\"10V\")>-1) { msg.payload =  \"adcrd\"; }\n\n\nelse { \n    \n    msg1={\"payload\":\"1\"}\n    return [null,msg1,msg3];\n    \n    \n}\n\n// address & channel\n//msg.payload =  msg.board + \" \" +  msg.payload + \" \" + msg.channel;\nmsg.payload =  msg.payload + \" \" + msg.channel;\n\nreturn [msg,null,msg3];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d24aada4e721da07",
        "type": "change",
        "z": "1887c5fb483f5c64",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "channel",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "block",
                "pt": "msg",
                "to": "block",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "6bb4ad03.4f4974"
            ]
        ]
    },
    {
        "id": "61b66a77.aec334",
        "type": "switch",
        "z": "b2d492ed.c4def",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "23f9ad60.8b4b82",
        "type": "change",
        "z": "b2d492ed.c4def",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "ee023f13.5958c"
            ]
        ]
    },
    {
        "id": "44580c0c.eb7c04",
        "type": "inject",
        "z": "b2d492ed.c4def",
        "name": "",
        "repeat": "180",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "23f9ad60.8b4b82"
            ]
        ]
    },
    {
        "id": "ee023f13.5958c",
        "type": "rbe",
        "z": "b2d492ed.c4def",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "61b66a77.aec334"
            ]
        ]
    },
    {
        "id": "ed3595ba7ad0e4b1",
        "type": "rbe",
        "z": "3bcc1796d56e0e4a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "6fdbb2068778d3c9"
            ]
        ]
    },
    {
        "id": "ac6886f7de81d7ca",
        "type": "inject",
        "z": "3bcc1796d56e0e4a",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "ed3595ba7ad0e4b1"
            ]
        ]
    },
    {
        "id": "6fdbb2068778d3c9",
        "type": "switch",
        "z": "3bcc1796d56e0e4a",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "486403111458df8e",
        "type": "rbe",
        "z": "344fa160119932f8",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "c822677b38fcd83c"
            ]
        ]
    },
    {
        "id": "9dd86fca5dcbfcab",
        "type": "inject",
        "z": "344fa160119932f8",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "486403111458df8e"
            ]
        ]
    },
    {
        "id": "c822677b38fcd83c",
        "type": "switch",
        "z": "344fa160119932f8",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "fce2bb252bf63f6e",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 570,
        "y": 40,
        "wires": [
            [
                "c7ddd91aa6741e69"
            ]
        ]
    },
    {
        "id": "90dc51156e36b0c1",
        "type": "exec",
        "z": "165c2f30f87b1c32",
        "command": "ti odwr 1",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1020,
        "y": 120,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "35fc5c7492f8caf0",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "75bc40a683680ae9",
        "type": "exec",
        "z": "165c2f30f87b1c32",
        "command": "ti dacwr 2",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 420,
        "y": 200,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "b1899673da4b859e",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "288d0218db5d12df",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "62c137709e308ac3",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 170,
        "y": 540,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "b93c2ad67bbecb03",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "7",
        "payloadType": "str",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "40c1f0d814d998c6",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "9",
        "payloadType": "str",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "6bd229194a9b02d1",
        "type": "comment",
        "z": "165c2f30f87b1c32",
        "name": "Heat Pump Temp",
        "info": "",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "6102764833f6fb75",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "100",
        "payloadType": "str",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "c7ddd91aa6741e69"
            ]
        ]
    },
    {
        "id": "052fcd0e0e7dfbf1",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 830,
        "y": 200,
        "wires": [
            [
                "4a4bdfb932bc660e"
            ]
        ]
    },
    {
        "id": "eef59c46cc71cb84",
        "type": "exec",
        "z": "165c2f30f87b1c32",
        "command": "ti odwr 2",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1220,
        "y": 220,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d9fb9f24ff395e59",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "str",
        "x": 830,
        "y": 240,
        "wires": [
            [
                "4a4bdfb932bc660e"
            ]
        ]
    },
    {
        "id": "d01e636ff219dfe8",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 830,
        "y": 400,
        "wires": [
            [
                "4512f37607bc4884"
            ]
        ]
    },
    {
        "id": "4512f37607bc4884",
        "type": "exec",
        "z": "165c2f30f87b1c32",
        "command": "ti odwr 3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1040,
        "y": 440,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d73a84ba75814792",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "str",
        "x": 830,
        "y": 460,
        "wires": [
            [
                "4512f37607bc4884"
            ]
        ]
    },
    {
        "id": "5081625d51059c69",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 830,
        "y": 540,
        "wires": [
            [
                "0c8b1f52e5866a93"
            ]
        ]
    },
    {
        "id": "0c8b1f52e5866a93",
        "type": "exec",
        "z": "165c2f30f87b1c32",
        "command": "ti odwr 4",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1040,
        "y": 580,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "486b8a6072fbbdac",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "str",
        "x": 830,
        "y": 600,
        "wires": [
            [
                "0c8b1f52e5866a93"
            ]
        ]
    },
    {
        "id": "7d1c37aab78e6dde",
        "type": "comment",
        "z": "165c2f30f87b1c32",
        "name": "Relay 9: Pump",
        "info": "",
        "x": 1220,
        "y": 100,
        "wires": []
    },
    {
        "id": "49559b84be7d99a5",
        "type": "comment",
        "z": "165c2f30f87b1c32",
        "name": "Relay 10: Electric",
        "info": "",
        "x": 1020,
        "y": 200,
        "wires": []
    },
    {
        "id": "1f3ea11aef3d407a",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "83",
        "payloadType": "str",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "d1b5c2b748163485",
        "type": "http request",
        "z": "165c2f30f87b1c32",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "http://192.168.1.51:1880/cmd",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 760,
        "wires": [
            [
                "61b7a00fbed69cb1"
            ]
        ]
    },
    {
        "id": "61b7a00fbed69cb1",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 35",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 760,
        "wires": []
    },
    {
        "id": "8d65b06da2d5d9a8",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "Heat Pump ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "relay1",
        "payload": "1",
        "payloadType": "num",
        "x": 1320,
        "y": 960,
        "wires": [
            [
                "ebe33396743b98c7"
            ]
        ]
    },
    {
        "id": "7884df209e196705",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "Heat Pump OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "relay1",
        "payload": "0",
        "payloadType": "num",
        "x": 1320,
        "y": 1000,
        "wires": [
            [
                "ebe33396743b98c7"
            ]
        ]
    },
    {
        "id": "8fd817d3a615f9c7",
        "type": "function",
        "z": "165c2f30f87b1c32",
        "name": "topic encaps",
        "func": "\nmsg.payload = { topic: msg.topic, payload: msg.payload };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 760,
        "wires": [
            [
                "d1b5c2b748163485",
                "e86f38c10d2828f6",
                "1f1ab7dd5c144ab0"
            ]
        ]
    },
    {
        "id": "e86f38c10d2828f6",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 36",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 880,
        "y": 640,
        "wires": []
    },
    {
        "id": "b9c851b87d1eb063",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "local/+/TS2/dat/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 880,
        "wires": [
            [
                "4d3fcf1ecae2d995",
                "9d9270a7c7c88e54",
                "505104534290269c"
            ]
        ]
    },
    {
        "id": "4d3fcf1ecae2d995",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 960,
        "wires": []
    },
    {
        "id": "9d9270a7c7c88e54",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "Upper < onTemp",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "onTemp",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 880,
        "wires": [
            [
                "68f479c456d59705"
            ],
            [
                "5e4cd077061a26a5"
            ]
        ]
    },
    {
        "id": "407ed5e96d82dc39",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "HP On",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "relay1",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 880,
        "wires": [
            [
                "ebe33396743b98c7"
            ]
        ]
    },
    {
        "id": "b25d9d15b47e74ae",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "HP Off",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "relay1",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 1020,
        "wires": [
            [
                "ebe33396743b98c7"
            ]
        ]
    },
    {
        "id": "6c6d3ef8b7d531f2",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "local/+/TS3/dat/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1020,
        "wires": [
            [
                "a52da266fa91344e",
                "ae0ea36c3de981b5"
            ]
        ]
    },
    {
        "id": "a52da266fa91344e",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5e4cd077061a26a5",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "Lower > 50",
        "property": "TSX3",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gt",
                "v": "50",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 1020,
        "wires": [
            [
                "3f14f7aede12b124"
            ]
        ]
    },
    {
        "id": "ae0ea36c3de981b5",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "TS3",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "ebe33396743b98c7",
        "type": "trigger",
        "z": "165c2f30f87b1c32",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "payl",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1310,
        "y": 880,
        "wires": [
            [
                "61ab28001b0ca6d0"
            ]
        ]
    },
    {
        "id": "5c87e661c84b02b0",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 840,
        "wires": []
    },
    {
        "id": "28c47ea2d2607873",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "local/+/ZRI10837029496A8804/dat/fH",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 1160,
        "wires": [
            [
                "8a9fe5e4fbddd619",
                "641080da54b8c983",
                "98d8309ff5af9ac1"
            ]
        ]
    },
    {
        "id": "641080da54b8c983",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1120,
        "wires": []
    },
    {
        "id": "8a9fe5e4fbddd619",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fNetwork",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "9f93ed4ad0c34b29",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "Demand?",
        "property": "pumptimer",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 980,
        "y": 880,
        "wires": [
            [
                "407ed5e96d82dc39"
            ]
        ]
    },
    {
        "id": "68f479c456d59705",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "Lower < 30",
        "property": "TS3",
        "propertyType": "flow",
        "rules": [
            {
                "t": "lt",
                "v": "30",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 880,
        "wires": [
            [
                "9f93ed4ad0c34b29"
            ],
            [
                "138e4586dc6fc098"
            ]
        ]
    },
    {
        "id": "c7ddd91aa6741e69",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pumptimer",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 60,
        "wires": [
            [
                "90dc51156e36b0c1"
            ]
        ]
    },
    {
        "id": "ed01b9bbef53716f",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "pumptimer",
        "payloadType": "flow",
        "x": 600,
        "y": 120,
        "wires": [
            [
                "90dc51156e36b0c1"
            ]
        ]
    },
    {
        "id": "9fac5869f55abe49",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fNetworkPeak",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "98d8309ff5af9ac1",
        "type": "rbe",
        "z": "165c2f30f87b1c32",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "9a7900ad35ee132a",
                "be0e84eb3dfcf92d"
            ]
        ]
    },
    {
        "id": "fe1c3606118059d9",
        "type": "trigger",
        "z": "165c2f30f87b1c32",
        "name": "",
        "op1": "pumptimer",
        "op2": "0",
        "op1type": "flow",
        "op2type": "str",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1050,
        "y": 1220,
        "wires": [
            [
                "cc2b9488313f1ab7"
            ]
        ]
    },
    {
        "id": "e96ac17287a6f94c",
        "type": "link in",
        "z": "165c2f30f87b1c32",
        "name": "link in 4",
        "links": [
            "7092c95cbded5828",
            "cc2b9488313f1ab7"
        ],
        "x": 715,
        "y": 140,
        "wires": [
            [
                "c7ddd91aa6741e69"
            ]
        ]
    },
    {
        "id": "cc2b9488313f1ab7",
        "type": "link out",
        "z": "165c2f30f87b1c32",
        "d": true,
        "name": "link out 2",
        "mode": "link",
        "links": [
            "e96ac17287a6f94c"
        ],
        "x": 1225,
        "y": 1220,
        "wires": []
    },
    {
        "id": "9a7900ad35ee132a",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 42",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1160,
        "wires": []
    },
    {
        "id": "ded750416923893c",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 690,
        "y": 1300,
        "wires": [
            [
                "98d8309ff5af9ac1"
            ]
        ]
    },
    {
        "id": "be0e84eb3dfcf92d",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 870,
        "y": 1220,
        "wires": [
            [
                "fe1c3606118059d9"
            ]
        ]
    },
    {
        "id": "6ee4746e19e79e95",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "str",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "8a8938ee1e2c44c9",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "11",
        "topic": "",
        "payload": "4.5",
        "payloadType": "str",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "1444fc5231412210",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "local/+/AXI0301176309070B0D/dat/tR",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 1340,
        "wires": [
            [
                "7adc0d5aae0831d0",
                "80a64c1a9f97bd04"
            ]
        ]
    },
    {
        "id": "80a64c1a9f97bd04",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1400,
        "wires": []
    },
    {
        "id": "7adc0d5aae0831d0",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tHPR",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "3f14f7aede12b124",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "Return > 35",
        "property": "tHPR",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gt",
                "v": "35",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 1020,
        "wires": [
            [
                "b25d9d15b47e74ae"
            ]
        ]
    },
    {
        "id": "3c72fe8e8181ebb0",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 700,
        "wires": [
            [
                "f24162fd7ec75764"
            ]
        ]
    },
    {
        "id": "616488c03fb8abbb",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 190,
        "y": 760,
        "wires": [
            [
                "f24162fd7ec75764"
            ]
        ]
    },
    {
        "id": "f24162fd7ec75764",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "heatPumpTimer",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "7e52db7ccd691c48",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "local/+/+/dat/setV",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "8cc504061585d25f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1520,
        "wires": [
            [
                "d2366a9157b9be6f"
            ]
        ]
    },
    {
        "id": "a19acf1b1f5863b2",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 80",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1600,
        "wires": []
    },
    {
        "id": "d2366a9157b9be6f",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 1520,
        "wires": [
            [
                "f5202f0307b0de1f",
                "a19acf1b1f5863b2"
            ]
        ]
    },
    {
        "id": "f5202f0307b0de1f",
        "type": "trigger",
        "z": "165c2f30f87b1c32",
        "name": "",
        "op1": "100",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "6",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 590,
        "y": 1520,
        "wires": [
            [
                "7092c95cbded5828"
            ]
        ]
    },
    {
        "id": "6a998bda704952a0",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 210,
        "y": 1460,
        "wires": [
            [
                "d2366a9157b9be6f"
            ]
        ]
    },
    {
        "id": "7092c95cbded5828",
        "type": "link out",
        "z": "165c2f30f87b1c32",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "e96ac17287a6f94c"
        ],
        "x": 765,
        "y": 1520,
        "wires": []
    },
    {
        "id": "885d310f485dfe12",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "local/+/+/dat/setV",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "da55cd5fe456032a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1600,
        "wires": [
            [
                "d2366a9157b9be6f",
                "113b4d51c8c9092b"
            ]
        ]
    },
    {
        "id": "113b4d51c8c9092b",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1660,
        "wires": []
    },
    {
        "id": "6211461dafead877",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "Upper < 60",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "onTemp",
                "vt": "flow"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1010,
        "y": 940,
        "wires": [
            [
                "9f93ed4ad0c34b29"
            ]
        ]
    },
    {
        "id": "c68833aab3664892",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "+/+/heatpump/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "116211aaf44f254c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1760,
        "wires": [
            [
                "5ce2fad5bd4cf0f6"
            ]
        ]
    },
    {
        "id": "5ce2fad5bd4cf0f6",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 1760,
        "wires": []
    },
    {
        "id": "7b8f1d7cddca52b8",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "+/+/heatpump/+/externalWaterTemperature3",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "116211aaf44f254c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 870,
        "y": 1400,
        "wires": [
            [
                "b108d80893e103eb",
                "a75a0f8d36d7b836"
            ]
        ]
    },
    {
        "id": "b108d80893e103eb",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 83",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1460,
        "wires": []
    },
    {
        "id": "a75a0f8d36d7b836",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "TSX3",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "1f1ab7dd5c144ab0",
        "type": "mqtt out",
        "z": "165c2f30f87b1c32",
        "name": "Central MQTT",
        "topic": "swanseashed/zccnee9chah/heatpump/cmd/run",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0a9a86a0d76f9647",
        "x": 1080,
        "y": 700,
        "wires": []
    },
    {
        "id": "c601094922f71b94",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "+/+/heatpump/+/outdoorAmbientTemperature",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "116211aaf44f254c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 870,
        "y": 1620,
        "wires": [
            [
                "ab95591f5a2cb72d",
                "61b72d6281972ae6"
            ]
        ]
    },
    {
        "id": "ab95591f5a2cb72d",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1680,
        "wires": []
    },
    {
        "id": "61b72d6281972ae6",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "outdoorAmbientTemperature",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "b21ed64b19c869e3",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "Boost",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "c4b24d3383c59216"
            ]
        ]
    },
    {
        "id": "c4b24d3383c59216",
        "type": "function",
        "z": "165c2f30f87b1c32",
        "name": "Weather Compensation",
        "func": "var oat = flow.get(\"outdoorAmbientTemperature\") || 21;\n\nvar temps = [{ \"oat\": \"-20\", \"voltage\": \"9\" }, { \"oat\": \"-5\", \"voltage\": \"9\" }, { \"oat\": \"0\", \"voltage\": \"8\" }, { \"oat\": \"5\", \"voltage\": \"7.5\" }, { \"oat\": \"10\", \"voltage\": \"6.5\" }, { \"oat\": \"15\", \"voltage\": \"6\" }, { \"oat\": \"20\", \"voltage\": \"6\" }, { \"oat\": \"25\", \"voltage\": \"6\" }, { \"oat\": \"40\", \"voltage\": \"6\" }]\n\nif (flow.get(\"tOutSettings\")) { temps = flow.get(\"tOutSettings\"); }\n\n\nvar temp = 7;\nfor (var i = 1; i < temps.length; i++) {\n\n    var t1 = parseFloat(temps[i - 1].oat);\n    var t2 = parseFloat(temps[i].oat);\n    var v1 = parseFloat(temps[i - 1].voltage);\n    var v2 = parseFloat(temps[i].voltage);\n\n\n    if (t2 == oat) {\n\n        temp = v2;\n\n        break;\n    }\n    else if (t1.oat == oat) {\n\n        temp = v1;\n\n        break;\n    }\n    else if ((t1 <= oat) && (t2 > oat)) {\n\n        temp = v1 + ((v2 - v1) * ((oat - t1) / (t2 - t1)));\n\n        break;\n    }\n    //else if ((t1 >= oat) && (t2 < oat)) {\n\n    //     temp = v2 - ((v2 - v1) * ((oat - t1) / (t1 - t2)));\n\n    //     break;\n    // }\n\n}\n\nmsg.payload = temp;\n\n// if (oat < 0) { msg.payload = 9; }\n// else if (oat < 5) { msg.payload = 8;}\n// else if (oat < 10) { msg.payload = 7.5;}\n// else if (oat < 15) { msg.payload = 6.5;}\n// else { msg.payload = 6;}\n\n\nnode.status({fill:\"blue\",shape:\"dot\",text:msg.payload});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "75bc40a683680ae9",
                "34cbe4d134bb643b"
            ]
        ]
    },
    {
        "id": "34cbe4d134bb643b",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 60,
        "wires": []
    },
    {
        "id": "25c88bb031826110",
        "type": "trigger",
        "z": "165c2f30f87b1c32",
        "name": "",
        "op1": "100",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "24",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 970,
        "y": 340,
        "wires": [
            [
                "4a4bdfb932bc660e"
            ]
        ]
    },
    {
        "id": "2e1022c93df6bdd1",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "1 Day",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 360,
        "wires": [
            [
                "25c88bb031826110"
            ]
        ]
    },
    {
        "id": "4a4bdfb932bc660e",
        "type": "function",
        "z": "165c2f30f87b1c32",
        "name": "function 9",
        "func": "\nvar msg1={};\nmsg1.topic= \"elecboiler/dat/run\"\nmsg1.payload = (msg.payload==\"100\"?\"1\":\"0\");\n\nreturn [msg,msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "eef59c46cc71cb84"
            ],
            [
                "3b1552aed0bffe28",
                "9f977218dce9a25f"
            ]
        ]
    },
    {
        "id": "3b1552aed0bffe28",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 110",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 340,
        "wires": []
    },
    {
        "id": "9f977218dce9a25f",
        "type": "link out",
        "z": "165c2f30f87b1c32",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1175,
        "y": 280,
        "wires": []
    },
    {
        "id": "cb2a0d2c38a41f23",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "70",
        "payloadType": "str",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "75bc40a683680ae9"
            ]
        ]
    },
    {
        "id": "79c43e240f9adfd2",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "60",
        "payloadType": "num",
        "x": 390,
        "y": 360,
        "wires": [
            [
                "766b022db74ed425"
            ]
        ]
    },
    {
        "id": "38b2f88cdfbe737e",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "70",
        "payloadType": "str",
        "x": 390,
        "y": 400,
        "wires": [
            [
                "766b022db74ed425"
            ]
        ]
    },
    {
        "id": "766b022db74ed425",
        "type": "mqtt out",
        "z": "165c2f30f87b1c32",
        "name": "store temp",
        "topic": "swanseashed/zccnee9chah/heatpump/set/tSetStore",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0a9a86a0d76f9647",
        "x": 570,
        "y": 360,
        "wires": []
    },
    {
        "id": "4f4c5a55082a369d",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "85",
        "payloadType": "str",
        "x": 390,
        "y": 480,
        "wires": [
            [
                "766b022db74ed425"
            ]
        ]
    },
    {
        "id": "94b2f536d25168c1",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "75",
        "payloadType": "str",
        "x": 390,
        "y": 440,
        "wires": [
            [
                "766b022db74ed425"
            ]
        ]
    },
    {
        "id": "fb187080e88c0f61",
        "type": "trigger",
        "z": "165c2f30f87b1c32",
        "name": "",
        "op1": "100",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "4a4bdfb932bc660e"
            ]
        ]
    },
    {
        "id": "0622c73f4708813a",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "1 Hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 320,
        "wires": [
            [
                "fb187080e88c0f61"
            ]
        ]
    },
    {
        "id": "248faa0addb2ead6",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "+/+/heatpump/+/settingWaterTemperature",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "116211aaf44f254c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 1760,
        "wires": [
            [
                "dc9e1f7cfc658f79",
                "56b89c82ecb8338a"
            ]
        ]
    },
    {
        "id": "dc9e1f7cfc658f79",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 111",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 1840,
        "wires": []
    },
    {
        "id": "df47d536f1c92974",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "onTemp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "56b89c82ecb8338a",
        "type": "function",
        "z": "165c2f30f87b1c32",
        "name": "function 10",
        "func": "msg.payload = msg.payload - 7;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1760,
        "wires": [
            [
                "df47d536f1c92974"
            ]
        ]
    },
    {
        "id": "511ebd6b0d36fd57",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "70",
        "payloadType": "num",
        "x": 1150,
        "y": 1800,
        "wires": [
            [
                "df47d536f1c92974"
            ]
        ]
    },
    {
        "id": "138e4586dc6fc098",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "Lower < 40",
        "property": "TS3",
        "propertyType": "flow",
        "rules": [
            {
                "t": "lt",
                "v": "40",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 940,
        "wires": [
            [
                "de7317e25c9f4686"
            ]
        ]
    },
    {
        "id": "12fdcb8abfdb3850",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "Supply Temp",
        "topic": "local/+/ZRI10837029496A8804/dat/fH",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 600,
        "wires": [
            [
                "518e94a3512b9369",
                "706c42d9241313cb"
            ]
        ]
    },
    {
        "id": "518e94a3512b9369",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 112",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 640,
        "wires": []
    },
    {
        "id": "706c42d9241313cb",
        "type": "change",
        "z": "165c2f30f87b1c32",
        "name": "tNetwork",
        "rules": [
            {
                "t": "set",
                "p": "tNetwork",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "505104534290269c",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "<50 Electric",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "50",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 800,
        "wires": [
            [
                "637f24090635ea9a"
            ]
        ]
    },
    {
        "id": "34cfb7fc22122113",
        "type": "link out",
        "z": "165c2f30f87b1c32",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "2a847d2c6b3331f8"
        ],
        "x": 665,
        "y": 800,
        "wires": []
    },
    {
        "id": "2a847d2c6b3331f8",
        "type": "link in",
        "z": "165c2f30f87b1c32",
        "name": "link in 6",
        "links": [
            "34cfb7fc22122113"
        ],
        "x": 845,
        "y": 280,
        "wires": [
            [
                "fb187080e88c0f61"
            ]
        ]
    },
    {
        "id": "637f24090635ea9a",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "Demand?",
        "property": "pumptimer",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 800,
        "wires": [
            [
                "34cfb7fc22122113"
            ]
        ]
    },
    {
        "id": "61ab28001b0ca6d0",
        "type": "subflow:d1f3d002.63ee48",
        "z": "165c2f30f87b1c32",
        "name": "",
        "x": 1340,
        "y": 840,
        "wires": [
            [
                "8fd817d3a615f9c7",
                "5c87e661c84b02b0"
            ]
        ]
    },
    {
        "id": "de7317e25c9f4686",
        "type": "switch",
        "z": "165c2f30f87b1c32",
        "name": "Flow > 1 lpm",
        "property": "fNetwork",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 940,
        "wires": [
            [
                "6211461dafead877"
            ]
        ]
    },
    {
        "id": "cd4aa78e74baea0f",
        "type": "mqtt in",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "+/+/heatpump/settings/tOutSettings",
        "qos": "0",
        "datatype": "json",
        "broker": "0a9a86a0d76f9647",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 2040,
        "wires": [
            [
                "9899ebefab97a68c",
                "78588a3bef32e5ce"
            ]
        ]
    },
    {
        "id": "9899ebefab97a68c",
        "type": "function",
        "z": "165c2f30f87b1c32",
        "name": "Save settings to Memory",
        "func": "\nflow.set(\"tOutSettings\", msg.payload);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "78588a3bef32e5ce",
        "type": "debug",
        "z": "165c2f30f87b1c32",
        "name": "debug 104",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 2100,
        "wires": []
    },
    {
        "id": "c17c09c821c39072",
        "type": "comment",
        "z": "165c2f30f87b1c32",
        "name": "Incoming User Settings from Screen.",
        "info": "",
        "x": 260,
        "y": 1920,
        "wires": []
    },
    {
        "id": "a84e1c7fbb1b3dbe",
        "type": "inject",
        "z": "165c2f30f87b1c32",
        "name": "local/+/heatpump/settings/#",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "_/cmd/request",
        "payload": "local/+/heatpump/settings/#",
        "payloadType": "str",
        "x": 240,
        "y": 1980,
        "wires": [
            [
                "6ca3ec490fc470df"
            ]
        ]
    },
    {
        "id": "6ca3ec490fc470df",
        "type": "mqtt out",
        "z": "165c2f30f87b1c32",
        "name": "",
        "topic": "_/cmd/request",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0a9a86a0d76f9647",
        "x": 480,
        "y": 1980,
        "wires": []
    },
    {
        "id": "1fef3f23ab7ba437",
        "type": "modbus-flex-getter",
        "z": "28c60231abb95e2c",
        "d": true,
        "name": "Modbus Flexible Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "f3943ae9633ec6a0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": false,
        "delayOnStart": true,
        "startDelayTime": "1",
        "x": 540,
        "y": 360,
        "wires": [
            [
                "65eb5fbf3b4699ef"
            ],
            [
                "66c94b0e24a7d1df"
            ]
        ]
    },
    {
        "id": "419efb4ea9eb6699",
        "type": "function",
        "z": "28c60231abb95e2c",
        "name": "FC4",
        "func": "\nif (!msg.payload.topic || msg.payload.topic == \"none\") { return null; }\n\nflow.set(\"registers.r\" + msg.payload.rAddress, msg.payload);\n\nmsg.payload = { 'fc': 3, 'unitid': 1, 'address': msg.payload.rAddress, 'quantity': msg.payload.rLength }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 360,
        "wires": [
            [
                "1edca3c70e0247cc"
            ]
        ]
    },
    {
        "id": "c8f4bc61bb4934bf",
        "type": "inject",
        "z": "28c60231abb95e2c",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 145,
        "y": 200,
        "wires": [
            [
                "c0d1eee37e5d4305"
            ]
        ],
        "l": false
    },
    {
        "id": "c0d1eee37e5d4305",
        "type": "template",
        "z": "28c60231abb95e2c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\"title\",\"rAddress\",\"rAddress2\",\"rLength\",\"dType\",\"topic\"\n\"System uptime\",1,2,2,\"32 bit unsigned integer\",\"upTime\"\n\"Mobile signal strength (RSSI in dBm)\",3,4,2,\"32 bit integer\",\"signalStrength\"\n\"System temperature (in 0.1 °C)\",5,6,2,\"32 bit integer\",\"systemTemperature\"\n\"System hostname\",7,8,16,\"Text\",\"systemHostname\"\n\"GSM operator name\",23,24,16,\"Text\",\"gsmOperator\"\n\"Router serial number\",39,40,16,\"Text\",\"serialNumber\"\n\"LAN MAC address\",55,56,16,\"Text\",\"macLAN\"\n\"Router name\",71,72,16,\"Text\",\"routerName\"\n\"Currently active SIM card slot\",87,88,16,\"Text\",\"activeSIM\"\n\"Network registration info\",103,104,16,\"Text\",\"networkRegistration\"\n\"Network type\",119,120,16,\"Text\",\"networkType\"\n\"Digital input (DIN1) state\",135,136,2,\"32 bit integer\",\"digIn1\"\n\"Digital galvanically isolated input (DIN2) state\",137,138,2,\"32 bit integer\",\"digIn2\"\n\"Current WAN IP address\",139,140,2,\"8 bit unsigned integer\",\"ipWAN\"\n\"Analog input (PIN 9) value\",141,142,2,\"32 bit unsigned integer\",\"anaIn1\"\n\"GPS latitude coordinate\",143,144,2,\"32 bit float\",\"latitude\"\n\"GPS longitude coordinate\",145,146,2,\"32 bit float\",\"longitude\"\n\"GPS fix time\",147,148,16,\"Text\" (Unix timestamp×1000),\"gpsFixTime\"\n\"GPS date and time\",163,164,16,\"Text\" (DDMMYYhhmmss),\"gpsDateTime\"\n\"GPS speed\",179,180,2,\"32 bit float\",\"gpsSpeed\"\n\"GPS satellite count\",181,182,2,\"32 bit unsigned integer\",\"gpsSatCount\"\n\"GPS accuracy\",183,184,2,\"32 bit float\",\"gpsAccuracy\"\n\"Mobile data received today (SIM1)\",185,186,2,\"32 bit unsigned integer\",\"dataInToday\"\n\"Mobile data sent today (SIM1)\",187,188,2,\"32 bit unsigned integer\",\"dataOutToday\"\n\"Mobile data received this week (SIM1)\",189,190,2,\"32 bit unsigned integer\",\"dataInWeek\"\n\"Mobile data sent this week (SIM1)\",191,192,2,\"32 bit unsigned integer\",\"dataOutWeek\"\n\"Mobile data received this month (SIM1)\",193,194,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent this month (SIM1)\",195,196,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data received last 24h (SIM1)\",197,198,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent last 24h (SIM1)\",199,200,2,\"32 bit unsigned integer\",\"none\"\n\"Galvanically isolated open collector output status\",201,202,1,\"16 bit unsigned integer\",\"none\"\n\"Relay output status\",202,203,1,\"16 bit unsigned integer\",\"relayStatus\"\n\"Active SIM card\",205,206,1,\"16 bit unsigned integer\",\"activeSIM\"\n\"Mobile data received last week (SIM1)\",292,293,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent last week (SIM1)\",294,295,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data received last month (SIM1)\",296,297,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent last month (SIM1)\",298,299,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data received today (SIM2)\",300,301,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent today (SIM2)\",302,303,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data received this week (SIM2)\",304,305,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent this week (SIM2)\",306,307,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data received this month (SIM2)\",308,309,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent this month (SIM2)\",310,311,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data received last 24h (SIM2)\",312,313,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent last 24h (SIM2)\",314,315,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data received last week (SIM2)\",316,317,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent last week (SIM2)\",318,319,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data received last month(SIM2)\",320,321,2,\"32 bit unsigned integer\",\"none\"\n\"Mobile data sent last month (SIM2)\",322,323,2,\"32 bit unsigned integer\",\"none\"\n\"Digital non-isolated input\",324,325,1,\"16 bit unsigned integer\",\"none\"\n\"Digital open collector output\",325,326,1,\"16 bit unsigned integer\",\"none\"\n\"Modem ID\",328,329,8,\"Text\",\"modemId\"\n\"ACL activity\",345,346,1,\"16 bit unsigned integer\",\"aclActivity\"\n\"ACL status\",346,347,2,\"32 bit float\",\"aclStatus\"\n\"IMSI\",348,349,16,\"Text\",\"imsi\"\n\"Unix timestamp\",364,365,2,\"32 bit unsigned integer\",\"unixTimestamp\"\n\"Local ISO time\",366,367,12,\"Text\",\"localIsoTime\"\n\"UTC time\",378,389,12,\"Text\",\"utcTime\"\n\"LAN IP\",394,395,2,\"8 bit unsigned integer\",\"ipLAN\"\n\"Add SMS\",397,398,90,\"Text\",\"addSMS\"",
        "output": "str",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "23fa8ff91e295612"
            ]
        ]
    },
    {
        "id": "23fa8ff91e295612",
        "type": "csv",
        "z": "28c60231abb95e2c",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 475,
        "y": 200,
        "wires": [
            [
                "8b5bcea518bba4c7",
                "419efb4ea9eb6699"
            ]
        ],
        "l": false
    },
    {
        "id": "8b5bcea518bba4c7",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 200,
        "wires": []
    },
    {
        "id": "1edca3c70e0247cc",
        "type": "delay",
        "z": "28c60231abb95e2c",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "4",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 335,
        "y": 360,
        "wires": [
            [
                "1fef3f23ab7ba437",
                "4d9909320d566f13"
            ]
        ],
        "l": false
    },
    {
        "id": "e16e47d2145db75f",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 850,
        "y": 380,
        "wires": []
    },
    {
        "id": "66c94b0e24a7d1df",
        "type": "function",
        "z": "28c60231abb95e2c",
        "name": "function 8",
        "func": "//msg.payload = (msg.payload[0] * 256) + msg.payload[1];\n\nif (!msg.modbusRequest) { return null; }\n\nvar rinfo = flow.get(\"registers.r\" + msg.modbusRequest.address);\n\nif (!rinfo.topic || rinfo.topic == \"none\") { return null; }\nmsg.topic = \"modem/system/\" + rinfo.topic;\n//msg.units = \"s\";\n\nif (rinfo.dType == \"32 bit unsigned integer\") {\n    msg.payload = parseFloat(msg.payload.buffer.readUIntBE(0,4));\n}\nelse if (rinfo.dType == \"16 bit unsigned integer\") {\n    msg.payload = parseFloat(msg.payload.buffer.readUIntBE(0, 2));\n}\nelse if (rinfo.dType == \"8 bit unsigned integer\") {\n    msg.payload = parseFloat(msg.payload.buffer.readUIntBE(0, 1));\n}\nelse if (rinfo.dType == \"32 bit integer\") {\n    msg.payload = parseFloat(msg.payload.buffer.readIntBE(0, 4));\n}\n\nelse if (rinfo.dType == \"32 bit float\") {\n    msg.payload = parseFloat(msg.payload.buffer.readFloatBE(0));\n}\n\nelse if (rinfo.dType == \"Text\") {\n    msg.payload = msg.payload.buffer.toString('utf8');\n}\nelse { return null; }\n\n\nif (rinfo.topic == \"systemTemperature \") {\n    msg.payload = msg.payload/10;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 440,
        "wires": [
            [
                "e16e47d2145db75f",
                "ac3dafc5181f992e"
            ]
        ]
    },
    {
        "id": "4d9909320d566f13",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "debug 39",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 300,
        "wires": []
    },
    {
        "id": "09cece67131ab37a",
        "type": "comment",
        "z": "28c60231abb95e2c",
        "name": "https://wiki.teltonika-networks.com/view/RUT955_Modbus",
        "info": "",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "c7a11b2abd30dc2c",
        "type": "catch",
        "z": "28c60231abb95e2c",
        "name": "",
        "scope": [
            "1fef3f23ab7ba437",
            "9b6c16bbf9aad756"
        ],
        "uncaught": false,
        "x": 310,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c67d835197d47ee5",
        "type": "link out",
        "z": "28c60231abb95e2c",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 955,
        "y": 440,
        "wires": []
    },
    {
        "id": "ac3dafc5181f992e",
        "type": "subflow:3bcc1796d56e0e4a",
        "z": "28c60231abb95e2c",
        "name": "",
        "x": 840,
        "y": 440,
        "wires": [
            [
                "c67d835197d47ee5"
            ]
        ]
    },
    {
        "id": "65eb5fbf3b4699ef",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 790,
        "y": 300,
        "wires": []
    },
    {
        "id": "dba6392afebfb117",
        "type": "exec",
        "z": "28c60231abb95e2c",
        "command": "lt",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 570,
        "y": 800,
        "wires": [
            [
                "6135a292a2b64d00"
            ],
            [
                "830b923b024e7fd4"
            ],
            [
                "29efc85770b59407",
                "072dcbca5fb43043"
            ]
        ]
    },
    {
        "id": "b680be1ca4f3e1bb",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "debug 104",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 720,
        "wires": []
    },
    {
        "id": "830b923b024e7fd4",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "debug 105",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "239b5ec5c32c7fa0",
        "type": "inject",
        "z": "28c60231abb95e2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 800,
        "wires": [
            [
                "a398dcef684c3cc2"
            ]
        ]
    },
    {
        "id": "29efc85770b59407",
        "type": "delay",
        "z": "28c60231abb95e2c",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 880,
        "wires": [
            [
                "a398dcef684c3cc2"
            ]
        ]
    },
    {
        "id": "1888c9f47d63d55f",
        "type": "inject",
        "z": "28c60231abb95e2c",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 960,
        "wires": [
            [
                "eb65a18f899bf981"
            ]
        ]
    },
    {
        "id": "eb65a18f899bf981",
        "type": "exec",
        "z": "28c60231abb95e2c",
        "command": "sudo npm install -g localtunnel",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 490,
        "y": 960,
        "wires": [
            [
                "0df42cdedbac09ab"
            ],
            [
                "0df42cdedbac09ab"
            ],
            []
        ]
    },
    {
        "id": "0df42cdedbac09ab",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "debug 106",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 960,
        "wires": []
    },
    {
        "id": "76b9bab5651ae7e9",
        "type": "inject",
        "z": "28c60231abb95e2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 600,
        "wires": [
            [
                "12fcacb49f047a1f"
            ]
        ]
    },
    {
        "id": "12fcacb49f047a1f",
        "type": "http request",
        "z": "28c60231abb95e2c",
        "name": "IP",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "icanhazip.com",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 600,
        "wires": [
            [
                "2edaaf1826a79f33"
            ]
        ]
    },
    {
        "id": "b0d9a2a25e66094c",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "debug 107",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 620,
        "wires": []
    },
    {
        "id": "a398dcef684c3cc2",
        "type": "function",
        "z": "28c60231abb95e2c",
        "name": "domain",
        "func": "msg.payload = \"--port 80 --subdomain \" + (global.get(\"networkId\")||\"rAndD\") + \"-modem --local-host 192.168.1.62\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 800,
        "wires": [
            [
                "dba6392afebfb117",
                "23af91f6680291b7"
            ]
        ]
    },
    {
        "id": "23af91f6680291b7",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "debug 108",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 680,
        "wires": []
    },
    {
        "id": "072dcbca5fb43043",
        "type": "switch",
        "z": "28c60231abb95e2c",
        "name": "not installed error",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "-2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 920,
        "wires": [
            [
                "eb65a18f899bf981"
            ]
        ]
    },
    {
        "id": "6135a292a2b64d00",
        "type": "function",
        "z": "28c60231abb95e2c",
        "name": "url",
        "func": "if (msg.payload.indexOf(\"url is\")>0) {\n    msg.payload = msg.payload.split(\"is: \")[1];\n    flow.set(\"url\",msg.payload);\n\n    msg.topic = \"modem/system/urlModem\";\n    \n} else {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 720,
        "wires": [
            [
                "b680be1ca4f3e1bb",
                "52b1f5064f8e5b7a"
            ]
        ]
    },
    {
        "id": "cb1550cb0f5226fd",
        "type": "exec",
        "z": "28c60231abb95e2c",
        "command": "lt",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "60b2351f7e6becc7"
            ],
            [],
            [
                "dcd1f224b9967ed2"
            ]
        ]
    },
    {
        "id": "24f0f681a1889477",
        "type": "inject",
        "z": "28c60231abb95e2c",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "90",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1100,
        "wires": [
            [
                "66a4047e7c7443a6"
            ]
        ]
    },
    {
        "id": "dcd1f224b9967ed2",
        "type": "delay",
        "z": "28c60231abb95e2c",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 1180,
        "wires": [
            [
                "66a4047e7c7443a6"
            ]
        ]
    },
    {
        "id": "66a4047e7c7443a6",
        "type": "function",
        "z": "28c60231abb95e2c",
        "name": "nodered domain",
        "func": "msg.payload = \"--port 1880 --subdomain \" + ((global.get(\"networkId\")||\"rAndD\") + \"-\" + global.get(\"node\")).toLowerCase() + \"-nodered\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1100,
        "wires": [
            [
                "cb1550cb0f5226fd"
            ]
        ]
    },
    {
        "id": "0c3e88c0e3abbaba",
        "type": "debug",
        "z": "28c60231abb95e2c",
        "name": "debug 109",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1060,
        "wires": []
    },
    {
        "id": "60b2351f7e6becc7",
        "type": "function",
        "z": "28c60231abb95e2c",
        "name": "url",
        "func": "if (msg.payload.indexOf(\"url is\") > 0) {\n    var msg1 = {};\n    msg.payload = msg.payload.split(\"is: \")[1].trim();\n    msg1.payload = msg.payload + \"/ui\";\n    flow.set(\"url\", msg.payload);\n\n    msg.topic = \"modem/system/urlNodered\";\n    msg1.topic = \"modem/system/urlNoderedUI\";\n\n} else {\n    return null;\n}\nreturn [msg,msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1040,
        "wires": [
            [
                "0c3e88c0e3abbaba",
                "9f91c3619bc27901"
            ],
            [
                "9f91c3619bc27901"
            ]
        ]
    },
    {
        "id": "52b1f5064f8e5b7a",
        "type": "link out",
        "z": "28c60231abb95e2c",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "ff502e65230b1368",
            "bcd915e924908c2b"
        ],
        "x": 855,
        "y": 680,
        "wires": []
    },
    {
        "id": "ff502e65230b1368",
        "type": "link in",
        "z": "28c60231abb95e2c",
        "name": "link in 4",
        "links": [
            "52b1f5064f8e5b7a",
            "9f91c3619bc27901",
            "f1914751ea3d2317",
            "696a240d80ac120f",
            "6ea9ac052a27fb22",
            "6c39afe6bdbb3c57"
        ],
        "x": 565,
        "y": 500,
        "wires": [
            [
                "357aa6cf58a1bd04"
            ]
        ]
    },
    {
        "id": "9f91c3619bc27901",
        "type": "link out",
        "z": "28c60231abb95e2c",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "ff502e65230b1368",
            "bcd915e924908c2b"
        ],
        "x": 815,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f1914751ea3d2317",
        "type": "link out",
        "z": "28c60231abb95e2c",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "ff502e65230b1368"
        ],
        "x": 935,
        "y": 560,
        "wires": []
    },
    {
        "id": "2edaaf1826a79f33",
        "type": "function",
        "z": "28c60231abb95e2c",
        "name": "ip",
        "func": "msg.topic = \"modem/system/ipPing\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 600,
        "wires": [
            [
                "b0d9a2a25e66094c",
                "f1914751ea3d2317"
            ]
        ]
    },
    {
        "id": "bcd915e924908c2b",
        "type": "link in",
        "z": "28c60231abb95e2c",
        "name": "link in 5",
        "links": [
            "9f91c3619bc27901",
            "52b1f5064f8e5b7a"
        ],
        "x": 485,
        "y": 640,
        "wires": [
            [
                "12fcacb49f047a1f"
            ]
        ]
    },
    {
        "id": "357aa6cf58a1bd04",
        "type": "trigger",
        "z": "28c60231abb95e2c",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-12",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "",
        "bytopic": "topic",
        "topic": "topic",
        "outputs": 1,
        "x": 710,
        "y": 500,
        "wires": [
            [
                "ac3dafc5181f992e"
            ]
        ]
    },
    {
        "id": "5bc04e86d8927f1e",
        "type": "inject",
        "z": "28c60231abb95e2c",
        "name": "kill",
        "props": [
            {
                "p": "kill",
                "v": "",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 1040,
        "wires": [
            [
                "cb1550cb0f5226fd"
            ]
        ]
    },
    {
        "id": "c4ae8968.68a538",
        "type": "heatwebNode",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "nodeConfig": "550ec543.b55bc4",
        "x": 1010,
        "y": 180,
        "wires": [
            [
                "e2a5359d.ef1ea"
            ]
        ]
    },
    {
        "id": "81452df3.f1e0b8",
        "type": "heatwebRemote",
        "z": "580bb6a3.5dc1d",
        "d": true,
        "name": "",
        "nodeConfig": "550ec543.b55bc4",
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "e2a5359d.ef1ea"
            ]
        ]
    },
    {
        "id": "6db74d6.e025e34",
        "type": "heatwebFilter",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "nodeConfig": "550ec543.b55bc4",
        "resetEvery": "60",
        "defaultGroup": "dat",
        "defaultPoints": "10",
        "deadband": "",
        "storeHistoricEx": false,
        "x": 370,
        "y": 180,
        "wires": [
            [
                "8b488cbb14b093cb",
                "5794e74d.4504f8",
                "de5cbb28.0bca7"
            ],
            [
                "f7abd73e.da268",
                "16d3ed6.1101e13",
                "6ed780fa.52d71",
                "5794e74d.4504f8"
            ]
        ]
    },
    {
        "id": "72fc070f.39dd8",
        "type": "link in",
        "z": "580bb6a3.5dc1d",
        "name": "handler",
        "links": [
            "0a7561544c78863d",
            "10ee4216045b7731",
            "1d8ef88d8c83d435",
            "26f1ad336f82aeeb",
            "32f9b18e.982aee",
            "392d126135d185ae",
            "ae865c20.2fec3",
            "ca1358f93e7b6dc8",
            "e162d709.82b3",
            "e2a5359d.ef1ea",
            "e44a91c9.939dc",
            "f35f2c270fa6bc6f",
            "7c75803224f63aee",
            "e8af654e5c6cc86f",
            "c67d835197d47ee5",
            "9f977218dce9a25f"
        ],
        "x": 205,
        "y": 180,
        "wires": [
            [
                "6db74d6.e025e34"
            ]
        ]
    },
    {
        "id": "e2a5359d.ef1ea",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1195,
        "y": 160,
        "wires": []
    },
    {
        "id": "5794e74d.4504f8",
        "type": "mqtt out",
        "z": "580bb6a3.5dc1d",
        "name": "No Retain",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 620,
        "y": 180,
        "wires": []
    },
    {
        "id": "f7abd73e.da268",
        "type": "switch",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/xnode",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/cmd/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/set/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/raw/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "json/sync",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 610,
        "y": 340,
        "wires": [
            [],
            [],
            [],
            [],
            [
                "4a7695e79d88af15"
            ],
            [
                "adae7e8a.85a74",
                "4a7695e79d88af15"
            ]
        ]
    },
    {
        "id": "adae7e8a.85a74",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "mode": "link",
        "links": [
            "2143c6002c05358f",
            "6167102f3b645906"
        ],
        "x": 735,
        "y": 360,
        "wires": []
    },
    {
        "id": "32f9b18e.982aee",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 455,
        "y": 480,
        "wires": []
    },
    {
        "id": "4a7b0367.1dda1c",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/net_1_ip4",
        "payloadType": "str",
        "x": 220,
        "y": 560,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "16d3ed6.1101e13",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "10199216.12d03e",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/net_2_ip4",
        "payloadType": "str",
        "x": 220,
        "y": 600,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "db6ad2fe.19c03",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "cmd/request",
        "payload": "local/+/+/+/mem_total",
        "payloadType": "str",
        "x": 220,
        "y": 640,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "68804932.313de8",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "cmd/request",
        "payload": "local/+/+/+/mem_free",
        "payloadType": "str",
        "x": 220,
        "y": 680,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "6ed780fa.52d71",
        "type": "switch",
        "z": "580bb6a3.5dc1d",
        "name": "Only Requests",
        "property": "mode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "request",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 640,
        "y": 420,
        "wires": [
            [
                "69cac137.62091"
            ]
        ]
    },
    {
        "id": "69cac137.62091",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 460,
        "wires": []
    },
    {
        "id": "ed00b81b.500ff8",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/dat/#",
        "payloadType": "str",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "170c616c.8b5bef",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "cmd/request",
        "payload": "local/+/+/+/fs_0_use",
        "payloadType": "str",
        "x": 220,
        "y": 720,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "ba62991c.c36168",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "400",
        "topic": "cmd/request",
        "payload": "local/+/+/system/#",
        "payloadType": "str",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "30eb37b6.547d88",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/upTime",
        "payloadType": "str",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "679a6694.f7bfc8",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/upTimeH",
        "payloadType": "str",
        "x": 220,
        "y": 480,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "bb65f185.3adab",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "216000",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/os_hostname",
        "payloadType": "str",
        "x": 250,
        "y": 520,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "51318833.c258d8",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "36000",
        "crontab": "",
        "once": true,
        "onceDelay": "450",
        "topic": "cmd/request",
        "payload": "local/+/+/settings/#",
        "payloadType": "str",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "311e9db6.ba1b82",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "66c2e225.64a90c"
        ],
        "x": 735,
        "y": 140,
        "wires": []
    },
    {
        "id": "7109deeb.a22d3",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "900",
        "topic": "cmd/request",
        "payload": "local/+/+/cpu/#",
        "payloadType": "str",
        "x": 240,
        "y": 800,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "2dde7725.9f7118",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "254c663c.1890fa"
        ],
        "x": 735,
        "y": 100,
        "wires": []
    },
    {
        "id": "dd49d580.483498",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "USERS",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"admin\":{\"networks\":[{\"networkId\":\"local\",\"server\":\"192.168.0.250\",\"port\":8080,\"secure\":false,\"user\":\"admin\",\"password\":\"12345678\"}]},\"guest\":{\"networks\":[{\"networkId\":\"local\",\"server\":\"192.168.0.250\",\"port\":8080,\"secure\":false,\"user\":\"guest\",\"password\":\"guest\"}]}}",
        "payloadType": "json",
        "x": 1000,
        "y": 60,
        "wires": [
            [
                "94ba0d3d.e77e1"
            ]
        ]
    },
    {
        "id": "94ba0d3d.e77e1",
        "type": "change",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "users",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "4a7695e79d88af15",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "mode": "link",
        "links": [
            "3a197b072de52765",
            "03eda15622c029f1",
            "ef923f9f8ffe71dd"
        ],
        "x": 735,
        "y": 320,
        "wires": []
    },
    {
        "id": "8b488cbb14b093cb",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 60,
        "wires": []
    },
    {
        "id": "bfed0a27b4c87767",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "about",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 620,
        "y": 520,
        "wires": [
            [
                "5591a77bf54b568e"
            ]
        ]
    },
    {
        "id": "fb19782f815bcb84",
        "type": "http response",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 520,
        "wires": []
    },
    {
        "id": "5591a77bf54b568e",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "func": "msg.payload = JSON.stringify({\"node\":global.get(\"node\"),\"networkId\":global.get(\"networkId\"),\"nodeDescription\":global.get(\"nodeDescription\"),\"nodeName\":global.get(\"nodeName\")})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 520,
        "wires": [
            [
                "fb19782f815bcb84"
            ]
        ]
    },
    {
        "id": "ff28800e4bbba1c7",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "Clear Alarms & Sync",
        "func": "\n\n\n//for (var net in global.get(\"readings\")) {\nvar net = global.get(\"localNetworkId\");\n\n    for (var dev in global.get(\"readings.\"+net)) {\n    \n            if (global.get(\"readings.\"+net+\".\"+dev+\".alarm\")) {\n                \n                global.set(\"readings.\"+net+\".\"+dev+\".alarm\", {});\n                \n            }\n        \n    }\n    \n//}\n\nmsg.topic = \"cmd/sync\"\nmsg.payload = net + \"/#\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 300,
        "wires": [
            [
                "0a7561544c78863d"
            ]
        ]
    },
    {
        "id": "f8a586463e821247",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "ff28800e4bbba1c7"
            ]
        ]
    },
    {
        "id": "0a7561544c78863d",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1345,
        "y": 300,
        "wires": []
    },
    {
        "id": "78d6fbafd103f379",
        "type": "ui_button",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "group": "36b47e47.04f1c2",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Clear Alarms",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "cmd:clearalarms",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 990,
        "y": 280,
        "wires": [
            [
                "ff28800e4bbba1c7"
            ]
        ]
    },
    {
        "id": "0916c03a0c141250",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "local/+/+/+/cpu_currentload",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "cmd/request",
        "payload": "local/+/+/+/cpu_currentload",
        "payloadType": "str",
        "x": 240,
        "y": 760,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "518305dd1d973895",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "/api/readings/:vargroup",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 680,
        "y": 660,
        "wires": [
            [
                "1c09662af1958f62",
                "dd20e9fca3781c4c"
            ]
        ]
    },
    {
        "id": "1c09662af1958f62",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "Metrics",
        "func": "\nvar metrics = global.get(\"readings.local\") || {};\n\n\nvar net = global.get(\"networkId\") || \"local\";\n\nvar oot = { readings: [] };\n//oot = 'stat_state {network=\"local\", node=\"mynodered1\", device=\"prometheus\", vargroup=\"stat\", varkey=\"state\"} 1\\n';\n\nfor (var dev in metrics) {\n    for (var grp in metrics[dev]) {\n\n        if (msg.req.params.vargroup && grp != msg.req.params.vargroup) { continue; }\n\n        for (var m in metrics[dev][grp]) {\n\n            var tline = {};\n            if (metrics[dev][grp][m].topic) {\n\n                tline.value = metrics[dev][grp][m].value;\n                tline.time = metrics[dev][grp][m].timestamp;\n                tline.title = metrics[dev][grp][m].title || \"\";\n                tline.units = metrics[dev][grp][m].units || \"\";\n                tline.network = net;\n                tline.node = metrics[dev][grp][m].topic.split(\"/\")[1];\n                tline.device = dev;\n                tline.vargroup = grp;\n                tline.varkey = m;\n\n                if (msg.payload.select) {\n\n                    tline = tline[msg.payload.select];\n\n                    if (oot.readings.indexOf(tline) < 0) { oot.readings.push(tline); }\n\n                } else {\n\n                    oot.readings.push(tline);\n                }\n\n\n\n            }\n            //oot += tops[3] + '_' + tops[4] + '{network=\"' + net + '\",node=\"' + tops[1] + '\",device=\"' + tops[2] + '\",vargroup=\"' + tops[3] + '\",varkey=\"' + tops[4] + '\"} ' + metrics[m].payload + \"\\n\";\n        }\n    }\n}\n\nmsg.payload = oot;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 600,
        "wires": [
            [
                "de79189b967c2492",
                "303547d4871dc1e6"
            ]
        ]
    },
    {
        "id": "f4cec4c48cb94a38",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "/api/readings",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 650,
        "y": 600,
        "wires": [
            [
                "1c09662af1958f62",
                "dc8557effbb07747"
            ]
        ]
    },
    {
        "id": "de79189b967c2492",
        "type": "http response",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 600,
        "wires": []
    },
    {
        "id": "303547d4871dc1e6",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 660,
        "wires": []
    },
    {
        "id": "7622ca4aa75d6b27",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "/cmd",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 620,
        "y": 740,
        "wires": [
            [
                "37ee9ad397338449",
                "5fd1baeb1c818156"
            ]
        ]
    },
    {
        "id": "37ee9ad397338449",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "Metrics",
        "func": "msg.payload={\"data\":[{return:\"ok\"}]};\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 760,
        "wires": [
            [
                "859484ecdc7e8eff",
                "449a3389bd406444"
            ]
        ]
    },
    {
        "id": "859484ecdc7e8eff",
        "type": "http response",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 760,
        "wires": []
    },
    {
        "id": "5fd1baeb1c818156",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 720,
        "wires": []
    },
    {
        "id": "247724fd2c92998a",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "/cmd",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 620,
        "y": 800,
        "wires": [
            [
                "37ee9ad397338449",
                "08df032ed7de4560"
            ]
        ]
    },
    {
        "id": "449a3389bd406444",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 800,
        "wires": []
    },
    {
        "id": "08df032ed7de4560",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 800,
        "wires": []
    },
    {
        "id": "dd20e9fca3781c4c",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 660,
        "wires": []
    },
    {
        "id": "2cc170705ae25adc",
        "type": "mqtt in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "topic": "_/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 100,
        "wires": [
            [
                "8aa46b4ede182d15"
            ]
        ]
    },
    {
        "id": "8aa46b4ede182d15",
        "type": "change",
        "z": "580bb6a3.5dc1d",
        "name": "remove _/",
        "rules": [
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "_/",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 100,
        "wires": [
            [
                "6db74d6.e025e34"
            ]
        ]
    },
    {
        "id": "de5cbb28.0bca7",
        "type": "switch",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/cmd/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/set/",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 610,
        "y": 120,
        "wires": [
            [],
            [
                "2dde7725.9f7118"
            ],
            [
                "311e9db6.ba1b82"
            ]
        ]
    },
    {
        "id": "dc8557effbb07747",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 560,
        "wires": []
    },
    {
        "id": "69693e598ea4addc",
        "type": "mqtt out",
        "z": "580bb6a3.5dc1d",
        "name": "Central MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0a9a86a0d76f9647",
        "x": 1280,
        "y": 420,
        "wires": []
    },
    {
        "id": "ce8e3434b5f26c0e",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "function 3",
        "func": "\nvar dataout = {};\nvar bits = msg.topic.split(\"/\");\ndataout.network = bits[0];\ndataout.node = bits[1];\ndataout.device = bits[2];\ndataout.vargroup = bits[3];\ndataout.varkey = bits[4];\ndataout.payload = msg.payload;\n\nmsg.payload = JSON.stringify(dataout);\n\nmsg.topic = \"heatweb/\" + global.get(\"node\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "caf6cdd410538579",
                "69693e598ea4addc"
            ]
        ]
    },
    {
        "id": "caf6cdd410538579",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 480,
        "wires": []
    },
    {
        "id": "6167102f3b645906",
        "type": "link in",
        "z": "580bb6a3.5dc1d",
        "name": "link in 5",
        "links": [
            "adae7e8a.85a74"
        ],
        "x": 985,
        "y": 420,
        "wires": [
            [
                "ce8e3434b5f26c0e"
            ]
        ]
    },
    {
        "id": "6af90896.407f38",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "562c9c07.d14df4"
            ]
        ]
    },
    {
        "id": "562c9c07.d14df4",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "//if (!flow.get(\"selectedhiu\")) { return null; }\n//if (!global.get(\"readings.\" + flow.get(\"selectedhiu\"))) { return null; }\n\n\nvar icongreen = 'http://www.heatweb.co.uk/w/images/thumb/2/2a/Greenled.png/120px-Greenled.png'; \nvar iconred = 'http://www.heatweb.co.uk/w/images/thumb/3/39/Redled.png/120px-Redled.png'; \nvar icongrey = 'https://www.heatweb.co.uk/w/images/7/78/Greyled.png'; \nvar iconyellow = 'https://www.heatweb.co.uk/w/images/thumb/5/59/Yellowled.png/180px-Yellowled.png'; \n                        \nvar htmlt = '';\nvar filt = flow.get(\"filterdata\") || \"\";\n\nvar listout = [];\n\nvar defaultTopics = global.get(\"topics.default\") || {};\nvar datData = defaultTopics[\"dat\"] || {}; \n\nfor (var network in global.get(\"readings\")) { \n\n    for (var device in global.get(\"readings.\"+network)) { \n        \n        var htmlline = \"\";\n        var htmllineCount = 0;\n        var statStateLine = \"\";\n        \n        var hiudata = global.get(\"readings.\" + network + \".\" + device);\n        \n        \n        //flow.set(\"tempid\",hiudata.system.tempid);\n        \n        \n        var dicon=\"\";\n        \n        for (var key in hiudata) {\n            \n            if(key == flow.get(\"selecteddata\") || flow.get(\"selecteddata\")=='all' ) { \n            \n                var groupdata = hiudata[key];\n                \n                var typeData = defaultTopics[key] || {}; \n            \n                for (var gkey in groupdata) {\n                    \n                    var okline=1;\n                    \n                    if (gkey==\"nodeXXX\" || gkey==\"timestamp\") { okline=0; }\n                    \n                    if (key==\"json\")  { okline=0; }\n                    \n                    if (filt!==\"\") {\n                        \n                        var teststr = \" /\" + device + \"/\" + key + \"/\" + gkey + \"/\" + network + \"/\"  ;\n                        \n                        if (key==\"alarm\") {\n                            if(groupdata[gkey].value == 'ok' || groupdata[gkey].value == '0') {\n                                teststr += \"/green\";\n                            } else { \n                                teststr += \"/red\";\n                            }\n                            \n                        }\n                     \n                        \n                        if (teststr.indexOf(filt)<1) { okline=0; }\n                    }\n                    \n                    if (okline==1) {\n                        var icon = \"\";\n                        var iconsrc = \"\";\n                        if (key==\"alarm\") { \n                            \n                            if(groupdata[gkey].value == 'ok' || groupdata[gkey].value == '0') {\n                                \n                                iconsrc = icongreen;\n                            } else if(groupdata[gkey].value == 'off') {\n                                iconsrc = icongrey ; \n                            } else { \n                                iconsrc = iconred ; \n                            }\n                            icon=' <img height=\"12\" src=\"' + iconsrc + '\">'; \n                        }\n                        \n                        var gkeySh = gkey;\n                        //if (gkeySh.length>16) { gkeySh = gkeySh.substr(0,10) + \"..\" + gkeySh.substr(gkeySh.length-4); }\n                        \n                        //mm +=  '<md-button class=\"rounded myB\" ng-click=\"send({payload:' + \"'\" + m[mmm] + \"'\" + '})\">';\n                        \n                        var butts = \"\";\n                        //butts = '</td><td><span id=\"dbut' + key + '\" ng-click=\"send({payload:' + \"'\" + key + \"/\" + gkeySh + \"'\" + '})\">Graph</span>';\n                        \n                        //if (!isNaN(groupdata[gkey].value)) {\n                        var hasH = global.get(\"readingsHistory.\" + network + \".\" + device + \".\" + key + \".\" + gkey) || [];\n                        if (!isNaN(groupdata[gkey].value) && hasH[2]) {\n                            butts += '<td class=\"tdLS\" width=\"70\">';\n                            //butts += '<span class=\"smB\">';\n                            butts +=  '<md-button class=\"rounded myB thinB\" ng-click=\"send({payload:' + \"'\" + network + \".\" + device + \".\" + key + \".\" + gkeySh + \"'\" + '})\">';\n                            butts +=  \"Graph\";\n                            butts +=  '</md-button>';\n                            //butts +=  '</span>';\n                            butts +=  '</td>';\n                        } else {\n                            butts =  '<td class=\"tdLS\" width=\"70\"> </td>';\n                        }\n                        \n                        //htmllineAdd = '<tr><td>' + key + \" / \" + gkeySh + '</td><td align=\"right\">' + groupdata[gkey].value + icon + '</td></tr>';\n                        //htmllineAdd = '<table width=\"100%\"><tr><td>' + key + \" / \" + gkeySh + '</td><td align=\"right\">' + groupdata[gkey].value + icon + '</td><td> </td></tr></table>';\n                        htmllineAdd = '<table width=\"100%\"><tr><td>' + key + \" / \" + gkeySh + '</td><td align=\"right\">' + groupdata[gkey].value + icon  +'</td><td> </td>' + butts + '</tr></table>';\n\n                        htmlline += htmllineAdd\n                        if(key==\"stat\" && gkey==\"state\") { statStateLine = htmllineAdd; }\n                        htmllineCount++;\n                        \n                        \n                        \n                        var gkey2 = gkey.replace(\"Sensor\",\"\");\n                        var keyData = typeData[gkey2] || datData[gkey2] || {};\n                        \n                        var mytitle = keyData[\"title\"] || gkey;\n                        var units = keyData[\"units\"] || \"\";\n                        \n                        if ((gkey.indexOf(\"Sensor\")>0) && (mytitle.indexOf(\"Sensor\")<1)) { \n                            mytitle += \" sensor\"\n                            units = \"\";\n                        }\n                        \n                        if (!typeData[gkey2]) {  units = \"\"; }\n                        \n                        \n                        var moredes = device + \" / \" + key;\n                        \n                        \n                        if (keyData[\"title\"]) { moredes += \" / \" + gkey; }\n                        \n                        //var units = \"\";\n                        var mytopic =  groupdata[gkey].topic; //\"ihiu/\"+node+\"/\"+xx+\"/\"+k+\"/\"+kk;\n                        \n                        var newb={\n                            \"title\": \"<table cellpadding='0' width='100%'><tr><td><b>\" + mytitle + \"</b></td><td align='right'><big>\" + groupdata[gkey].value +  \" \"+ units + \"</big></td></tr></table>\",\n                            \"description\": \"<table cellpadding='0' width='100%'><tr><td>\" + moredes + \"</td><td width='60' align='center'></td></tr></table>\",\n                             \"topic\": mytopic\n                        };\n                        if (iconsrc!==\"\") { newb[\"icon\"] = iconsrc; } //else  { newb[\"icon_name\"] = \"fa-cog\"; }\n                           \n                        listout.push(newb);\n                        \n                    }\n                }\n        \n            }\n        }\n        \n        if(hiudata[\"stat\"]) {\n        if(hiudata[\"stat\"][\"state\"]){\n            if(hiudata[\"stat\"][\"state\"][\"value\"] == 'ok') {\n                dicon=' <img height=\"12\" src=\"' + icongreen + '\">'; \n            } else if(hiudata[\"stat\"][\"state\"][\"value\"] == 'on') {\n                dicon=' <img height=\"12\" src=\"' + icongreen + '\">'; \n            }  else if(hiudata[\"stat\"][\"state\"][\"value\"].indexOf('arning')>0) {\n                dicon=' <img height=\"12\" src=\"' + iconyellow + '\">'; \n            } else if(hiudata[\"stat\"][\"state\"][\"value\"] == 'alarm') {\n                dicon=' <img height=\"12\" src=\"' + iconred + '\">'; \n            } else { \n                dicon=' <img height=\"12\" src=\"' + icongrey + '\">'; \n            }\n            dicon = \"<b>\" + hiudata[\"stat\"][\"state\"][\"value\"] + \"</b>\" + dicon;\n        }\n        }\n        \n        if (htmlline!==\"\") {\n        \n            htmlt +=  '<table width=\"100%\"><tr><td><b>' + device + '</b></td><td align=\"right\">' + dicon + '</td></tr></table>';\n            \n            if(htmllineCount==1 && htmlline.indexOf(\"tat / state\")>0) { }\n            else {\n                \n                if(htmllineCount>1 && statStateLine!==\"\") { htmlline =  htmlline.replace(statStateLine,\"\"); }\n                htmlt +=   htmlline; \n                \n            }\n            \n            htmlt +=  '<hr />';\n        }\n    }\n}\n\nhtmlt = htmlt.replace(/Exchanger/g, \"\");\n\nhtmlt = htmlt.replace(\">st<\", \">State<\");\nhtmlt = htmlt.replace(\">fC<\", \">DHW Flow Rate [l/m]<\");\nhtmlt = htmlt.replace(\">tCo<\", \">DHW Output Temperature [C]<\");\nhtmlt = htmlt.replace(\">tH<\", \">Primary Flow Temp [C]<\");\nhtmlt = htmlt.replace(\">tHoDHW<\", \">Primary Rtn Temp DHW [C]<\");\nhtmlt = htmlt.replace(\">tHoCH<\", \">Primary Rtn Temp CH [C]<\");\nhtmlt = htmlt.replace(\">tHoDHW<\", \">Primary Rtn Temp DHW [C]<\");\nhtmlt = htmlt.replace(\">xDHW<\", \">Valve Position DHW<\");\nhtmlt = htmlt.replace(\">xCH<\", \">Valve Position CH<\");\nhtmlt = htmlt.replace(\">stat<\", \">Room Thermostat<\");\nhtmlt = htmlt.replace(\">dpH<\", \">Primary Diff Pressure [bar]<\");\nhtmlt = htmlt.replace(\">fHDHW<\", \">Primary Flow Rate DHW [l/m]<\");\nhtmlt = htmlt.replace(\">fHCH<\", \">Primary Flow Rate CH [l/m]<\");\nhtmlt = htmlt.replace(\">eT<\", \">Temp Error DHW [C]<\");\n\nhtmlt = htmlt.replace(\">TTdhw<\", \">Setpoint DHW [C]<\");\nhtmlt = htmlt.replace(\">eS<\", \">Error State<\");\nhtmlt = htmlt.replace(\">tCHo<\", \">CH Output Temp [C]<\");\nhtmlt = htmlt.replace(\">pCH<\", \">CH System Pressure [bar]<\");\nhtmlt = htmlt.replace(\">pump<\", \">CH Pump<\");\nhtmlt = htmlt.replace(\">vC<\", \">DHW Volume Total [ltr]<\");\n\n\n\nmsg.payload=htmlt;\n\nmsg2={}; msg2.payload = listout;\n\nreturn [msg,msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 700,
        "wires": [
            [
                "d9ed7968.b72af8"
            ],
            [
                "6b5c6225.dcc93c"
            ]
        ]
    },
    {
        "id": "d9ed7968.b72af8",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datalist",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 620,
        "wires": [
            [
                "9e9cdb4c.9f6be8"
            ]
        ]
    },
    {
        "id": "6b5c6225.dcc93c",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1250,
        "y": 760,
        "wires": []
    },
    {
        "id": "2d561223.d9db6e",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selecteddata",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 620,
        "wires": [
            [
                "562c9c07.d14df4"
            ]
        ]
    },
    {
        "id": "6789714f.99829",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filterdata",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "drilling",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 780,
        "wires": [
            [
                "562c9c07.d14df4"
            ]
        ]
    },
    {
        "id": "f6a36c6b.c8c3",
        "type": "delay",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 870,
        "y": 500,
        "wires": [
            [
                "562c9c07.d14df4"
            ]
        ]
    },
    {
        "id": "38cd61a0.1cd1fe",
        "type": "rbe",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1150,
        "y": 580,
        "wires": [
            [
                "d9ed7968.b72af8"
            ]
        ]
    },
    {
        "id": "9e9cdb4c.9f6be8",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "drilling",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1530,
        "y": 620,
        "wires": [
            [
                "282422b2.6aa76e"
            ]
        ]
    },
    {
        "id": "ed5f8555.f418e8",
        "type": "ui_dropdown",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Type",
        "group": "ee34b8ab.222b68",
        "order": 4,
        "width": "2",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "All",
                "value": "all",
                "type": "str"
            },
            {
                "label": "Alarms",
                "value": "alarm",
                "type": "str"
            },
            {
                "label": "Readings",
                "value": "dat",
                "type": "str"
            },
            {
                "label": "Statistics",
                "value": "stat",
                "type": "str"
            },
            {
                "label": "Settings",
                "value": "settings",
                "type": "str"
            },
            {
                "label": "System",
                "value": "system",
                "type": "str"
            },
            {
                "label": "Meters",
                "value": "meter",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "x": 540,
        "y": 620,
        "wires": [
            [
                "2d561223.d9db6e"
            ]
        ]
    },
    {
        "id": "2513de4a.a661c2",
        "type": "ui_text_input",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "ee34b8ab.222b68",
        "order": 5,
        "width": "2",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "x": 560,
        "y": 780,
        "wires": [
            [
                "6789714f.99829"
            ]
        ]
    },
    {
        "id": "282422b2.6aa76e",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "template",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1690,
        "y": 620,
        "wires": [
            [
                "193e14fb.d6a80b"
            ]
        ]
    },
    {
        "id": "76bee7.e09ff118",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "all",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "drilling",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 560,
        "wires": [
            [
                "ed5f8555.f418e8"
            ]
        ]
    },
    {
        "id": "adfe6cac.8c846",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "setGroup",
        "links": [
            "d18c9773.2bb088"
        ],
        "x": 355,
        "y": 620,
        "wires": [
            [
                "ed5f8555.f418e8"
            ]
        ]
    },
    {
        "id": "ab8cb03b.d70f3",
        "type": "ui_dropdown",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Device",
        "group": "ee34b8ab.222b68",
        "order": 3,
        "width": "2",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "All",
                "value": "",
                "type": "str"
            },
            {
                "label": "Alarms",
                "value": "/red",
                "type": "str"
            },
            {
                "label": "State",
                "value": "state",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "x": 560,
        "y": 840,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "504e8408.6f0e6c",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "name": "",
        "group": "8ef017d0.9a0628",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "shuffle",
        "payload": "stat/",
        "payloadType": "str",
        "topic": "",
        "x": 350,
        "y": 760,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "8a3813c5.ed4c",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "group": "ee34b8ab.222b68",
        "order": 1,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "ALL",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "/",
        "payloadType": "str",
        "topic": "",
        "x": 350,
        "y": 680,
        "wires": [
            [
                "76bee7.e09ff118",
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "d57b221e.46366",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "name": "alarms",
        "group": "ee34b8ab.222b68",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": true,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "warning",
        "payload": "alarm",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 340,
        "y": 720,
        "wires": [
            [
                "ed5f8555.f418e8"
            ]
        ]
    },
    {
        "id": "c988811f.23218",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "name": "",
        "group": "8ef017d0.9a0628",
        "order": 3,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "flag",
        "payload": "/system",
        "payloadType": "str",
        "topic": "",
        "x": 353.0833282470703,
        "y": 804.0833435058594,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "9a659cee.6305e",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "name": "",
        "group": "8ef017d0.9a0628",
        "order": 4,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-thermometer-half",
        "payload": "dat/",
        "payloadType": "str",
        "topic": "",
        "x": 350,
        "y": 840,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "8e362fbc.2801",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "name": "",
        "group": "8ef017d0.9a0628",
        "order": 5,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-thermometer-half",
        "payload": "settings/",
        "payloadType": "str",
        "topic": "",
        "x": 350,
        "y": 880,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "220e2954.01e376",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "setFilter",
        "links": [
            "9b2ec796.e88cf8"
        ],
        "x": 555,
        "y": 720,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "193e14fb.d6a80b",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "43af1847.935fd8",
        "name": "rout",
        "order": 1,
        "width": "12",
        "height": "6",
        "format": "<br><div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1890,
        "y": 620,
        "wires": [
            [
                "d876816a.e2244",
                "68fce0f6.7193f"
            ]
        ]
    },
    {
        "id": "ffc2f769.631ac8",
        "type": "trigger",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 540,
        "y": 920,
        "wires": [
            [
                "ab8cb03b.d70f3"
            ]
        ]
    },
    {
        "id": "d876816a.e2244",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2110,
        "y": 620,
        "wires": []
    },
    {
        "id": "68fce0f6.7193f",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "//msg.payload = \"http://localhost/index.php?page=Graph&height=350&show=\"+msg.payload;\nmsg.payload = \"cmd:graph:\"+msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1880,
        "y": 720,
        "wires": [
            [
                "ba5f5516.919e68"
            ]
        ]
    },
    {
        "id": "b1160ab2.4def48",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<br><div ng-bind-html=\"msg.payload\"></div> ",
        "output": "str",
        "x": 1680,
        "y": 680,
        "wires": [
            [
                "193e14fb.d6a80b"
            ]
        ]
    },
    {
        "id": "83178f3c.8e09d",
        "type": "rbe",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 750,
        "y": 980,
        "wires": [
            [
                "ffc2f769.631ac8"
            ]
        ]
    },
    {
        "id": "ba5f5516.919e68",
        "type": "link out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "906024b7.9e3e48",
            "96558a40.5d4f48"
        ],
        "x": 1975,
        "y": 720,
        "wires": []
    },
    {
        "id": "9c3bb7a5.4d7a58",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "DROPDOWN",
        "func": "msg.options  = [ {\"All\":\"/\"}, {\"Alarms\":\"/red\"} ];\n\nfor (var network in global.get(\"readings\")) { \n\n    var lineout = {};\n    lineout[network.replace(\"_\", \" \")] = \"/\" + network + \"/\";\n    msg.options.push(lineout);\n\n}\n\nfor (network in global.get(\"readings\")) { \n\n    for (var device in global.get(\"readings.\"+network)) { \n\n        lineout = {};\n        lineout[device] = \"/\" + device + \"/\";\n        msg.options.push(lineout);\n    \n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 980,
        "wires": [
            [
                "83178f3c.8e09d"
            ]
        ]
    },
    {
        "id": "e5c3fb8b.944008",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 980,
        "wires": [
            [
                "9c3bb7a5.4d7a58"
            ]
        ]
    },
    {
        "id": "562969d9.1acd48",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "history",
        "func": "var gdat0 = {\"series\":[],\"data\":[]};\n\nvar gtype = msg.payload;\nvar selectedGraph=\",\";\nvar sd = global.get(\"standardGraph\") || \"\";\n\nif (msg.payload.substr(0,6)==\"graph:\") {\n    \n    gtype = \"graphall\";\n    sd = msg.payload.substr(6);\n} \n\n\n\n\n\nfor (var lin in sd.split(\",\")) {\n    \n    var dothis = 1;\n    var ln = sd.split(\",\")[lin];\n    \n    if (gtype!==\"graphall\") {\n        \n        var lns = ln.split(\".\")[3];\n        if(gtype==\"grapht\" && lns.substr(0,1)!=\"t\" && lns.substr(0,1)!=\"T\") { dothis = 0; continue;}\n        else if(gtype==\"graphp\" && lns.substr(0,1)!=\"p\") { dothis = 0; continue;}\n        else if(gtype==\"graphf\" && lns.substr(0,1)!=\"f\") { dothis = 0; continue;}\n        else if(gtype==\"graphkwh\" && lns.substr(0,3)!=\"kwh\") { dothis = 0; continue;}\n        else if(gtype==\"graphkw\" && (lns.substr(0,2)!=\"kw\" || lns.substr(0,3)==\"kwh\")) { dothis = 0; continue;}\n        \n    }\n    \n    if (dothis==1) {\n        \n        selectedGraph += \",\" + ln.split(\".\")[3] + \",\";\n        \n        var dat = global.get(\"readingsHistory.\" + ln) || {};\n        \n        var itemData = [];\n        for (var readin in dat) {\n            \n            itemData.push({\"x\":dat[readin].timestamp, \"y\":dat[readin].value});\n            \n        }\n        \n        gdat0.series.push(ln.split(\".\")[3]);\n        gdat0.data.push(itemData);\n    }\n    \n}\n\nmsg.payload = [];\nmsg.payload.push(gdat0);\n\n\nglobal.set(\"selectedGraph\",selectedGraph);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1980,
        "wires": [
            [
                "10c3f765.254dd9"
            ]
        ]
    },
    {
        "id": "f4f1c704.705e38",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "poweroff",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reboot",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "screenoff",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cleargraph",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "graph",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "32b356c.727daaa"
            ],
            [
                "4b53ff20.944ec"
            ],
            [
                "5c85c22a.9dd31c"
            ],
            [
                "23bec7e3.287aa8"
            ],
            [
                "562969d9.1acd48",
                "1fbc21a0.42a4de"
            ]
        ]
    },
    {
        "id": "10c3f765.254dd9",
        "type": "ui_chart",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "group": "31ddf4e3.0519dc",
        "order": 0,
        "width": "12",
        "height": "7",
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1030,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "7106c32a.f7fbdc",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 1980,
        "wires": [
            [
                "562969d9.1acd48"
            ]
        ]
    },
    {
        "id": "c797794c.dd6478",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "if((flow.get(\"screenon\")||\"1\")!=\"1\") { flow.set(\"screenon\",\"1\"); return null; }\n\n\nif ((\" \"+msg.payload).indexOf(\"cmd:\")==1) {\n    \n    msg2={};\n    msg2.payload = msg.payload.substr(4);\n    \n    return [null,null,msg2,msg];\n    \n} else if (((\" \"+msg.payload).indexOf(\"http\")==1) || ((\" \"+msg.payload).indexOf(\"dashboard.php\")==1)) {\n    \n    msg2={};\n    msg2.payload = msg.payload;\n    \n    msg.payload = \"Browser\";\n    \n    return [msg,msg2,null,msg];\n    \n} else {\n\n    return [msg,null,null,msg];\n\n}",
        "outputs": 4,
        "noerr": 0,
        "x": 350,
        "y": 1400,
        "wires": [
            [
                "330fb08c.56046"
            ],
            [
                "157ff427.90adac"
            ],
            [
                "66bd8c8e.5bb634",
                "f4f1c704.705e38"
            ],
            [
                "f4a2cb0e.cc71e8",
                "93aa8803.d762d8"
            ]
        ]
    },
    {
        "id": "32b356c.727daaa",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Are you sure you want to shut down?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 1520,
        "wires": [
            [
                "efbdf53c.f17388"
            ]
        ]
    },
    {
        "id": "4b53ff20.944ec",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Are you sure you want to reboot?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 1580,
        "wires": [
            [
                "3c8aa46a.228a1c"
            ]
        ]
    },
    {
        "id": "5c85c22a.9dd31c",
        "type": "exec",
        "z": "9ad9f74f.55ef58",
        "command": "export DISPLAY=:0; sleep 1; xset dpms force off",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 940,
        "y": 1640,
        "wires": [
            [
                "857d0ead.0eefc"
            ],
            [],
            []
        ]
    },
    {
        "id": "23bec7e3.287aa8",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "cleargraph",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 1920,
        "wires": [
            [
                "10c3f765.254dd9"
            ]
        ]
    },
    {
        "id": "66c2e225.64a90c",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "7d2dded9.2db22",
            "abe9ca55.20fc08",
            "311e9db6.ba1b82"
        ],
        "x": 535,
        "y": 2100,
        "wires": [
            [
                "808dfefa.ca41b",
                "eb2a6826.ed1f08"
            ]
        ]
    },
    {
        "id": "23c9b825.020758",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 850,
        "y": 1880,
        "wires": [
            [
                "10c3f765.254dd9"
            ]
        ]
    },
    {
        "id": "330fb08c.56046",
        "type": "link out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "f89813e8.cbd968",
            "27dd3d5e.5e27e2"
        ],
        "x": 575,
        "y": 1360,
        "wires": []
    },
    {
        "id": "157ff427.90adac",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "browser",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<style>\n    .maxsiz {\n\n    width: 100%; \n    height: 100%;\n\n}\n</style>\n<iframe class=\"maxsiz\" frameborder=\"0\" src=\"{{{payload}}}\"></iframe>",
        "output": "str",
        "x": 620,
        "y": 1400,
        "wires": [
            [
                "8382fe3d.011db"
            ]
        ]
    },
    {
        "id": "66bd8c8e.5bb634",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 1440,
        "wires": []
    },
    {
        "id": "f4a2cb0e.cc71e8",
        "type": "trigger",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "7",
        "extend": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 270,
        "y": 1620,
        "wires": [
            [
                "f0465a90.803e88"
            ]
        ]
    },
    {
        "id": "93aa8803.d762d8",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 290,
        "y": 1580,
        "wires": []
    },
    {
        "id": "96558a40.5d4f48",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "gomenu",
        "links": [
            "ba5f5516.919e68",
            "8bd72823.48ffa8"
        ],
        "x": 195,
        "y": 1400,
        "wires": [
            [
                "c797794c.dd6478"
            ]
        ]
    },
    {
        "id": "efbdf53c.f17388",
        "type": "ui_toast",
        "z": "9ad9f74f.55ef58",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1010,
        "y": 1520,
        "wires": [
            [
                "203458a8.c15748"
            ]
        ]
    },
    {
        "id": "3c8aa46a.228a1c",
        "type": "ui_toast",
        "z": "9ad9f74f.55ef58",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1010,
        "y": 1580,
        "wires": [
            [
                "5fd2a71f.e1c788"
            ]
        ]
    },
    {
        "id": "857d0ead.0eefc",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "screenon",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Dashboard",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 1640,
        "wires": [
            [
                "994bf91b.a564b8"
            ]
        ]
    },
    {
        "id": "8382fe3d.011db",
        "type": "link out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "e2be1f54.b5e92"
        ],
        "x": 715,
        "y": 1400,
        "wires": []
    },
    {
        "id": "f0465a90.803e88",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "screenon",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "203458a8.c15748",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 1520,
        "wires": [
            [
                "5b96ed94.afa714"
            ]
        ]
    },
    {
        "id": "5fd2a71f.e1c788",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 1580,
        "wires": [
            [
                "33c0b5f6.2b7a9a"
            ]
        ]
    },
    {
        "id": "5b96ed94.afa714",
        "type": "exec",
        "z": "9ad9f74f.55ef58",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1340,
        "y": 1520,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "33c0b5f6.2b7a9a",
        "type": "link out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "b8d3b38a.4c844"
        ],
        "x": 1255,
        "y": 1580,
        "wires": []
    },
    {
        "id": "6b4903b4.fc142c",
        "type": "ui_ui_control",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "events": "all",
        "x": 560,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "1fbc21a0.42a4de",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Graph",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1900,
        "wires": [
            [
                "6b4903b4.fc142c"
            ]
        ]
    },
    {
        "id": "a004a982.0cc798",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "group": "ee34b8ab.222b68",
        "name": "Virtual Keyboard",
        "order": 6,
        "width": "4",
        "height": "1",
        "format": "<script> \n    \n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n; (function ($, window, document, undefined) {\n\n    // undefined is used here as the undefined global variable in ECMAScript 3 is\n    // mutable (ie. it can be changed by someone else). undefined isn't really being\n    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n    // can no longer be modified.\n\n    // window and document are passed through as local variable rather than global\n    // as this (slightly) quickens the resolution process and can be more efficiently\n    // minified (especially when both are regularly referenced in your plugin).\n\n    // Create the defaults once\n    var pluginName = \"jkeyboard\",\n        defaults = {\n            layout: \"english\",\n            input: $('#input'),\n            customLayouts: {\n                selectable: []\n            },\n        };\n\n\n    var function_keys = {\n        backspace: {\n            text: 'DEL',\n        },\n        return: {\n            text: 'Enter'\n        },\n        shift: {\n            text: 'Shift'\n        },\n        space: {\n            text: 'Space'\n        },\n        numeric_switch: {\n            text: '123',\n            command: function () {\n                this.createKeyboard('numeric');\n                this.events();\n            }\n        },\n        layout_switch: {\n            text: '<i class=\"fa fa-keyboard-o\" aria-hidden=\"true\"></i>',\n            command: function () {\n                var l = this.toggleLayout();\n                this.createKeyboard(l);\n                this.events();\n            }\n        },\n        character_switch: {\n            text: 'ABC',\n            command: function () {\n                this.createKeyboard(layout);\n                this.events();\n            }\n        },\n        symbol_switch: {\n            text: '#+=',\n            command: function () {\n                this.createKeyboard('symbolic');\n                this.events();\n            }\n        }\n    };\n\n\n    var layouts = {\n        selectable: ['azeri', 'english', 'russian','french', 'emoji'],\n        azeri: [\n            ['q', 'ü', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'ö', 'ğ'],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ı', 'ə'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'ç', 'ş', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        english: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        russian: [\n            ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х'],\n            ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n            ['shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        french: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        emoji: [\n            ['😀', '😁', '😂', '🤣', '😃', '😄', '😅', '😆', '😉', '😊',],\n            ['😋', '😎', '😍', '😘', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],            \n        numeric: [\n            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n            ['-', '/', ':', ';', '(', ')', '$', '&', '@', '\"'],\n            ['symbol_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n        ],\n        numbers_only: [\n            ['1', '2', '3',],\n            ['4', '5', '6',],\n            ['7', '8', '9',],\n            ['0', 'backspace'],\n        ],\n        symbolic: [\n            ['[', ']', '{', '}', '#', '%', '^', '*', '+', '='],\n            ['_', '\\\\', '|', '~', '<', '>'],\n            ['numeric_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n\n        ]\n    }\n\n    var shift = false, capslock = false, layout = 'english', layout_id = 0;\n\n    // The actual plugin constructor\n    function Plugin(element, options) {\n        this.element = element;\n        // jQuery has an extend method which merges the contents of two or\n        // more objects, storing the result in the first object. The first object\n        // is generally empty as we don't want to alter the default options for\n        // future instances of the plugin\n        this.settings = $.extend({}, defaults, options);\n        // Extend & Merge the cusom layouts\n        layouts = $.extend(true, {}, this.settings.customLayouts, layouts);\n        if (Array.isArray(this.settings.customLayouts.selectable)) {\n            $.merge(layouts.selectable, this.settings.customLayouts.selectable);\n        }\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function () {\n            layout = this.settings.layout;\n            this.createKeyboard(layout);\n            this.events();\n        },\n\n        setInput: function (newInputField) {\n            this.settings.input = newInputField;\n        },\n\n        createKeyboard: function (layout) {\n            shift = false;\n            capslock = false;\n\n            var keyboard_container = $('<ul/>').addClass('jkeyboard'),\n                me = this;\n\n            layouts[layout].forEach(function (line, index) {\n                var line_container = $('<li/>').addClass('jline');\n                line_container.append(me.createLine(line));\n                keyboard_container.append(line_container);\n            });\n\n            $(this.element).html('').append(keyboard_container);\n        },\n\n        createLine: function (line) {\n            var line_container = $('<ul/>');\n\n            line.forEach(function (key, index) {\n                var key_container = $('<li/>').addClass('jkey').data('command', key);\n\n                if (function_keys[key]) {\n                    key_container.addClass(key).html(function_keys[key].text);\n                }\n                else {\n                    key_container.addClass('letter').html(key);\n                }\n\n                line_container.append(key_container);\n            })\n\n            return line_container;\n        },\n\n        events: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift'),\n                space_key = $(this.element).find('.space'),\n                backspace_key = $(this.element).find('.backspace'),\n                return_key = $(this.element).find('.return'),\n\n                me = this,\n                fkeys = Object.keys(function_keys).map(function (k) {\n                    return '.' + k;\n                }).join(',');\n\n            letters.on('click', function () {\n                me.type((shift || capslock) ? $(this).text().toUpperCase() : $(this).text());\n            });\n\n            space_key.on('click', function () {\n                me.type(' ');\n            });\n\n            return_key.on('click', function () {\n                me.type(\"\\n\");\n                me.settings.input.parents('form').submit();\n            });\n\n            backspace_key.on('click', function () {\n                me.backspace();\n            });\n\n            shift_key.on('click', function () {\n                if (capslock) {\n                    me.toggleShiftOff();\n                    capslock = false;\n                } else {\n                    me.toggleShiftOn();\n                }\n            }).on('dblclick', function () {\n                capslock = true;\n            });\n\n\n            $(fkeys).on('click', function () {\n                var command = function_keys[$(this).data('command')].command;\n                if (!command) return;\n\n                command.call(me);\n            });\n        },\n\n        type: function (key) {\n            var input = this.settings.input,\n                val = input.val(),\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n\n            var max_length = $(input).attr(\"maxlength\");\n            if (start == end && end == val.length) {\n                if (!max_length || val.length < max_length) {\n                    input.val(val + key);\n                    input.change()\n                    $('#vkeyname').text(val + key)\n                }\n            } else {\n                if (input_node.type == \"text\"){\n                    var new_string = this.insertToString(start, end, val, key);\n                    input.val(new_string);\n                    start++;\n                    end = start;\n                    input_node.setSelectionRange(start, end);\n                }else{\n                    input.val(val + key);\n                }\n                input.change()\n                $('#vkeyname').text(val + key)\n                \n            }\n            input.trigger('focus');\n\n            if (shift && !capslock) {\n                this.toggleShiftOff();\n            }\n        },\n\n        backspace: function () {\n            var input = this.settings.input,\n                val = input.val();\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n            if (input.type == \"text\"){\n                input.val(val.slice(0, start-1) + val.slice(start))\n                input_node.setSelectionRange(start-1, start-1);\n                console.log(val)\n                $('#vkeyname').text(val)\n            }else{\n                input.val(val.slice(0,-1))\n                $('#vkeyname').text(val.slice(0,-1))\n            }\n            input.change()\n            input.focus()\n        },\n\n        toggleShiftOn: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.addClass('uppercase');\n            shift_key.addClass('active')\n            shift = true;\n        },\n\n        toggleShiftOff: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.removeClass('uppercase');\n            shift_key.removeClass('active');\n            shift = false;\n        },\n\n        toggleLayout: function () {\n            layout_id = layout_id || 0;\n            var plain_layouts = layouts.selectable;\n            layout_id++;\n\n            var current_id = layout_id % plain_layouts.length;\n            var SelectedLayoutName = plain_layouts[current_id];\n            $('#vkeyname').text('V-Keyboard ' + SelectedLayoutName )\n            return plain_layouts[current_id];\n        },\n\n        insertToString: function (start, end, string, insert_string) {\n            return string.substring(0, start) + insert_string + string.substring(end, string.length);\n        }\n    };\n\n        /*\n\t\t// A really lightweight plugin wrapper around the constructor,\n\t\t// preventing against multiple instantiations\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\n\t\t\t\t\t\t\t\t$.data( this, \"plugin_\" + pluginName, new Plugin( this, options ) );\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n        */\n        var methods = {\n            init: function(options) {\n                if (!this.data(\"plugin_\" + pluginName)) {\n                    this.data(\"plugin_\" + pluginName, new Plugin(this, options));\n                }\n            },\n\t\t\tsetInput: function(content) {\n\t\t\t\tthis.data(\"plugin_\" + pluginName).setInput($(content));\n            },\n            setLayout: function(layoutname) {\n                // change layout if it is not match current\n                object = this.data(\"plugin_\" + pluginName);\n                if (typeof(layouts[layoutname]) !== 'undefined' && object.settings.layout != layoutname) {\n                    object.settings.layout = layoutname;\n                    object.createKeyboard(layoutname);\n                    object.events();\n                };\n            },\n        };\n\n\t\t$.fn[pluginName] = function (methodOrOptions) {\n            if (methods[methodOrOptions]) {\n                return methods[methodOrOptions].apply(this.first(), Array.prototype.slice.call( arguments, 1));\n            } else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\n                // Default to \"init\"\n                return methods.init.apply(this.first(), arguments);\n            } else {\n                $.error('Method ' +  methodOrOptions + ' does not exist on jQuery.tooltip');\n            }\n        };\n\n})(jQuery, window, document);\n</script>\n<style>\n    .jkeyboard {\n  display: inline-block;\n}\n.jkeyboard, .jkeyboard .jline, .jkeyboard .jline ul {\n  display: block;\n  margin: 0;\n  padding: 0;\n}\n.jkeyboard .jline {\n  text-align: center;\n  margin-left: -14px;\n}\n.jkeyboard .jline ul li {\n  font-family: arial, sans-serif;\n  font-size: 20px;\n  display: inline-block;\n  border: 1px solid #468db3;\n  -webkit-box-shadow: 0 0 3px #468db3;\n  -webkit-box-shadow: inset 0 0 3px #468db3;\n  margin: 5px 0 1px 6px;\n  color: #000000;\n  border-radius: 5px;\n  width: 52px;\n  height: 52px;\n  box-sizing: border-box;\n  text-align: center;\n  line-height: 52px;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: -moz-none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.jkeyboard .jline ul li.uppercase {\n  text-transform: uppercase;\n}\n.jkeyboard .jline ul li:hover, .jkeyboard .jline ul li:active {\n  background-color: #185a82;\n}\n.jkeyboard .jline .return {\n  width: 80px;\n}\n.jkeyboard .jline .space {\n  width: 366px;\n}\n.jkeyboard .jline .numeric_switch {\n  width: 65px;\n}\n.jkeyboard .jline .layout_switch {\n}\n.jkeyboard .jline .shift {\n  width: 60px;\n}\n.jkeyboard .jline .backspace {\n  width: 69px;\n}\n</style>\n\n\n\n\n<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n.nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    opacity:0.99;\n    z-index: 100; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n/* Modal Content */\n.modal-content {\n    position: fixed;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 0;\n    bottom: 0%;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    border: 1px solid #888;\n    width: fit-content;\n    max-width: 100%;\n    max-height: 100%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: animate;\n    -webkit-animation-duration: 0.4s;\n    animation-name: animate;\n    animation-duration: 0.4s\n}\n\n/* Add Animation */\n@-webkit-keyframes animate {\n    from {bottom:100%; opacity:0} \n    to {bottom:0%; opacity:1}\n}\n\n@keyframes animate {\n    from {bottom:100%; opacity:0}\n    to {bottom:0%; opacity:1}\n}\n\n/* The Close Button */\n.close {\n    color: black;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-header {\n    padding: 2px 16px;\n    background-color: aliceblue;\n    color: white;\n}\n\n.modal-body {padding: 2px 16px;}\n\n.modal-footer {\n    padding: 2px 16px;\n    background-color: #5cb85c;\n    color: white;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"myModal\" class=\"modal\">\n\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n      <div class=\"modal-header\">\n      <span class=\"close\" onclick=\"closeModal()\">&times;</span>\n      <h2 id=\"vkeyname\" style=\"background-color: aliceblue !important; color: black !important; text-align: center; min-height: 30px;\">V-Keyboard</h2>\n    </div>\n    <div class=\"modal-body\">\n        <div id=\"keyboard\"></div>\n        <div>\n        </div>\n    </div>\n  </div>\n</div>\n\n\n<script>\n    // Get the modal\nvar modal = document.getElementById('myModal');\n\n/*\n$('input[type=text]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"english\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n\n$('input[type=number]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"numbers_only\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n*/\n\nvar inputTags;\nvar inputType;\n\nvar getinputs = function() {\n    inputTags = document.getElementsByTagName(\"input\");\n    console.log(inputTags)\n    for (var i = 0; i < inputTags.length; i++) {\n        inputTags[i].addEventListener('click', openModal, false)\n    }\n}\n\nsetTimeout(function(){ getinputs(); }, 1000);\n\nvar inputTarget;\n\nvar openModal = function() {\n    inputType = event.target.type\n    inputTarget = event.target\n    var layoutName;\n    if (inputType == \"number\"){\n        //inputTarget.type = \"number\" //hack because chrome doesn't allow setselection in number inputs\n        //inputTarget.value = \"\"\n        layoutName = \"numbers_only\"\n    }else{\n        layoutName = \"english\"\n    }\n    $('#vkeyname').text(event.target.value)\n    $('#keyboard').unbind().removeData();\n    modal.style.display = \"block\";\n    $('#keyboard').jkeyboard({\n        layout: layoutName,\n        input: $('#'+$(this).attr('id'))\n    });\n}\n\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\n//span.onclick = function(event) {\n  //closeModal()\n//}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    var source = event.target;\n    if (source == modal || source == span) {\n        closeModal(source)\n    }\n};\n\nvar closeModal = function(source){\n    //console.log(\"closing\")\n    modal.style.display = \"none\";\n   \n    if (inputType == \"number\"){\n        inputTarget.type = \"number\" //hack because chrome doesn't allow selectionstart on number inputs\n    }\n}\n\n</script>\n<script>\n\nvar clickState = 1;\nvar btn = document.querySelector('.VK');\n\nbtn.addEventListener('click', function(){\n\n  if (clickState == 0) {\n    this.textContent = 'V-KeyBoard On';\n    modal = document.getElementById('myModal');\n    clickState = 1;\n  } else {\n    this.textContent = 'V-KeyBoard Off';\n    modal = document.getElementById('empty');\n    clickState = 0;\n  }\n\n});\n</script>\n\n<style>\n.VK{\n    position: fixed;\n    top: 60px;\n    right: 20px;\n    height: 30px;\n}\n</style>\n\n<div id=\"empty\"></div>\n<button style=\"display:none\" class=\"VK\">V-KeyBoard On</button> ",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "808dfefa.ca41b",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "pass graph",
        "func": "// var inv = msg.payload;\n\n// msg.payload = inv.value;\n\n// if (!inv.topic.split(\"/\")[4]) { return null; }\n\nmsg.topic = msg.topic.split(\"/\")[4];\n\n\nvar selectedGraph = global.get(\"selectedGraph\") || \"\";\n\nif (selectedGraph.indexOf(\",\"+msg.topic+\",\")<1) { return null; }\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2100,
        "wires": [
            [
                "10c3f765.254dd9",
                "eb2a6826.ed1f08"
            ]
        ]
    },
    {
        "id": "eb2a6826.ed1f08",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 2200,
        "wires": []
    },
    {
        "id": "ccbb20ec.44a33",
        "type": "exec",
        "z": "9ad9f74f.55ef58",
        "command": "export DISPLAY=:0; sleep 1; xset dpms force on",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 600,
        "y": 1280,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "bf3b2876.73db98",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1280,
        "wires": [
            [
                "ccbb20ec.44a33"
            ]
        ]
    },
    {
        "id": "f8df0f4c.e553c",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 820,
        "y": 1740,
        "wires": [
            [
                "5c85c22a.9dd31c"
            ]
        ]
    },
    {
        "id": "63f5f1b4.29d7f",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "600",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 820,
        "y": 1780,
        "wires": [
            [
                "5c85c22a.9dd31c"
            ]
        ]
    },
    {
        "id": "994bf91b.a564b8",
        "type": "ui_ui_control",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "events": "all",
        "x": 1300,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "ddb3413d.f5131",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 720,
        "wires": [
            [
                "d57b221e.46366"
            ]
        ]
    },
    {
        "id": "b97bc1c0.cb899",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "c982fbb8.1deb38",
        "name": "Clock Toolbar",
        "order": 2,
        "width": "0",
        "height": "0",
        "format": " \n<script>\n    (function(scope) {\n        console.log('Position 1');\n        console.dir(scope);\n        console.log(scope.msg);\n        scope.$watch('msg.payload', function(data) {\n            console.log('Position 2');\n            console.dir(data);\n            alert(data);\n        });\n    })(scope);\n</script>\n\n<script id=\"titleScript\" type=\"text/javascript\">\n\n\n$(function() {\n    if($('.md-toolbar-tools').length != 0){\n        loadClock();\n    }else setTimeout(loadClock, 500)\n});\n\nvar instr = \"\";\n\nfunction loadClock(){\n    $('#clock').remove();\n    var toolbar = $('.md-toolbar-tools');\n    \n    var div = $('<div/>');\n    var p = $('<p/ id=\"clock\">');\n    \n    \n    \n    div.append(p);\n    div[0].style.margin = '5px 5px 5px auto';\n    div[0].style.fontSize = '18px';\n    toolbar.append(div);\n\n    function displayTitle(lh) {\n        p.text(lh); \n    }\n    \n    function upTime() {\n        var d = new Date();\n        p.html(d.toLocaleString('en-GB') + (instr||\"\"));\n    }\n\n    if(document.clockInterval){ \n            clearInterval(document.clockInterval);\n            document.clockInterval = null;\n    }\n        \n    document.clockInterval = setInterval(upTime,1000);\n    \n    \n}\n\n\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 1160,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "5f220091.bf4cf",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "ca932fda.09d3",
            "c03b2ad5.8e8478"
        ],
        "x": 195,
        "y": 560,
        "wires": [
            [
                "76bee7.e09ff118",
                "2513de4a.a661c2",
                "b0b3904d.3e833"
            ]
        ]
    },
    {
        "id": "43e007fe.38ff38",
        "type": "ui_ui_control",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "events": "all",
        "x": 540,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b0b3904d.3e833",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Readings",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 500,
        "wires": [
            [
                "43e007fe.38ff38"
            ]
        ]
    },
    {
        "id": "9a783cd.aa426c",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 80,
        "wires": []
    },
    {
        "id": "8e10d78d.1bb458",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1310,
        "y": 80,
        "wires": [
            [
                "ec484785.877f98"
            ]
        ]
    },
    {
        "id": "ec484785.877f98",
        "type": "exec",
        "z": "9ad9f74f.55ef58",
        "command": "chromium-browser --start-fullscreen --kiosk --incognito --noerrdialogs --disable-translate --no-first-run --fast --fast-start --disable-infobars --disable-features=TranslateUI --disk-cache-dir=/dev/null  --password-store=basic --disable-pinch --overscroll-history-navigation=disabled --disable-features=TouchpadOverscrollHistoryNavigation 'http://localhost:1880/ui'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "chromium-browser",
        "x": 1490,
        "y": 80,
        "wires": [
            [
                "9a783cd.aa426c"
            ],
            [
                "9a783cd.aa426c"
            ],
            []
        ]
    },
    {
        "id": "a6df218d.b650f",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "c982fbb8.1deb38",
        "name": "Fonts",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto\">\n<!--<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Lato\">-->\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 530,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9d2f9b63.8f9228",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n<script>\n    (function(scope) {\n        console.log('Position 1');\n        console.dir(scope);\n        console.log(scope.msg);\n        scope.$watch('msg.payload', function(data) {\n            console.log('Position 2');\n            console.dir(data);\n            alert(data);\n        });\n    })(scope);\n</script>\n\n<script id=\"titleScript\" type=\"text/javascript\">\n\n\n$(function() {\n    if($('.md-toolbar-tools').length != 0){\n        loadClock();\n    }else setTimeout(loadClock, 500)\n});\n\nvar instr = \"\";\n\nfunction loadClock(){\n    $('#clock').remove();\n    var toolbar = $('.md-toolbar-tools');\n    \n    var div = $('<div/>');\n    var p = $('<p/ id=\"clock\">');\n    \n    \n    \n    div.append(p);\n    div[0].style.margin = '5px 5px 5px auto';\n    div[0].style.fontSize = '18px';\n    toolbar.append(div);\n\n    function displayTitle(lh) {\n        p.text(lh); \n    }\n    \n    function upTime() {\n        var d = new Date();\n        p.html(d.toLocaleString() + (instr||\"\"));\n    }\n\n    if(document.clockInterval){ \n            clearInterval(document.clockInterval);\n            document.clockInterval = null;\n    }\n        \n    document.clockInterval = setInterval(upTime,1000);\n    \n    \n}\n\n\n\n\n</script>\n",
        "output": "str",
        "x": 960,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "58390734.6e09a8",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "",
        "output": "str",
        "x": 700,
        "y": 280,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "26b0c09f.0e9e2",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "586160b5.d6aa"
        ],
        "x": 195,
        "y": 340,
        "wires": [
            [
                "4afbfbee.74b4d4",
                "444f8e15b3e99d1a"
            ]
        ]
    },
    {
        "id": "8e16bcc.c4a414",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "25",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "50",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "75",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 530,
        "y": 340,
        "wires": [
            [
                "58390734.6e09a8"
            ],
            [
                "54605462.01740c"
            ],
            [
                "8ea6bdbf.b18c1"
            ],
            [
                "38a7a1a.5f0775e"
            ],
            [
                "9aaea10.1c61d6"
            ]
        ]
    },
    {
        "id": "54605462.01740c",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"20\" height=\"15\"><rect x=\"7\" y=\"11\" width=\"5\" height=\"4\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 700,
        "y": 320,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "90a5a2d9.4144b",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"20\" height=\"15\"><rect x=\"0\" y=\"0\" width=\"5\" height=\"15\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"8\" y=\"5\" width=\"5\" height=\"10\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 920,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "8ea6bdbf.b18c1",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"20\" height=\"15\"><rect x=\"7\" y=\"11\" width=\"5\" height=\"4\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"14\" y=\"7\" width=\"5\" height=\"8\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 700,
        "y": 360,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "38a7a1a.5f0775e",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"20\" height=\"16\"><rect x=\"0\" y=\"12\" width=\"5\" height=\"4\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"7\" y=\"8\" width=\"5\" height=\"8\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"14\" y=\"4\" width=\"5\" height=\"12\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 700,
        "y": 400,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "9aaea10.1c61d6",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"28\" height=\"16\"><rect x=\"0\" y=\"12\" width=\"5\" height=\"4\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"7\" y=\"8\" width=\"5\" height=\"8\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"14\" y=\"4\" width=\"5\" height=\"12\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"21\" y=\"0\" width=\"5\" height=\"16\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 700,
        "y": 440,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "4afbfbee.74b4d4",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 400,
        "wires": []
    },
    {
        "id": "4a529116.59c24",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 260,
        "wires": []
    },
    {
        "id": "142dae9.49d4751",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "3d9e45e.bcd50ba",
        "name": "Dashboard stylesheet",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n\n.invisible {\n    display: none;\n}\n\n.dot {\n    height: 13px;\n    width: 13px;\n    background-color: rgb(52, 58, 52);\n    border-radius: 20%;\n    border: 2px;\n    border-color: rgb(5, 5, 20);\n    display: inline-block;\n}\n\n.maxsiz {\n    position: absolute;\n    top:0;\n    left:0;\n    width: 100%;\n    height: 100vh;\n}\n\n/* SCROLL BAR */\n/* width */\n::-webkit-scrollbar {\n  width: 12px;\n}\n\n/* Track */\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px grey; \n  border-radius: 6px;\n}\n \n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: #3037e8; \n  border-radius: 6px;\n}\n\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: #3037e8; \n}\n\n\n.nr-dashboard-theme .nr-dashboard-form {    \n    overflow: hidden;\n    \n}\n\n.nr-dashboard-theme .nr-dashboard-form-button {\n    \n    max-height: 40px;\n}\n\n.padd {\n    \n    padding: 10px;\n    padding-top: 10px;\n}\n\na {\n    color: #97b1eb;\n    text-decoration: none;\n    font-size: large;\n}\n    \n/*\nIt is reasnoble to declare the colors as CSS variables\nso they can be easily called by name where needed.\n\nYou can see that in many places the variables are not used. Change it!\n*/\n\n:root {\n  --color-green-primary: rgb(51, 204, 51);\n  --color-green-secondary: rgb(26, 101, 26);\n  --color-red-primary: rgb(255, 0, 0);\n  --color-red-secondary: rgba(153,0,0,1);\n  --color-gray-primary:rgba(40,40,40,1);\n  --color-gray-secondary:rgba(65,65,65,1);\n  --color-text-primary: rgb(230, 226, 209);\n  --color-widget-border: rgb(84, 78, 78);\n}\n\n/*\nAll CSS adjustments are commented out.\nTurn rules on one by one and see the changes.\nDon't use too many elements cos it wil be confusing\nStart with simple elements like text, slider or button\n\nMany of elements like buttons have states, \nthose rules must be found and adjusted also.\n*/\n\n.nr-dashboard-textinput md-input-container .md-input {\n    text-align: right;\n}\n\n\nmd-list-item {\n    min-height: 40px;\n    height: 40px;\n}\n.masonry-container {\n    position: relative;\n    width: 100%;\n    height:100%;\n    margin: 0 auto;\n    background: rgb(255,0,0);\n    background: linear-gradient(180deg,  var(--color-gray-primary) 0%, var(--color-gray-secondary) 100%);\n}\n\n.nr-dashboard-gauge-titlel {\n    padding-top: 8px;\n}\n\n.nr-dashboard-cardcontainer {\n    position: relative;\n    box-shadow: inset 0px 1px 4px 0px #000000bb;\n    border-radius: 15px;\n}\n\n\n \n.nr-dashboard-theme ui-card-panel {\n    background-color: #33333300;\n    color:var(--color-text-primary);\n    border-radius: 15px;\n    box-shadow: 0 0 8px 0px #00000080;\n}\n\n\n \nbody.nr-dashboard-theme md-content md-card {\n    background-color: #33333300;\n    color: var(--color-text-primary);\n    text-shadow: 4px 2px 4px #00000045;\n    box-shadow: 0 -1px 5px 1px #00000045;\n    border-radius: 8px;\n    border: 1px solid var(--color-widget-border);\n    padding-top: 0px;\n}\n \n\n\n\n.nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n    color: var(--color-text-primary);\n}\n\n\n\n\n.md-button {\n    display: inline-block;\n    position: relative;\n    cursor: pointer;\n    min-height: 36px;\n    min-width: 88px;\n    line-height: 36px;\n    vertical-align: middle;\n    align-items: center;\n    text-align: center;\n    border-radius: 8px;\n    box-sizing: border-box;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    outline: none;\n    border: 0;\n    padding: 0 6px;\n    margin: 6px 8px;\n    background: transparent;\n    color:var(--color-text-primary);\n    white-space: nowrap;\n    text-transform: uppercase;\n    font-weight: 500;\n    font-size: 14px;\n    font-style: inherit;\n    font-variant: inherit;\n    font-family: inherit;\n    text-decoration: none;\n    overflow: hidden;\n    transition: box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1);\n}\n\n\n\n/*\n.nr-dashboard-theme .nr-dashboard-button .md-button {\n    background-color: #88888800;\n    color:var(--color-text-primary);\n}\n*/\n\n/*\n.nr-dashboard-theme .nr-dashboard-button .md-button:hover {\n    background-color: #88888855;\n}\n*/\n\n\n/*\nmd-slider .md-thumb {\n    z-index: 1;\n    position: absolute;\n    left: -10px;\n    top: 14px;\n    width: 20px;\n    height: 20px;\n    border-radius: 20px;\n    -webkit-transform: scale(.7);\n    transform: scale(.7);\n    transition: all .4s cubic-bezier(.25,.8,.25,1);\n    box-shadow: 0 0 6px #00000070;\n}\n\n*/\n\n/*\nAdvanced stuff - dynamic change of card CSS\n\nClasses here can be used to make colored stripe at the top of card\nUsage is not in here, but they are added to md-card when needed within another template\n\n.carderr {\n    background: rgb(255,0,0);\n    background: linear-gradient(180deg, var(--color-red-primary) 0px, var(--color-red-secondary) 3px, rgba(80,80,80,1) 4px, rgba(45,45,45,1) 100%);\n}\n.cardok {\n    background: rgb(39,255,0);\n    background: linear-gradient(180deg, var(--color-green-primary) 0px, var(--color-green-secondary) 3px, rgba(70,70,70,1) 4px, rgba(40,40,40,1) 100%);\n}\n*/\n\n</style>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 200,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6bdfe8ca.9acdc8",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "\nif (msg.payload==-1) { msg.payload = \" \"; } \nelse { msg.payload = \" \" + msg.icons + \"<small> LTE</small> \"; }\n\n\nvar states = global.get(\"states\") || {};\nfor (var d in states) {\n    \n    msg.payload += '&nbsp;<span class=\"dot\" style=\"background-color: ' + states[d][\"colour\"] + ';\"></span>';  \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 300,
        "wires": [
            [
                "ca5e7262b706a5c5"
            ]
        ]
    },
    {
        "id": "f8e46140.ea35",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "e6210b42.32c588",
        "name": "Browser Template",
        "order": 0,
        "width": "12",
        "height": "7",
        "format": "<br>\n<p>To return to this screen from any opened window, drag the screen to the right.</p>\n<br>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "padd",
        "x": 910,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "1ac2bb60.571305",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "nodeId",
                "v": "node",
                "vt": "global"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "f05a78b8.3b4008"
            ]
        ]
    },
    {
        "id": "b68d58a9.a159e8",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "Browser Links",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<br>\n<p>To return to this screen from any opened window, drag the screen from left to right.</p>\n<br><br>\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshat1.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none\">Temperature Inputs</a>\n<br>\n<p>\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshatfr.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none\">Flow & Return Temperatures</a> \n&nbsp;\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshatfr2.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none&bg=hip-square.png\">Values Only</a>\n&nbsp;\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshatfr3.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none&bg=hip-square.png\">Colour</a>\n</p><br>\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshatdp.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none\">Differential Pressure & Temperatures</a>\n</p><br>\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/twinplatehiu.svg&show=local//{{hiuId}}//&update=5&network=local&idlist={{hiuId}}&zoom=none\">HIU Dashboard</a>\n</p><br>\n<a  href=\"http://localhost:3000/d/HLgkuSNVk/start?orgId=1&kiosk\">Grafana</a>",
        "output": "str",
        "x": 660,
        "y": 1100,
        "wires": [
            [
                "f8e46140.ea35",
                "c0e2230c.a95e7"
            ]
        ]
    },
    {
        "id": "f05a78b8.3b4008",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "Find HIU",
        "func": "\nmsg.hiuId=global.get(\"node\");\n\nvar n = global.get(\"localNetworkId\") ;\n    \n    for (var dev in global.get(\"readings.\"+n)) {\n        \n        var dt = global.get(\"readings.\"+n+\".\"+dev+\".system.deviceType.value\") || \"\";\n        \n        if (dt.toLowerCase().indexOf(\"hiu\")>-1) { msg.hiuId = dev;  break;}\n    }\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1100,
        "wires": [
            [
                "b68d58a9.a159e8"
            ]
        ]
    },
    {
        "id": "c0e2230c.a95e7",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1140,
        "wires": []
    },
    {
        "id": "82ce3805.6ac268",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 180,
        "wires": [
            [
                "9d2f9b63.8f9228"
            ]
        ]
    },
    {
        "id": "93890c7b.ea7f3",
        "type": "ui_ui_control",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "events": "connect",
        "x": 780,
        "y": 120,
        "wires": [
            [
                "9d2f9b63.8f9228"
            ]
        ]
    },
    {
        "id": "444f8e15b3e99d1a",
        "type": "trigger",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 350,
        "y": 340,
        "wires": [
            [
                "8e16bcc.c4a414"
            ]
        ]
    },
    {
        "id": "8885dd34240c9d6f",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-1",
        "payloadType": "num",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "444f8e15b3e99d1a"
            ]
        ]
    },
    {
        "id": "ca5e7262b706a5c5",
        "type": "mqtt out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "topic": "html/headerIcons",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 1190,
        "y": 300,
        "wires": []
    },
    {
        "id": "f745256011e0247a",
        "type": "mqtt in",
        "z": "38651eb07e123bba",
        "name": "",
        "topic": "cmd/restart5001",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 100,
        "wires": [
            [
                "ba39249e5eadbc26"
            ]
        ]
    },
    {
        "id": "8379c3e79edb861b",
        "type": "exec",
        "z": "38651eb07e123bba",
        "command": "sudo docker restart mynodered1",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 100,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ba39249e5eadbc26",
        "type": "trigger",
        "z": "38651eb07e123bba",
        "name": "",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 490,
        "y": 100,
        "wires": [
            [
                "8379c3e79edb861b"
            ]
        ]
    },
    {
        "id": "3e283cd4.ba17d4",
        "type": "comment",
        "z": "c376bc72122fb9a2",
        "name": "INTERNET CONNECTIN WATCHDOG",
        "info": "",
        "x": 230,
        "y": 160,
        "wires": []
    },
    {
        "id": "9abe6fd2.97b23",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "mode": "link",
        "links": [
            "24ebaea5.b9caa2"
        ],
        "x": 1025,
        "y": 560,
        "wires": []
    },
    {
        "id": "bb5d90aa9b8b8de4",
        "type": "inject",
        "z": "c376bc72122fb9a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 680,
        "wires": [
            [
                "a1c4cbe2b8ce9045"
            ]
        ]
    },
    {
        "id": "a1c4cbe2b8ce9045",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "internet alarms",
        "func": "var lastin = flow.get(\"lastInternet\") || 0;\n\nvar timin = new Date().getTime();\n\nvar age = (timin - lastin)/1000;\n\nmsg.topic = \"alarm/internet\";\nmsg.title = \"Internet connection\";\nif (age < 60) { msg.payload = \"ok\"; }\nelse { msg.payload = \"Warning, no internet\"; }\n\n\n// var msg2 = {};\n// msg2.topic = \"alarm/modemLTE\";\n// msg2.title = \"Modem LTE 4G connection\";\n// var online = flow.get(\"online\") || false;\n// if (msg.payload !== \"ok\") { msg2.payload = \"No modem response\";  }\n// else if (online==true) { msg2.payload = \"ok\"; }\n// else { msg2.payload = \"No LTE connection\"; }\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 680,
        "wires": [
            [
                "392d126135d185ae",
                "a23b0b16b75dd81a"
            ]
        ]
    },
    {
        "id": "392d126135d185ae",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 555,
        "y": 680,
        "wires": []
    },
    {
        "id": "3b81355f577c5ed0",
        "type": "ip",
        "z": "c376bc72122fb9a2",
        "name": "ip",
        "https": false,
        "timeout": "5000",
        "internalIPv4": true,
        "internalIPv6": false,
        "publicIPv4": true,
        "publicIPv6": false,
        "x": 330,
        "y": 80,
        "wires": [
            [
                "cdbc661df0f64861"
            ]
        ]
    },
    {
        "id": "7c78ffbdf659f35e",
        "type": "inject",
        "z": "c376bc72122fb9a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "3b81355f577c5ed0"
            ]
        ]
    },
    {
        "id": "7c19b43c9e35470c",
        "type": "ping",
        "z": "c376bc72122fb9a2",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "www.google.com",
        "timer": "60",
        "inputs": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "e8a0adf8d3662d5a"
            ]
        ]
    },
    {
        "id": "2b5da55513cf3da9",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "e8a0adf8d3662d5a",
        "type": "switch",
        "z": "c376bc72122fb9a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 320,
        "wires": [
            [
                "2b5da55513cf3da9",
                "2a7c2a3a1af9fe08",
                "62db721746cacbda"
            ],
            [
                "cbdb2531bff11977"
            ]
        ]
    },
    {
        "id": "1f143b7f9354cff9",
        "type": "trigger",
        "z": "c376bc72122fb9a2",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 780,
        "wires": [
            [
                "b7e344da84a4db3a",
                "c727a7485e9d0f98"
            ]
        ]
    },
    {
        "id": "b7e344da84a4db3a",
        "type": "delay",
        "z": "c376bc72122fb9a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1060,
        "y": 760,
        "wires": [
            [
                "5e084cb5a68b6a5a"
            ]
        ]
    },
    {
        "id": "c727a7485e9d0f98",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "rebootCountNoInternet",
        "func": "msg.topic = \"set/rebootCountNoInternet\";\nmsg.title = \"No Internet Reboot Counter\";\n\nmsg.payload = global.get(\"settings.rebootCountNoInternet.value\") || 0;\n\nmsg.payload = parseInt(msg.payload) + 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 820,
        "wires": [
            [
                "f35f2c270fa6bc6f"
            ]
        ]
    },
    {
        "id": "10ee4216045b7731",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1305,
        "y": 280,
        "wires": []
    },
    {
        "id": "5e084cb5a68b6a5a",
        "type": "exec",
        "z": "c376bc72122fb9a2",
        "command": "sudo shutdown now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1290,
        "y": 760,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2a7c2a3a1af9fe08",
        "type": "change",
        "z": "c376bc72122fb9a2",
        "name": "reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 380,
        "wires": [
            [
                "1f143b7f9354cff9",
                "cbdb2531bff11977",
                "ba45d07273865a3c",
                "0c4205ed9aee068c"
            ]
        ]
    },
    {
        "id": "cbdb2531bff11977",
        "type": "trigger",
        "z": "c376bc72122fb9a2",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 320,
        "wires": [
            [
                "ba45d07273865a3c",
                "c10c40ea6363c0f7",
                "9856e52b00f498ce"
            ]
        ]
    },
    {
        "id": "c10c40ea6363c0f7",
        "type": "exec",
        "z": "c376bc72122fb9a2",
        "command": "sudo /sbin/ifdown 'wlan0'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1120,
        "y": 400,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ba45d07273865a3c",
        "type": "delay",
        "z": "c376bc72122fb9a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 480,
        "wires": [
            [
                "784529a4899cd05a",
                "0c4205ed9aee068c"
            ]
        ]
    },
    {
        "id": "784529a4899cd05a",
        "type": "exec",
        "z": "c376bc72122fb9a2",
        "command": "sudo /sbin/ifup --force 'wlan0'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1130,
        "y": 480,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "9856e52b00f498ce",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "resetWlanCount",
        "func": "msg.topic = \"set/resetWlanCount\";\nmsg.title = \"No Internet Reset WLAN Counter\";\n\nmsg.payload = global.get(\"settings.resetWlanCount.value\") || 0;\n\nmsg.payload = parseInt(msg.payload) + 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "10ee4216045b7731",
                "723dd3dd7f64f357"
            ]
        ]
    },
    {
        "id": "3ef4452776398bf2",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "pingInternetMs",
        "func": "msg.topic = \"system/pingInternetMs\";\nmsg.title = \"Ping Internet Time\";\nmsg.units = \"ms\";\n\nflow.set(\"lastInternet\", new Date().getTime());\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 240,
        "wires": [
            [
                "1d8ef88d8c83d435",
                "a9ab84422ff80e3e"
            ]
        ]
    },
    {
        "id": "1d8ef88d8c83d435",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8",
            "d72c7804b3a94dfe"
        ],
        "x": 935,
        "y": 240,
        "wires": []
    },
    {
        "id": "723dd3dd7f64f357",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 340,
        "wires": []
    },
    {
        "id": "4b1e289eac95eb5f",
        "type": "ping",
        "z": "c376bc72122fb9a2",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "www.heatweb.co.uk",
        "timer": "60",
        "inputs": 0,
        "x": 170,
        "y": 340,
        "wires": [
            [
                "e8a0adf8d3662d5a"
            ]
        ]
    },
    {
        "id": "62db721746cacbda",
        "type": "smooth",
        "z": "c376bc72122fb9a2",
        "name": "",
        "property": "payload",
        "action": "min",
        "count": "2",
        "round": "",
        "mult": "single",
        "reduce": true,
        "x": 620,
        "y": 240,
        "wires": [
            [
                "3ef4452776398bf2"
            ]
        ]
    },
    {
        "id": "a9ab84422ff80e3e",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 200,
        "wires": []
    },
    {
        "id": "3ad66318e6ac6780",
        "type": "ping",
        "z": "c376bc72122fb9a2",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "192.168.0.1",
        "timer": "60",
        "inputs": 0,
        "x": 150,
        "y": 440,
        "wires": [
            [
                "cc90a7588d29413d",
                "ea4c0b61d13bad65"
            ]
        ]
    },
    {
        "id": "cc90a7588d29413d",
        "type": "switch",
        "z": "c376bc72122fb9a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "2a7c2a3a1af9fe08"
            ],
            []
        ]
    },
    {
        "id": "ea4c0b61d13bad65",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 500,
        "wires": []
    },
    {
        "id": "6b0ead44e170ac28",
        "type": "ping",
        "z": "c376bc72122fb9a2",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "192.168.1.1",
        "timer": "60",
        "inputs": 0,
        "x": 150,
        "y": 500,
        "wires": [
            [
                "cc90a7588d29413d",
                "ea4c0b61d13bad65"
            ]
        ]
    },
    {
        "id": "fea93495307d63f3",
        "type": "comment",
        "z": "c376bc72122fb9a2",
        "name": "Loss of internet connectivity triggers countdown to reset ",
        "info": "",
        "x": 280,
        "y": 240,
        "wires": []
    },
    {
        "id": "8d3f272a40031d15",
        "type": "comment",
        "z": "c376bc72122fb9a2",
        "name": "LAN Connectivity prevents reset",
        "info": "",
        "x": 210,
        "y": 400,
        "wires": []
    },
    {
        "id": "cdbc661df0f64861",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "",
        "func": "\n\nvar msg1 = { topic: \"system/ipLan\", payload: msg.payload.internalIPv4 || \"false\" }\n\nmsg.topic = \"system/ipWan\";\nmsg.payload = msg.payload.publicIPv4 || \"false\" ;\n\n\nreturn [msg,msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 80,
        "wires": [
            [
                "ca1358f93e7b6dc8"
            ],
            [
                "ca1358f93e7b6dc8"
            ]
        ]
    },
    {
        "id": "ca1358f93e7b6dc8",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 685,
        "y": 80,
        "wires": []
    },
    {
        "id": "0c4205ed9aee068c",
        "type": "trigger",
        "z": "c376bc72122fb9a2",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "90",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 560,
        "wires": [
            [
                "9abe6fd2.97b23",
                "d41fd4714443ef23"
            ]
        ]
    },
    {
        "id": "f35f2c270fa6bc6f",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1295,
        "y": 820,
        "wires": []
    },
    {
        "id": "d41fd4714443ef23",
        "type": "trigger",
        "z": "c376bc72122fb9a2",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 660,
        "wires": [
            [
                "1f143b7f9354cff9",
                "99bb7f82081d21dd"
            ]
        ]
    },
    {
        "id": "99bb7f82081d21dd",
        "type": "exec",
        "z": "c376bc72122fb9a2",
        "command": "sudo service networking restart",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1150,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d72c7804b3a94dfe",
        "type": "link in",
        "z": "c376bc72122fb9a2",
        "name": "link in 1",
        "links": [
            "1d8ef88d8c83d435"
        ],
        "x": 265,
        "y": 620,
        "wires": [
            [
                "a1c4cbe2b8ce9045"
            ]
        ]
    },
    {
        "id": "a23b0b16b75dd81a",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 760,
        "wires": []
    },
    {
        "id": "3ccf6b40.057534",
        "type": "ui_text",
        "z": "d26c3be6.b5ef58",
        "group": "cb203bcb.f1ec68",
        "order": 1,
        "width": "8",
        "height": "1",
        "name": "",
        "label": "LAN IP Address",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 540,
        "y": 460,
        "wires": []
    },
    {
        "id": "fbc3ab38.2e80e8",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 460,
        "wires": [
            [
                "b70b897d.314328"
            ]
        ]
    },
    {
        "id": "b70b897d.314328",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "func": "\nmsg.payload = global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".cpu.net_1_ip4.value\") ||  global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".cpu.net_2_ip4.value\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 460,
        "wires": [
            [
                "3ccf6b40.057534"
            ]
        ]
    },
    {
        "id": "5f94911c.24a54",
        "type": "ui_text",
        "z": "d26c3be6.b5ef58",
        "group": "cb203bcb.f1ec68",
        "order": 3,
        "width": "8",
        "height": "1",
        "name": "",
        "label": "Identity",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 520,
        "y": 400,
        "wires": []
    },
    {
        "id": "d5c0bd4b.23571",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 400,
        "wires": [
            [
                "bc743a6c.843208"
            ]
        ]
    },
    {
        "id": "bc743a6c.843208",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "func": "\nmsg.payload = global.get(\"networkId\") + \" / \" + global.get(\"node\") ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 400,
        "wires": [
            [
                "5f94911c.24a54"
            ]
        ]
    },
    {
        "id": "7671fe52.7dd1b",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "Rotate Screen",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 160,
        "wires": [
            [
                "60eac61d.347078"
            ]
        ]
    },
    {
        "id": "60eac61d.347078",
        "type": "file in",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "filename": "/boot/config.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 800,
        "y": 240,
        "wires": [
            [
                "abd68b9d.1e2288"
            ]
        ]
    },
    {
        "id": "209a5b3.ceb89a4",
        "type": "split",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 340,
        "wires": [
            [
                "4cbbf15a.e1f5f"
            ]
        ]
    },
    {
        "id": "4cbbf15a.e1f5f",
        "type": "switch",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "lcd_rotate=2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 400,
        "wires": [
            [
                "5a570147.818fb",
                "bda08c25.bf0b9"
            ]
        ]
    },
    {
        "id": "bda08c25.bf0b9",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 380,
        "wires": []
    },
    {
        "id": "5a570147.818fb",
        "type": "switch",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "#lcd",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 480,
        "wires": [
            [
                "92b93d30.932fe"
            ],
            [
                "1835b27a.3a211e"
            ]
        ]
    },
    {
        "id": "bf20d69a.90b028",
        "type": "trigger",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1320,
        "y": 600,
        "wires": [
            [
                "423c266c.16d6f8"
            ]
        ]
    },
    {
        "id": "c8b0429c.3a7c5",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "active": false,
        "console": false,
        "complete": "false",
        "x": 1310,
        "y": 660,
        "wires": []
    },
    {
        "id": "423c266c.16d6f8",
        "type": "exec",
        "z": "d26c3be6.b5ef58",
        "command": "bash",
        "addpay": false,
        "append": "/home/pi/lcd_rotate.sh",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1450,
        "y": 600,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "abd68b9d.1e2288",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "configtxt",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 280,
        "wires": [
            [
                "209a5b3.ceb89a4"
            ]
        ]
    },
    {
        "id": "1835b27a.3a211e",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "configtxt",
                "tot": "msg"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "lcd_rotate",
                "fromt": "str",
                "to": "#lcd_rotate",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 500,
        "wires": [
            [
                "111b3535.defdfb"
            ]
        ]
    },
    {
        "id": "92b93d30.932fe",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "configtxt",
                "tot": "msg"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "#lcd_rotate",
                "fromt": "str",
                "to": "lcd_rotate",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 460,
        "wires": [
            [
                "111b3535.defdfb"
            ]
        ]
    },
    {
        "id": "111b3535.defdfb",
        "type": "file",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "filename": "/home/pi/config.txt",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1190,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "3487cfb8.28fdf",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "System Name",
        "tooltip": "e.g. St.Trinians",
        "group": "cb203bcb.f1ec68",
        "order": 8,
        "width": "8",
        "height": "1",
        "passthru": false,
        "mode": "text",
        "delay": "5000",
        "topic": "set/name",
        "topicType": "str",
        "x": 520,
        "y": 640,
        "wires": [
            [
                "93e55623.1ae628"
            ]
        ]
    },
    {
        "id": "c346ae2f.2c43e",
        "type": "ui_template",
        "z": "d26c3be6.b5ef58",
        "d": true,
        "group": "36b47e47.04f1c2",
        "name": "Virtual Keyboard",
        "order": 5,
        "width": "3",
        "height": "1",
        "format": "<script> \n    \n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n; (function ($, window, document, undefined) {\n\n    // undefined is used here as the undefined global variable in ECMAScript 3 is\n    // mutable (ie. it can be changed by someone else). undefined isn't really being\n    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n    // can no longer be modified.\n\n    // window and document are passed through as local variable rather than global\n    // as this (slightly) quickens the resolution process and can be more efficiently\n    // minified (especially when both are regularly referenced in your plugin).\n\n    // Create the defaults once\n    var pluginName = \"jkeyboard\",\n        defaults = {\n            layout: \"english\",\n            input: $('#input'),\n            customLayouts: {\n                selectable: []\n            },\n        };\n\n\n    var function_keys = {\n        backspace: {\n            text: 'DEL',\n        },\n        return: {\n            text: 'Enter'\n        },\n        shift: {\n            text: 'Shift'\n        },\n        space: {\n            text: 'Space'\n        },\n        numeric_switch: {\n            text: '123',\n            command: function () {\n                this.createKeyboard('numeric');\n                this.events();\n            }\n        },\n        layout_switch: {\n            text: '<i class=\"fa fa-keyboard-o\" aria-hidden=\"true\"></i>',\n            command: function () {\n                var l = this.toggleLayout();\n                this.createKeyboard(l);\n                this.events();\n            }\n        },\n        character_switch: {\n            text: 'ABC',\n            command: function () {\n                this.createKeyboard(layout);\n                this.events();\n            }\n        },\n        symbol_switch: {\n            text: '#+=',\n            command: function () {\n                this.createKeyboard('symbolic');\n                this.events();\n            }\n        }\n    };\n\n\n    var layouts = {\n        selectable: ['azeri', 'english', 'russian','french', 'emoji'],\n        azeri: [\n            ['q', 'ü', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'ö', 'ğ'],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ı', 'ə'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'ç', 'ş', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        english: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        russian: [\n            ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х'],\n            ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n            ['shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        french: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        emoji: [\n            ['😀', '😁', '😂', '🤣', '😃', '😄', '😅', '😆', '😉', '😊',],\n            ['😋', '😎', '😍', '😘', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],            \n        numeric: [\n            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n            ['-', '/', ':', ';', '(', ')', '$', '&', '@', '\"'],\n            ['symbol_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n        ],\n        numbers_only: [\n            ['1', '2', '3',],\n            ['4', '5', '6',],\n            ['7', '8', '9',],\n            ['0', 'backspace'],\n        ],\n        symbolic: [\n            ['[', ']', '{', '}', '#', '%', '^', '*', '+', '='],\n            ['_', '\\\\', '|', '~', '<', '>'],\n            ['numeric_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n\n        ]\n    }\n\n    var shift = false, capslock = false, layout = 'english', layout_id = 0;\n\n    // The actual plugin constructor\n    function Plugin(element, options) {\n        this.element = element;\n        // jQuery has an extend method which merges the contents of two or\n        // more objects, storing the result in the first object. The first object\n        // is generally empty as we don't want to alter the default options for\n        // future instances of the plugin\n        this.settings = $.extend({}, defaults, options);\n        // Extend & Merge the cusom layouts\n        layouts = $.extend(true, {}, this.settings.customLayouts, layouts);\n        if (Array.isArray(this.settings.customLayouts.selectable)) {\n            $.merge(layouts.selectable, this.settings.customLayouts.selectable);\n        }\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function () {\n            layout = this.settings.layout;\n            this.createKeyboard(layout);\n            this.events();\n        },\n\n        setInput: function (newInputField) {\n            this.settings.input = newInputField;\n        },\n\n        createKeyboard: function (layout) {\n            shift = false;\n            capslock = false;\n\n            var keyboard_container = $('<ul/>').addClass('jkeyboard'),\n                me = this;\n\n            layouts[layout].forEach(function (line, index) {\n                var line_container = $('<li/>').addClass('jline');\n                line_container.append(me.createLine(line));\n                keyboard_container.append(line_container);\n            });\n\n            $(this.element).html('').append(keyboard_container);\n        },\n\n        createLine: function (line) {\n            var line_container = $('<ul/>');\n\n            line.forEach(function (key, index) {\n                var key_container = $('<li/>').addClass('jkey').data('command', key);\n\n                if (function_keys[key]) {\n                    key_container.addClass(key).html(function_keys[key].text);\n                }\n                else {\n                    key_container.addClass('letter').html(key);\n                }\n\n                line_container.append(key_container);\n            })\n\n            return line_container;\n        },\n\n        events: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift'),\n                space_key = $(this.element).find('.space'),\n                backspace_key = $(this.element).find('.backspace'),\n                return_key = $(this.element).find('.return'),\n\n                me = this,\n                fkeys = Object.keys(function_keys).map(function (k) {\n                    return '.' + k;\n                }).join(',');\n\n            letters.on('click', function () {\n                me.type((shift || capslock) ? $(this).text().toUpperCase() : $(this).text());\n            });\n\n            space_key.on('click', function () {\n                me.type(' ');\n            });\n\n            return_key.on('click', function () {\n                me.type(\"\\n\");\n                me.settings.input.parents('form').submit();\n            });\n\n            backspace_key.on('click', function () {\n                me.backspace();\n            });\n\n            shift_key.on('click', function () {\n                if (capslock) {\n                    me.toggleShiftOff();\n                    capslock = false;\n                } else {\n                    me.toggleShiftOn();\n                }\n            }).on('dblclick', function () {\n                capslock = true;\n            });\n\n\n            $(fkeys).on('click', function () {\n                var command = function_keys[$(this).data('command')].command;\n                if (!command) return;\n\n                command.call(me);\n            });\n        },\n\n        type: function (key) {\n            var input = this.settings.input,\n                val = input.val(),\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n\n            var max_length = $(input).attr(\"maxlength\");\n            if (start == end && end == val.length) {\n                if (!max_length || val.length < max_length) {\n                    input.val(val + key);\n                    input.change()\n                    $('#vkeyname').text(val + key)\n                }\n            } else {\n                if (input_node.type == \"text\"){\n                    var new_string = this.insertToString(start, end, val, key);\n                    input.val(new_string);\n                    start++;\n                    end = start;\n                    input_node.setSelectionRange(start, end);\n                }else{\n                    input.val(val + key);\n                }\n                input.change()\n                $('#vkeyname').text(val + key)\n                \n            }\n            input.trigger('focus');\n\n            if (shift && !capslock) {\n                this.toggleShiftOff();\n            }\n        },\n\n        backspace: function () {\n            var input = this.settings.input,\n                val = input.val();\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n            if (input.type == \"text\"){\n                input.val(val.slice(0, start-1) + val.slice(start))\n                input_node.setSelectionRange(start-1, start-1);\n                console.log(val)\n                $('#vkeyname').text(val)\n            }else{\n                input.val(val.slice(0,-1))\n                $('#vkeyname').text(val.slice(0,-1))\n            }\n            input.change()\n            input.focus()\n        },\n\n        toggleShiftOn: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.addClass('uppercase');\n            shift_key.addClass('active')\n            shift = true;\n        },\n\n        toggleShiftOff: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.removeClass('uppercase');\n            shift_key.removeClass('active');\n            shift = false;\n        },\n\n        toggleLayout: function () {\n            layout_id = layout_id || 0;\n            var plain_layouts = layouts.selectable;\n            layout_id++;\n\n            var current_id = layout_id % plain_layouts.length;\n            var SelectedLayoutName = plain_layouts[current_id];\n            $('#vkeyname').text('V-Keyboard ' + SelectedLayoutName )\n            return plain_layouts[current_id];\n        },\n\n        insertToString: function (start, end, string, insert_string) {\n            return string.substring(0, start) + insert_string + string.substring(end, string.length);\n        }\n    };\n\n        /*\n\t\t// A really lightweight plugin wrapper around the constructor,\n\t\t// preventing against multiple instantiations\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\n\t\t\t\t\t\t\t\t$.data( this, \"plugin_\" + pluginName, new Plugin( this, options ) );\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n        */\n        var methods = {\n            init: function(options) {\n                if (!this.data(\"plugin_\" + pluginName)) {\n                    this.data(\"plugin_\" + pluginName, new Plugin(this, options));\n                }\n            },\n\t\t\tsetInput: function(content) {\n\t\t\t\tthis.data(\"plugin_\" + pluginName).setInput($(content));\n            },\n            setLayout: function(layoutname) {\n                // change layout if it is not match current\n                object = this.data(\"plugin_\" + pluginName);\n                if (typeof(layouts[layoutname]) !== 'undefined' && object.settings.layout != layoutname) {\n                    object.settings.layout = layoutname;\n                    object.createKeyboard(layoutname);\n                    object.events();\n                };\n            },\n        };\n\n\t\t$.fn[pluginName] = function (methodOrOptions) {\n            if (methods[methodOrOptions]) {\n                return methods[methodOrOptions].apply(this.first(), Array.prototype.slice.call( arguments, 1));\n            } else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\n                // Default to \"init\"\n                return methods.init.apply(this.first(), arguments);\n            } else {\n                $.error('Method ' +  methodOrOptions + ' does not exist on jQuery.tooltip');\n            }\n        };\n\n})(jQuery, window, document);\n</script>\n<style>\n    .jkeyboard {\n  display: inline-block;\n}\n.jkeyboard, .jkeyboard .jline, .jkeyboard .jline ul {\n  display: block;\n  margin: 0;\n  padding: 0;\n}\n.jkeyboard .jline {\n  text-align: center;\n  margin-left: -14px;\n}\n.jkeyboard .jline ul li {\n  font-family: arial, sans-serif;\n  font-size: 20px;\n  display: inline-block;\n  border: 1px solid #468db3;\n  -webkit-box-shadow: 0 0 3px #468db3;\n  -webkit-box-shadow: inset 0 0 3px #468db3;\n  margin: 5px 0 1px 6px;\n  color: #000000;\n  border-radius: 5px;\n  width: 52px;\n  height: 52px;\n  box-sizing: border-box;\n  text-align: center;\n  line-height: 52px;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: -moz-none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.jkeyboard .jline ul li.uppercase {\n  text-transform: uppercase;\n}\n.jkeyboard .jline ul li:hover, .jkeyboard .jline ul li:active {\n  background-color: #185a82;\n}\n.jkeyboard .jline .return {\n  width: 80px;\n}\n.jkeyboard .jline .space {\n  width: 366px;\n}\n.jkeyboard .jline .numeric_switch {\n  width: 65px;\n}\n.jkeyboard .jline .layout_switch {\n}\n.jkeyboard .jline .shift {\n  width: 60px;\n}\n.jkeyboard .jline .backspace {\n  width: 69px;\n}\n</style>\n\n\n\n\n<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n.nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    opacity:0.99;\n    z-index: 100; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n/* Modal Content */\n.modal-content {\n    position: fixed;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 0;\n    bottom: 0%;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    border: 1px solid #888;\n    width: fit-content;\n    max-width: 100%;\n    max-height: 100%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: animate;\n    -webkit-animation-duration: 0.4s;\n    animation-name: animate;\n    animation-duration: 0.4s\n}\n\n/* Add Animation */\n@-webkit-keyframes animate {\n    from {bottom:100%; opacity:0} \n    to {bottom:0%; opacity:1}\n}\n\n@keyframes animate {\n    from {bottom:100%; opacity:0}\n    to {bottom:0%; opacity:1}\n}\n\n/* The Close Button */\n.close {\n    color: black;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-header {\n    padding: 2px 16px;\n    background-color: aliceblue;\n    color: white;\n}\n\n.modal-body {padding: 2px 16px;}\n\n.modal-footer {\n    padding: 2px 16px;\n    background-color: #5cb85c;\n    color: white;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"myModal\" class=\"modal\">\n\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n      <div class=\"modal-header\">\n      <span class=\"close\" onclick=\"closeModal()\">&times;</span>\n      <h2 id=\"vkeyname\" style=\"background-color: aliceblue !important; color: black !important; text-align: center; min-height: 30px;\">V-Keyboard</h2>\n    </div>\n    <div class=\"modal-body\">\n        <div id=\"keyboard\"></div>\n        <div>\n        </div>\n    </div>\n  </div>\n</div>\n\n\n<script>\n    // Get the modal\nvar modal = document.getElementById('myModal');\n\n/*\n$('input[type=text]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"english\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n\n$('input[type=number]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"numbers_only\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n*/\n\nvar inputTags;\nvar inputType;\n\nvar getinputs = function() {\n    inputTags = document.getElementsByTagName(\"input\");\n    console.log(inputTags)\n    for (var i = 0; i < inputTags.length; i++) {\n        inputTags[i].addEventListener('click', openModal, false)\n    }\n}\n\nsetTimeout(function(){ getinputs(); }, 1000);\n\nvar inputTarget;\n\nvar openModal = function() {\n    inputType = event.target.type\n    inputTarget = event.target\n    var layoutName;\n    if (inputType == \"number\"){\n        //inputTarget.type = \"number\" //hack because chrome doesn't allow setselection in number inputs\n        //inputTarget.value = \"\"\n        layoutName = \"numbers_only\"\n    }else{\n        layoutName = \"english\"\n    }\n    $('#vkeyname').text(event.target.value)\n    $('#keyboard').unbind().removeData();\n    modal.style.display = \"block\";\n    $('#keyboard').jkeyboard({\n        layout: layoutName,\n        input: $('#'+$(this).attr('id'))\n    });\n}\n\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\n//span.onclick = function(event) {\n  //closeModal()\n//}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    var source = event.target;\n    if (source == modal || source == span) {\n        closeModal(source)\n    }\n};\n\nvar closeModal = function(source){\n    //console.log(\"closing\")\n    modal.style.display = \"none\";\n   \n    if (inputType == \"number\"){\n        inputTarget.type = \"number\" //hack because chrome doesn't allow selectionstart on number inputs\n    }\n}\n\n</script>\n<script>\n\nvar clickState = 1;\nvar btn = document.querySelector('.VK');\n\nbtn.addEventListener('click', function(){\n\n  if (clickState == 0) {\n    this.textContent = 'V-KeyBoard On';\n    modal = document.getElementById('myModal');\n    clickState = 1;\n  } else {\n    this.textContent = 'V-KeyBoard Off';\n    modal = document.getElementById('empty');\n    clickState = 0;\n  }\n\n});\n</script>\n\n<style>\n.VK{\n    position: fixed;\n    top: 60px;\n    right: 20px;\n    height: 30px;\n}\n</style>\n\n<div id=\"empty\"></div>\n<button class=\"VK\" style=\"display:none\">V-KeyBoard On</button> ",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 520,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "efc92398.82dbf",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "Email Address",
        "tooltip": "",
        "group": "cb203bcb.f1ec68",
        "order": 9,
        "width": "8",
        "height": "1",
        "passthru": false,
        "mode": "email",
        "delay": "5000",
        "topic": "set/email",
        "topicType": "str",
        "x": 520,
        "y": 680,
        "wires": [
            [
                "bbcdf11f.f906a"
            ]
        ]
    },
    {
        "id": "47a69ad7.0a5b94",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "Alarm Temperature",
        "tooltip": "",
        "group": "cb203bcb.f1ec68",
        "order": 10,
        "width": "8",
        "height": "1",
        "passthru": false,
        "mode": "number",
        "delay": "5000",
        "topic": "set/tAlarm",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 530,
        "y": 720,
        "wires": [
            [
                "cd030cb5.b6dcf"
            ]
        ]
    },
    {
        "id": "bf47904.d275a7",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "ee777bb4.05aa88",
                "f8a0f6f2.95b158",
                "343dbd59.0f0e52"
            ]
        ]
    },
    {
        "id": "ee777bb4.05aa88",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "tAlarm",
        "func": "msg.payload = parseFloat(global.get(\"settings.tAlarm.value\") || 55);\nmsg.topic = \"set/tAlarm\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 720,
        "wires": [
            [
                "47a69ad7.0a5b94",
                "bc8363a8.8fcbe"
            ]
        ]
    },
    {
        "id": "cd030cb5.b6dcf",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set/tAlarm",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "units",
                "pt": "msg",
                "to": "°C",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "Alarm temperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 720,
        "wires": [
            [
                "e44a91c9.939dc",
                "10386a58.ef2e16"
            ]
        ]
    },
    {
        "id": "bbcdf11f.f906a",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set/email",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "Email address for alarms",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 680,
        "wires": [
            [
                "e44a91c9.939dc",
                "10386a58.ef2e16",
                "3ca1cdfc.ddcb12"
            ]
        ]
    },
    {
        "id": "93e55623.1ae628",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set/title",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "System name",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 640,
        "wires": [
            [
                "e44a91c9.939dc",
                "10386a58.ef2e16"
            ]
        ]
    },
    {
        "id": "e44a91c9.939dc",
        "type": "link out",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1035,
        "y": 640,
        "wires": []
    },
    {
        "id": "f8a0f6f2.95b158",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "name",
        "func": "msg.payload = global.get(\"settings.title.value\") || global.get(\"iotnode\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "3487cfb8.28fdf"
            ]
        ]
    },
    {
        "id": "343dbd59.0f0e52",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "email",
        "func": "msg.payload = global.get(\"settings.email.value\") || \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 680,
        "wires": [
            [
                "efc92398.82dbf"
            ]
        ]
    },
    {
        "id": "cfa092d4.4a897",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "post changes",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "cmd/request",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "local/+/+/settings/#",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 720,
        "wires": [
            [
                "e44a91c9.939dc"
            ]
        ]
    },
    {
        "id": "10386a58.ef2e16",
        "type": "trigger",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 990,
        "y": 760,
        "wires": [
            [
                "cfa092d4.4a897"
            ]
        ]
    },
    {
        "id": "ea82bc01.ed0f6",
        "type": "ui_ui_control",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "events": "all",
        "x": 360,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "6aac662b.dcf9e8",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"tabs\":{\"hide\":\"Setup\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 860,
        "wires": [
            [
                "ea82bc01.ed0f6"
            ]
        ]
    },
    {
        "id": "f8a1c186.e772c",
        "type": "ui_template",
        "z": "d26c3be6.b5ef58",
        "group": "db644eb4.b9d0a",
        "name": "css etc",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<style>\n\n   .md-button {\n        text-transform: none;\n    }\n    .myB {\n        box-shadow: 2px 2px 2px grey;\n        padding: 1px 8px 0px 8px;\n        width: 100%;\n    }\n    .tdLS {\n        padding: 0px 8px 0px 0px;\n    }\n  .filled { \n      height: 100% !important;\n\n      padding: 0 !important;\n      margin: 0 !important;\n  }\n  .nr-dashboard-template {\n      padding: 0;\n      margin: 0;\n  }\n  \n  .rounded {\n  border-radius: 6px 6px 6px 6px;\n}\n \n   .bigfont {\n  font-size: 18px;\n}\n\n   .smallfont {\n  font-size: 12px;\n}\n.smB { \n    width: 100px;\n    display: inline-block;\n}\n.thinB { \n    height: 20px;\n    0px 0px 0px 0px;\n}\n.maxsiz {\n\n    width: 100%; \n    height: 100%;\n\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "x": 290,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "2c37422a.c4432e",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"tabs\":{\"show\":\"Setup\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 900,
        "wires": [
            [
                "ea82bc01.ed0f6"
            ]
        ]
    },
    {
        "id": "3ca1cdfc.ddcb12",
        "type": "trigger",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 990,
        "y": 840,
        "wires": [
            [
                "334db306.ec4e5c"
            ]
        ]
    },
    {
        "id": "334db306.ec4e5c",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "attach",
        "func": "msg.to = msg.payload;\n\nmsg.payload=\"Update from \"+global.get(\"node\");\nmsg.topic=\"Change of email on \"+global.get(\"node\");\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 900,
        "wires": [
            [
                "162d2a4d.5abdb6"
            ]
        ]
    },
    {
        "id": "162d2a4d.5abdb6",
        "type": "link out",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "links": [
            "4bf50365.a06d4c",
            "a1744584.91173"
        ],
        "x": 1175,
        "y": 900,
        "wires": []
    },
    {
        "id": "2d0e49f7.e5dea6",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "NETWORK",
        "payloadType": "env",
        "x": 760,
        "y": 60,
        "wires": [
            [
                "7764bb64.c73e14"
            ]
        ],
        "info": "https://discourse.nodered.org/t/using-environment-variable-as-password-for-mqtt-in-node/26318\nhttps://pimylifeup.com/environment-variables-linux/"
    },
    {
        "id": "7764bb64.c73e14",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 60,
        "wires": []
    },
    {
        "id": "16bba053.442da",
        "type": "ui_text",
        "z": "d26c3be6.b5ef58",
        "group": "cb203bcb.f1ec68",
        "order": 2,
        "width": "8",
        "height": "1",
        "name": "",
        "label": "WAN IP Address",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 540,
        "y": 500,
        "wires": []
    },
    {
        "id": "c01b8f85.fe258",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 500,
        "wires": [
            [
                "98ca4c9d.3b46"
            ]
        ]
    },
    {
        "id": "98ca4c9d.3b46",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "func": "\nmsg.payload = global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".system.ipWan.value\") || \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 500,
        "wires": [
            [
                "16bba053.442da"
            ]
        ]
    },
    {
        "id": "bc8363a8.8fcbe",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 780,
        "wires": []
    },
    {
        "id": "4c0c2dc2.b27d04",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "apee4ooF",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "apee4ooF",
        "payloadType": "str",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "a21187af.21a728"
            ]
        ]
    },
    {
        "id": "a21187af.21a728",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "Nodeware",
        "func": "global.set(\"Nodeware\", \"tihat_v01.08.22\") ; \n\nmsg.payload = global.get(\"Nodeware\") ; \nmsg.topic = \"system/Nodeware\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 160,
        "wires": [
            [
                "ae865c20.2fec3"
            ]
        ]
    },
    {
        "id": "2f4faaf.de84556",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "BACKUP SOFTWARE",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "a21187af.21a728",
                "188d04eb.5e61ab"
            ]
        ]
    },
    {
        "id": "188d04eb.5e61ab",
        "type": "trigger",
        "z": "caf59ec6.61c85",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "outputs": 1,
        "x": 500,
        "y": 100,
        "wires": [
            [
                "5d1caef7.6d7ca"
            ]
        ]
    },
    {
        "id": "5d1caef7.6d7ca",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "attach",
        "func": "msg.payload=\"Software Backup attached from \"+global.get(\"node\");\nmsg.topic=\"Node-RED Software Backup from \"+global.get(\"node\");\nvar nw = \"flows_ihiu_\" + global.get(\"Nodeware\") || \"\";\nmsg.attachments = [{   // utf-8 string as an attachment \n            filename:  nw + '.json',\n            path: '/home/pi/.node-red/flows_ihiu.json'\n        },\n        {   // utf-8 string as an attachment \n            filename: nw + '_cred.json',\n            path: '/home/pi/.node-red/flows_ihiu_cred.json'\n        },\n        {   // utf-8 string as an attachment \n            filename: 'settings.js',\n            path: '/home/pi/.node-red/settings.js'\n        }];\n\nmsg.to=\"setup@heatweb.com, nodered@heatweb.com\";\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 100,
        "wires": [
            [
                "9c5f6a01.7abfd8"
            ]
        ]
    },
    {
        "id": "9c5f6a01.7abfd8",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "4bf50365.a06d4c",
            "a1744584.91173"
        ],
        "x": 795,
        "y": 100,
        "wires": []
    },
    {
        "id": "2eb67577.c3d0f2",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "pwgen -B -1",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 400,
        "wires": [
            [
                "60f2a12c.9ad8d",
                "c21e8eff.725fa"
            ],
            [],
            []
        ]
    },
    {
        "id": "2d9e199.d1e7066",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "Refresh Random",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "afe11f5a.15ac2"
            ]
        ]
    },
    {
        "id": "60f2a12c.9ad8d",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 360,
        "wires": []
    },
    {
        "id": "c21e8eff.725fa",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "newnode",
        "func": "msg.payload = msg.payload.trim();\n\nflow.set(\"newnode\", msg.payload);\nflow.set(\"newnetwork\", msg.payload + \"-\" + msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a1744584.91173",
        "type": "link in",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "9c5f6a01.7abfd8",
            "162d2a4d.5abdb6",
            "8e2f7245.7dc94",
            "330292c9.7440ae",
            "ce07b36ff1b6b4ca"
        ],
        "x": 385,
        "y": 260,
        "wires": [
            [
                "f933bdc8a3b48903"
            ]
        ]
    },
    {
        "id": "65658ff.e75c27",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1300,
        "y": 180,
        "wires": [
            [
                "6f4f1505.582314"
            ]
        ]
    },
    {
        "id": "6f4f1505.582314",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1490,
        "y": 180,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "aa3585f1.9ded8",
        "type": "file in",
        "z": "caf59ec6.61c85",
        "name": "",
        "filename": "/etc/hostname",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 600,
        "y": 460,
        "wires": [
            [
                "f92c39c.55b0848"
            ]
        ]
    },
    {
        "id": "f92c39c.55b0848",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "hostname",
        "func": "flow.set(\"hostname\",msg.payload.trim());\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "38cc9c30.d04654",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo shutdown now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1520,
        "y": 260,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "bdad4049.b8d448",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1300,
        "y": 280,
        "wires": [
            [
                "38cc9c30.d04654"
            ]
        ]
    },
    {
        "id": "e97fbed5.80f718",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo node-red-restart",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1520,
        "y": 340,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "5fcf0e85.427da8",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1300,
        "y": 340,
        "wires": [
            [
                "e97fbed5.80f718"
            ]
        ]
    },
    {
        "id": "ae865c20.2fec3",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 555,
        "y": 160,
        "wires": []
    },
    {
        "id": "5d64f9af.79a558",
        "type": "comment",
        "z": "caf59ec6.61c85",
        "name": "",
        "info": "https://itnext.io/raspberry-pi-read-only-kiosk-mode-the-complete-tutorial-for-2021-58a860474215",
        "x": 1680,
        "y": 40,
        "wires": []
    },
    {
        "id": "6b9176cd.8d5378",
        "type": "template",
        "z": "caf59ec6.61c85",
        "name": "rofs",
        "field": "payload",
        "fieldType": "msg",
        "format": "text",
        "syntax": "mustache",
        "template": "#!/bin/sh\n\n#  Read-only Root-FS for Raspian using overlayfs\n#  Version 1.1:\n#  Changed to use /proc/mounts rathern than /etc/fstab for deriving the root filesystem.\n#\n#  Version 1:\n#  Created 2017 by Pascal Suter @ DALCO AG, Switzerland to work on Raspian as custom init script\n#  (raspbian does not use an initramfs on boot)\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see\n#    <http://www.gnu.org/licenses/>.\n#\n#\n#  Tested with Raspbian mini, 2017-01-11\n#\n#  This script will mount the root filesystem read-only and overlay it with a temporary tempfs \n#  which is read-write mounted. This is done using the overlayFS which is part of the linux kernel \n#  since version 3.18. \n#  when this script is in use, all changes made to anywhere in the root filesystem mount will be lost \n#  upon reboot of the system. The SD card will only be accessed as read-only drive, which significantly\n#  helps to prolong its life and prevent filesystem coruption in environments where the system is usually\n#  not shut down properly \n#\n#  Install: \n#  copy this script to /sbin/overlayRoot.sh and add \"init=/sbin/overlayRoot.sh\" to the cmdline.txt \n#  file in the raspbian image's boot partition. \n#  I strongly recommend to disable swapping before using this. it will work with swap but that just does \n#  not make sens as the swap file will be stored in the tempfs which again resides in the ram.\n#  run these commands on the booted raspberry pi BEFORE you set the init=/sbin/overlayRoot.sh boot option:\n#  sudo dphys-swapfile swapoff\n#  sudo dphys-swapfile uninstall\n#  sudo update-rc.d dphys-swapfile remove\n#\n#  To install software, run upgrades and do other changes to the raspberry setup, simply remove the init= \n#  entry from the cmdline.txt file and reboot, make the changes, add the init= entry and reboot once more. \n \nfail(){\n\techo -e \"$1\"\n\t/bin/bash\n}\n \n# load module\nmodprobe overlay\nif [ $? -ne 0 ]; then\n    fail \"ERROR: missing overlay kernel module\"\nfi\n# mount /proc\nmount -t proc proc /proc\n\n# create a writable fs to then create our mountpoints \nmount -t tmpfs inittemp /mnt\nif [ $? -ne 0 ]; then\n    fail \"ERROR: could not create a temporary filesystem to mount the base filesystems for overlayfs\"\nfi\nmkdir /mnt/lower\nmkdir /mnt/rw\nmount -t tmpfs root-rw /mnt/rw\nif [ $? -ne 0 ]; then\n    fail \"ERROR: could not create tempfs for upper filesystem\"\nfi\nmkdir /mnt/rw/upper\nmkdir /mnt/rw/work\nmkdir /mnt/newroot\n\n# mount root filesystem readonly \nrootDev=`awk '$2 == \"/\" {print $1}' /proc/mounts`\nrootMountOpt=`awk '$2 == \"/\" {print $4}' /proc/mounts`\nrootFsType=`awk '$2 == \"/\" {print $3}' /proc/mounts`\nmount -t ${rootFsType} -o ${rootMountOpt},ro ${rootDev} /mnt/lower\nif [ $? -ne 0 ]; then\n    fail \"ERROR: could not ro-mount original root partition\"\nfi\nmount -t overlay -o lowerdir=/mnt/lower,upperdir=/mnt/rw/upper,workdir=/mnt/rw/work overlayfs-root /mnt/newroot\nif [ $? -ne 0 ]; then\n    fail \"ERROR: could not mount overlayFS\"\nfi\n# create mountpoints inside the new root filesystem-overlay\nmkdir /mnt/newroot/ro\nmkdir /mnt/newroot/rw\n# remove root mount from fstab (this is already a non-permanent modification)\ngrep -v \"$rootDev\" /mnt/lower/etc/fstab > /mnt/newroot/etc/fstab\necho \"#the original root mount has been removed by overlayRoot.sh\" >> /mnt/newroot/etc/fstab\necho \"#this is only a temporary modification, the original fstab\" >> /mnt/newroot/etc/fstab\necho \"#stored on the disk can be found in /ro/etc/fstab\" >> /mnt/newroot/etc/fstab\n# change to the new overlay root\ncd /mnt/newroot\npivot_root . mnt\nexec chroot . sh -c \"$(cat <<END\n# move ro and rw mounts to the new root\nmount --move /mnt/mnt/lower/ /ro\nif [ $? -ne 0 ]; then\n    echo \"ERROR: could not move ro-root into newroot\"\n    /bin/bash\nfi\nmount --move /mnt/mnt/rw /rw\nif [ $? -ne 0 ]; then\n    echo \"ERROR: could not move tempfs rw mount into newroot\"\n    /bin/bash\nfi\n# unmount unneeded mounts so we can unmout the old readonly root\numount /mnt/mnt\numount /mnt/proc\numount -l -f /mnt/dev\numount -l -f /mnt\n# continue with regular init\nexec /sbin/init\nEND\n)\"\n",
        "output": "str",
        "x": 1690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "afe11f5a.15ac2",
        "type": "change",
        "z": "caf59ec6.61c85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 440,
        "wires": [
            [
                "2eb67577.c3d0f2",
                "aa3585f1.9ded8"
            ]
        ]
    },
    {
        "id": "54864e96.ab682",
        "type": "link in",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "9bd2209.563a4e"
        ],
        "x": 255,
        "y": 480,
        "wires": [
            [
                "afe11f5a.15ac2"
            ]
        ]
    },
    {
        "id": "e0e0515a.86385",
        "type": "ui_button",
        "z": "caf59ec6.61c85",
        "name": "",
        "group": "36b47e47.04f1c2",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Shutdown",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Shutdown now",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 960,
        "y": 240,
        "wires": [
            [
                "6803aeb1.a8f08"
            ]
        ]
    },
    {
        "id": "6803aeb1.a8f08",
        "type": "ui_toast",
        "z": "caf59ec6.61c85",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1130,
        "y": 240,
        "wires": [
            [
                "3b18b185.0cc4fe"
            ]
        ]
    },
    {
        "id": "3b18b185.0cc4fe",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 240,
        "wires": [
            [
                "38cc9c30.d04654"
            ],
            []
        ]
    },
    {
        "id": "aae309cc.38b1f8",
        "type": "ui_button",
        "z": "caf59ec6.61c85",
        "name": "",
        "group": "36b47e47.04f1c2",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Reboot now",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 960,
        "y": 140,
        "wires": [
            [
                "bad6cbe2.1ffd48"
            ]
        ]
    },
    {
        "id": "bad6cbe2.1ffd48",
        "type": "ui_toast",
        "z": "caf59ec6.61c85",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "2b8db478.456f1c"
            ]
        ]
    },
    {
        "id": "2b8db478.456f1c",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 140,
        "wires": [
            [
                "6f4f1505.582314"
            ],
            []
        ]
    },
    {
        "id": "8bd72823.48ffa8",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "906024b7.9e3e48",
            "96558a40.5d4f48"
        ],
        "x": 1095,
        "y": 300,
        "wires": []
    },
    {
        "id": "dd75b998.3e21f8",
        "type": "ui_button",
        "z": "caf59ec6.61c85",
        "name": "",
        "group": "36b47e47.04f1c2",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Screen Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "cmd:screenoff",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 970,
        "y": 300,
        "wires": [
            [
                "8bd72823.48ffa8"
            ]
        ]
    },
    {
        "id": "f3e7f125f704571f",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo service --status-all",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 370,
        "y": 720,
        "wires": [
            [
                "8bf751a05ae972a3"
            ],
            [
                "8bf751a05ae972a3"
            ],
            []
        ]
    },
    {
        "id": "e0df63888c7c8d67",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "f3e7f125f704571f"
            ]
        ]
    },
    {
        "id": "8bf751a05ae972a3",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 720,
        "wires": []
    },
    {
        "id": "fae86fdae8a260b0",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payloadType": "date",
        "x": 370,
        "y": 840,
        "wires": [
            [
                "ba70b18364f6cb97"
            ]
        ]
    },
    {
        "id": "ba70b18364f6cb97",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "newnode",
        "property": "node",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "newnode",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 840,
        "wires": [
            [
                "b71148848e2bf0c4",
                "eabe8d1364d5d4d6"
            ],
            [
                "5ebfc67f51971a9b"
            ]
        ]
    },
    {
        "id": "b71148848e2bf0c4",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "NAMES",
        "func": "\n//msg.newnode = global.get(\"node\").toLowerCase();\nmsg.newnode = \"zcc\" + flow.get(\"newnode\").toLowerCase();\nmsg.newnetwork = flow.get(\"newnode\").toLowerCase();\nmsg.newgroup = \"new\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 600,
        "wires": [
            [
                "0c8e4f9ba98b5549",
                "17de64753eebbe39"
            ]
        ]
    },
    {
        "id": "eabe8d1364d5d4d6",
        "type": "change",
        "z": "caf59ec6.61c85",
        "name": "Renaming Host...",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Renaming Host...",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 760,
        "wires": [
            [
                "cc301e4ec404ed45"
            ]
        ]
    },
    {
        "id": "5ebfc67f51971a9b",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "ls /etc/connect/service/",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 860,
        "y": 900,
        "wires": [
            [
                "61cd65e615237acd",
                "3d59f4f15bee38f8"
            ],
            [],
            []
        ]
    },
    {
        "id": "0c8e4f9ba98b5549",
        "type": "delay",
        "z": "caf59ec6.61c85",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 600,
        "wires": [
            [
                "ee3de00d68af001d"
            ]
        ]
    },
    {
        "id": "17de64753eebbe39",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo rm /etc/connect/service/settings.json",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1160,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "61cd65e615237acd",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "settings.json",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 900,
        "wires": [
            [],
            [
                "8db53daeb38d71c9"
            ]
        ]
    },
    {
        "id": "3d59f4f15bee38f8",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 860,
        "wires": []
    },
    {
        "id": "ee3de00d68af001d",
        "type": "template",
        "z": "caf59ec6.61c85",
        "name": "newnode",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\nn=\"{{newnetwork}}\"\nb=\"{{newnode}}\"\n\nc=\"/g\"\n\nh=\"newnetwork\"\na=\"s/$h/\"\nSED_ARG=\"$a$n$c\"\necho $SED_ARG\nsudo sed -i -e $SED_ARG /boot/heatweb/config.json\n\nh=\"newnode\"\na=\"s/$h/\"\nSED_ARG=\"$a$b$c\"\necho $SED_ARG\nsudo sed -i -e $SED_ARG /boot/heatweb/config.json\n\nh=$(cat /etc/hostname)\na=\"s/$h/\"\nSED_ARG=\"$a$b$c\"\necho $SED_ARG\nsudo sed -i -e $SED_ARG /etc/hostname\nsudo sed -i -e $SED_ARG /etc/hosts\n\n\n",
        "output": "str",
        "x": 1240,
        "y": 600,
        "wires": [
            [
                "b22cdb936fef512f"
            ]
        ]
    },
    {
        "id": "8db53daeb38d71c9",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "NAMES",
        "func": "\nmsg.newnode = global.get(\"node\");\nmsg.newgroup = \"new\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 900,
        "wires": [
            [
                "ce5847766f4b0346"
            ]
        ]
    },
    {
        "id": "b22cdb936fef512f",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1370,
        "y": 600,
        "wires": [
            [
                "10009c749c3e694f",
                "adacce0945ee4d08",
                "09188e09a11c4047",
                "f74be062730bbc2b"
            ]
        ]
    },
    {
        "id": "ce5847766f4b0346",
        "type": "delay",
        "z": "caf59ec6.61c85",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1460,
        "y": 900,
        "wires": [
            [
                "3821ed536c0d82b2"
            ]
        ]
    },
    {
        "id": "10009c749c3e694f",
        "type": "file",
        "z": "caf59ec6.61c85",
        "name": "",
        "filename": "/home/pi/node-hiu-newname.sh",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1630,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "adacce0945ee4d08",
        "type": "trigger",
        "z": "caf59ec6.61c85",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1550,
        "y": 680,
        "wires": [
            [
                "ac51970a6b1b32e9"
            ]
        ]
    },
    {
        "id": "09188e09a11c4047",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": false,
        "console": false,
        "complete": "false",
        "x": 1630,
        "y": 520,
        "wires": []
    },
    {
        "id": "f74be062730bbc2b",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "attach",
        "func": "\nvar ip = global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".cpu.net_1_ip4.value\") ||  global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".cpu.net_2_ip4.value\")\n\nmsg.payload=\"New Node \"+msg.newnode + \" on \" + ip;\nmsg.topic=\"New Node \"+msg.newnode + \" on \" + ip;\n\n\nmsg.to=\"setup@heatweb.com\";\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 560,
        "wires": [
            [
                "ce07b36ff1b6b4ca"
            ]
        ]
    },
    {
        "id": "3821ed536c0d82b2",
        "type": "template",
        "z": "caf59ec6.61c85",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "sudo wget -O - \"https://connect.jfrog.io/v2/install_connect\" | sudo sh -s HKFpL8CSxjiG8HPrcpwBY5cUpukezbRg9A heatwebremote -n={{newnode}} -g={{newgroup}}\n",
        "output": "str",
        "x": 1620,
        "y": 900,
        "wires": [
            [
                "ea6c7419d9a5790b"
            ]
        ]
    },
    {
        "id": "ac51970a6b1b32e9",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "bash",
        "addpay": false,
        "append": "/home/pi/node-hiu-newname.sh",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1680,
        "y": 680,
        "wires": [
            [
                "2410b06e6b368222",
                "4dfe5619f04e9913",
                "ebfec58fefedf84c"
            ],
            [],
            [
                "2410b06e6b368222"
            ]
        ]
    },
    {
        "id": "ce07b36ff1b6b4ca",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "4bf50365.a06d4c",
            "a1744584.91173"
        ],
        "x": 1725,
        "y": 560,
        "wires": []
    },
    {
        "id": "ea6c7419d9a5790b",
        "type": "subflow:a8d56bd2.c3c6f",
        "z": "caf59ec6.61c85",
        "name": "",
        "x": 1760,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "2410b06e6b368222",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1910,
        "y": 760,
        "wires": []
    },
    {
        "id": "4dfe5619f04e9913",
        "type": "trigger",
        "z": "caf59ec6.61c85",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "30",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1900,
        "y": 680,
        "wires": [
            [
                "f2ca3839a6320ce7",
                "09bb118a25975493"
            ]
        ]
    },
    {
        "id": "ebfec58fefedf84c",
        "type": "change",
        "z": "caf59ec6.61c85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Rebooting...",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1910,
        "y": 580,
        "wires": [
            [
                "2b0fd762d5e46184"
            ]
        ]
    },
    {
        "id": "8d44588036dcb5d3",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 900,
        "wires": []
    },
    {
        "id": "f2ca3839a6320ce7",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "d": true,
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 2140,
        "y": 680,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "09bb118a25975493",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo shutdown now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 2130,
        "y": 740,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2b0fd762d5e46184",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "3de9243a.1e77fc",
            "560266b59151de97",
            "96b46834c6db95b2"
        ],
        "x": 2035,
        "y": 580,
        "wires": []
    },
    {
        "id": "f933bdc8a3b48903",
        "type": "e-mail",
        "z": "caf59ec6.61c85",
        "server": "auth.smtp.1and1.co.uk",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 550,
        "y": 260,
        "wires": []
    },
    {
        "id": "4bccab605582143f",
        "type": "mqtt out",
        "z": "caf59ec6.61c85",
        "name": "",
        "topic": "cmd/displayMessage",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 2000,
        "y": 460,
        "wires": []
    },
    {
        "id": "96b46834c6db95b2",
        "type": "link in",
        "z": "caf59ec6.61c85",
        "name": "link in 3",
        "links": [
            "2b0fd762d5e46184",
            "cc301e4ec404ed45"
        ],
        "x": 1835,
        "y": 460,
        "wires": [
            [
                "4bccab605582143f",
                "26a2d63b51d6b083"
            ]
        ]
    },
    {
        "id": "cc301e4ec404ed45",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "3de9243a.1e77fc",
            "560266b59151de97",
            "96b46834c6db95b2"
        ],
        "x": 1315,
        "y": 760,
        "wires": []
    },
    {
        "id": "26a2d63b51d6b083",
        "type": "ui_toast",
        "z": "caf59ec6.61c85",
        "position": "top right",
        "displayTime": "20",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1990,
        "y": 400,
        "wires": []
    },
    {
        "id": "6129542c.75c96c",
        "type": "function",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "func": "\n\nmsg.topic = msg.topic.split(\"/\")[4] ;\n\nvar gauges = global.get(\"settings.gauges.value\");\n\nif (gauges[0].title) { msg.topic = gauges[0].title; }\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "16545db5.a1289a",
                "61cbc5f5.22dbbc"
            ]
        ]
    },
    {
        "id": "3eefcd4f.bd3522",
        "type": "function",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "func": "\nmsg.topic = msg.topic.split(\"/\")[4];\n\nvar gauges = global.get(\"settings.gauges.value\");\n\nif (gauges[1].title) { msg.topic = gauges[1].title; }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 800,
        "wires": [
            [
                "ffc6c523.b47708",
                "61cbc5f5.22dbbc"
            ]
        ]
    },
    {
        "id": "16545db5.a1289a",
        "type": "ui_gauge",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "group": "7aaf3d97.4092e4",
        "order": 1,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#0080ff",
            "#00ff00",
            "#ca3838"
        ],
        "seg1": "65",
        "seg2": "83",
        "className": "",
        "x": 990,
        "y": 720,
        "wires": []
    },
    {
        "id": "ffc6c523.b47708",
        "type": "ui_gauge",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "group": "7aaf3d97.4092e4",
        "order": 3,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#0080ff",
            "#00ff00",
            "#ca3838"
        ],
        "seg1": "45",
        "seg2": "65",
        "className": "",
        "x": 990,
        "y": 800,
        "wires": []
    },
    {
        "id": "61cbc5f5.22dbbc",
        "type": "ui_chart",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "group": "b41f6501.8d6cb8",
        "order": 2,
        "width": "8",
        "height": "5",
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#fb5050",
            "#568cd2",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 990,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c24f70d0.17a83",
        "type": "ui_template",
        "z": "9a9fe8141212d6cf",
        "group": "b7224d05.8b248",
        "name": "Heatweb",
        "order": 2,
        "width": "8",
        "height": "2",
        "format": "<p align=\"center \" style=\"padding-top: 10px\">\n    <b><big>HEATWEB</big></b>\n</p>\n",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ef81efb5.e9264",
        "type": "inject",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "15",
        "topic": "",
        "payload": "nodeDescription",
        "payloadType": "global",
        "x": 600,
        "y": 180,
        "wires": [
            [
                "2c0af4c069cbdcab"
            ]
        ]
    },
    {
        "id": "35167232.7ce0ae",
        "type": "template",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{payload}}}",
        "output": "str",
        "x": 1020,
        "y": 40,
        "wires": [
            [
                "c24f70d0.17a83"
            ]
        ]
    },
    {
        "id": "6cce1b9.af560e4",
        "type": "link in",
        "z": "9a9fe8141212d6cf",
        "name": "screenmessage",
        "links": [
            "51e62b0a.b42434",
            "12978bf48632b4a5"
        ],
        "x": 915,
        "y": 40,
        "wires": [
            [
                "35167232.7ce0ae"
            ]
        ]
    },
    {
        "id": "51e62b0a.b42434",
        "type": "link out",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "links": [
            "6cce1b9.af560e4"
        ],
        "x": 1155,
        "y": 180,
        "wires": []
    },
    {
        "id": "5e26c129.76b25",
        "type": "ui_template",
        "z": "9a9fe8141212d6cf",
        "d": true,
        "group": "84ad1d4c.e0002",
        "name": "Virtual Keyboard",
        "order": 3,
        "width": "1",
        "height": "1",
        "format": "<script> \n    \n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n; (function ($, window, document, undefined) {\n\n    // undefined is used here as the undefined global variable in ECMAScript 3 is\n    // mutable (ie. it can be changed by someone else). undefined isn't really being\n    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n    // can no longer be modified.\n\n    // window and document are passed through as local variable rather than global\n    // as this (slightly) quickens the resolution process and can be more efficiently\n    // minified (especially when both are regularly referenced in your plugin).\n\n    // Create the defaults once\n    var pluginName = \"jkeyboard\",\n        defaults = {\n            layout: \"english\",\n            input: $('#input'),\n            customLayouts: {\n                selectable: []\n            },\n        };\n\n\n    var function_keys = {\n        backspace: {\n            text: 'DEL',\n        },\n        return: {\n            text: 'Enter'\n        },\n        shift: {\n            text: 'Shift'\n        },\n        space: {\n            text: 'Space'\n        },\n        numeric_switch: {\n            text: '123',\n            command: function () {\n                this.createKeyboard('numeric');\n                this.events();\n            }\n        },\n        layout_switch: {\n            text: '<i class=\"fa fa-keyboard-o\" aria-hidden=\"true\"></i>',\n            command: function () {\n                var l = this.toggleLayout();\n                this.createKeyboard(l);\n                this.events();\n            }\n        },\n        character_switch: {\n            text: 'ABC',\n            command: function () {\n                this.createKeyboard(layout);\n                this.events();\n            }\n        },\n        symbol_switch: {\n            text: '#+=',\n            command: function () {\n                this.createKeyboard('symbolic');\n                this.events();\n            }\n        }\n    };\n\n\n    var layouts = {\n        selectable: ['azeri', 'english', 'russian','french', 'emoji'],\n        azeri: [\n            ['q', 'ü', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'ö', 'ğ'],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ı', 'ə'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'ç', 'ş', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        english: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        russian: [\n            ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х'],\n            ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n            ['shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        french: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        emoji: [\n            ['😀', '😁', '😂', '🤣', '😃', '😄', '😅', '😆', '😉', '😊',],\n            ['😋', '😎', '😍', '😘', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],            \n        numeric: [\n            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n            ['-', '/', ':', ';', '(', ')', '$', '&', '@', '\"'],\n            ['symbol_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n        ],\n        numbers_only: [\n            ['1', '2', '3',],\n            ['4', '5', '6',],\n            ['7', '8', '9',],\n            ['0', 'backspace'],\n        ],\n        symbolic: [\n            ['[', ']', '{', '}', '#', '%', '^', '*', '+', '='],\n            ['_', '\\\\', '|', '~', '<', '>'],\n            ['numeric_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n\n        ]\n    }\n\n    var shift = false, capslock = false, layout = 'english', layout_id = 0;\n\n    // The actual plugin constructor\n    function Plugin(element, options) {\n        this.element = element;\n        // jQuery has an extend method which merges the contents of two or\n        // more objects, storing the result in the first object. The first object\n        // is generally empty as we don't want to alter the default options for\n        // future instances of the plugin\n        this.settings = $.extend({}, defaults, options);\n        // Extend & Merge the cusom layouts\n        layouts = $.extend(true, {}, this.settings.customLayouts, layouts);\n        if (Array.isArray(this.settings.customLayouts.selectable)) {\n            $.merge(layouts.selectable, this.settings.customLayouts.selectable);\n        }\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function () {\n            layout = this.settings.layout;\n            this.createKeyboard(layout);\n            this.events();\n        },\n\n        setInput: function (newInputField) {\n            this.settings.input = newInputField;\n        },\n\n        createKeyboard: function (layout) {\n            shift = false;\n            capslock = false;\n\n            var keyboard_container = $('<ul/>').addClass('jkeyboard'),\n                me = this;\n\n            layouts[layout].forEach(function (line, index) {\n                var line_container = $('<li/>').addClass('jline');\n                line_container.append(me.createLine(line));\n                keyboard_container.append(line_container);\n            });\n\n            $(this.element).html('').append(keyboard_container);\n        },\n\n        createLine: function (line) {\n            var line_container = $('<ul/>');\n\n            line.forEach(function (key, index) {\n                var key_container = $('<li/>').addClass('jkey').data('command', key);\n\n                if (function_keys[key]) {\n                    key_container.addClass(key).html(function_keys[key].text);\n                }\n                else {\n                    key_container.addClass('letter').html(key);\n                }\n\n                line_container.append(key_container);\n            })\n\n            return line_container;\n        },\n\n        events: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift'),\n                space_key = $(this.element).find('.space'),\n                backspace_key = $(this.element).find('.backspace'),\n                return_key = $(this.element).find('.return'),\n\n                me = this,\n                fkeys = Object.keys(function_keys).map(function (k) {\n                    return '.' + k;\n                }).join(',');\n\n            letters.on('click', function () {\n                me.type((shift || capslock) ? $(this).text().toUpperCase() : $(this).text());\n            });\n\n            space_key.on('click', function () {\n                me.type(' ');\n            });\n\n            return_key.on('click', function () {\n                me.type(\"\\n\");\n                me.settings.input.parents('form').submit();\n            });\n\n            backspace_key.on('click', function () {\n                me.backspace();\n            });\n\n            shift_key.on('click', function () {\n                if (capslock) {\n                    me.toggleShiftOff();\n                    capslock = false;\n                } else {\n                    me.toggleShiftOn();\n                }\n            }).on('dblclick', function () {\n                capslock = true;\n            });\n\n\n            $(fkeys).on('click', function () {\n                var command = function_keys[$(this).data('command')].command;\n                if (!command) return;\n\n                command.call(me);\n            });\n        },\n\n        type: function (key) {\n            var input = this.settings.input,\n                val = input.val(),\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n\n            var max_length = $(input).attr(\"maxlength\");\n            if (start == end && end == val.length) {\n                if (!max_length || val.length < max_length) {\n                    input.val(val + key);\n                    input.change()\n                    $('#vkeyname').text(val + key)\n                }\n            } else {\n                if (input_node.type == \"text\"){\n                    var new_string = this.insertToString(start, end, val, key);\n                    input.val(new_string);\n                    start++;\n                    end = start;\n                    input_node.setSelectionRange(start, end);\n                }else{\n                    input.val(val + key);\n                }\n                input.change()\n                $('#vkeyname').text(val + key)\n                \n            }\n            input.trigger('focus');\n\n            if (shift && !capslock) {\n                this.toggleShiftOff();\n            }\n        },\n\n        backspace: function () {\n            var input = this.settings.input,\n                val = input.val();\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n            if (input.type == \"text\"){\n                input.val(val.slice(0, start-1) + val.slice(start))\n                input_node.setSelectionRange(start-1, start-1);\n                console.log(val)\n                $('#vkeyname').text(val)\n            }else{\n                input.val(val.slice(0,-1))\n                $('#vkeyname').text(val.slice(0,-1))\n            }\n            input.change()\n            input.focus()\n        },\n\n        toggleShiftOn: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.addClass('uppercase');\n            shift_key.addClass('active')\n            shift = true;\n        },\n\n        toggleShiftOff: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.removeClass('uppercase');\n            shift_key.removeClass('active');\n            shift = false;\n        },\n\n        toggleLayout: function () {\n            layout_id = layout_id || 0;\n            var plain_layouts = layouts.selectable;\n            layout_id++;\n\n            var current_id = layout_id % plain_layouts.length;\n            var SelectedLayoutName = plain_layouts[current_id];\n            $('#vkeyname').text('V-Keyboard ' + SelectedLayoutName )\n            return plain_layouts[current_id];\n        },\n\n        insertToString: function (start, end, string, insert_string) {\n            return string.substring(0, start) + insert_string + string.substring(end, string.length);\n        }\n    };\n\n        /*\n\t\t// A really lightweight plugin wrapper around the constructor,\n\t\t// preventing against multiple instantiations\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\n\t\t\t\t\t\t\t\t$.data( this, \"plugin_\" + pluginName, new Plugin( this, options ) );\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n        */\n        var methods = {\n            init: function(options) {\n                if (!this.data(\"plugin_\" + pluginName)) {\n                    this.data(\"plugin_\" + pluginName, new Plugin(this, options));\n                }\n            },\n\t\t\tsetInput: function(content) {\n\t\t\t\tthis.data(\"plugin_\" + pluginName).setInput($(content));\n            },\n            setLayout: function(layoutname) {\n                // change layout if it is not match current\n                object = this.data(\"plugin_\" + pluginName);\n                if (typeof(layouts[layoutname]) !== 'undefined' && object.settings.layout != layoutname) {\n                    object.settings.layout = layoutname;\n                    object.createKeyboard(layoutname);\n                    object.events();\n                };\n            },\n        };\n\n\t\t$.fn[pluginName] = function (methodOrOptions) {\n            if (methods[methodOrOptions]) {\n                return methods[methodOrOptions].apply(this.first(), Array.prototype.slice.call( arguments, 1));\n            } else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\n                // Default to \"init\"\n                return methods.init.apply(this.first(), arguments);\n            } else {\n                $.error('Method ' +  methodOrOptions + ' does not exist on jQuery.tooltip');\n            }\n        };\n\n})(jQuery, window, document);\n</script>\n<style>\n    .jkeyboard {\n  display: inline-block;\n}\n.jkeyboard, .jkeyboard .jline, .jkeyboard .jline ul {\n  display: block;\n  margin: 0;\n  padding: 0;\n}\n.jkeyboard .jline {\n  text-align: center;\n  margin-left: -14px;\n}\n.jkeyboard .jline ul li {\n  font-family: arial, sans-serif;\n  font-size: 20px;\n  display: inline-block;\n  border: 1px solid #468db3;\n  -webkit-box-shadow: 0 0 3px #468db3;\n  -webkit-box-shadow: inset 0 0 3px #468db3;\n  margin: 5px 0 1px 6px;\n  color: #000000;\n  border-radius: 5px;\n  width: 52px;\n  height: 52px;\n  box-sizing: border-box;\n  text-align: center;\n  line-height: 52px;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: -moz-none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.jkeyboard .jline ul li.uppercase {\n  text-transform: uppercase;\n}\n.jkeyboard .jline ul li:hover, .jkeyboard .jline ul li:active {\n  background-color: #185a82;\n}\n.jkeyboard .jline .return {\n  width: 80px;\n}\n.jkeyboard .jline .space {\n  width: 366px;\n}\n.jkeyboard .jline .numeric_switch {\n  width: 65px;\n}\n.jkeyboard .jline .layout_switch {\n}\n.jkeyboard .jline .shift {\n  width: 60px;\n}\n.jkeyboard .jline .backspace {\n  width: 69px;\n}\n</style>\n\n\n\n\n<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n.nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    opacity:0.99;\n    z-index: 100; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n/* Modal Content */\n.modal-content {\n    position: fixed;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 0;\n    bottom: 0%;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    border: 1px solid #888;\n    width: fit-content;\n    max-width: 100%;\n    max-height: 100%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: animate;\n    -webkit-animation-duration: 0.4s;\n    animation-name: animate;\n    animation-duration: 0.4s\n}\n\n/* Add Animation */\n@-webkit-keyframes animate {\n    from {bottom:100%; opacity:0} \n    to {bottom:0%; opacity:1}\n}\n\n@keyframes animate {\n    from {bottom:100%; opacity:0}\n    to {bottom:0%; opacity:1}\n}\n\n/* The Close Button */\n.close {\n    color: black;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-header {\n    padding: 2px 16px;\n    background-color: aliceblue;\n    color: white;\n}\n\n.modal-body {padding: 2px 16px;}\n\n.modal-footer {\n    padding: 2px 16px;\n    background-color: #5cb85c;\n    color: white;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"myModal\" class=\"modal\">\n\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n      <div class=\"modal-header\">\n      <span class=\"close\" onclick=\"closeModal()\">&times;</span>\n      <h2 id=\"vkeyname\" style=\"background-color: aliceblue !important; color: black !important; text-align: center; min-height: 30px;\">V-Keyboard</h2>\n    </div>\n    <div class=\"modal-body\">\n        <div id=\"keyboard\"></div>\n        <div>\n        </div>\n    </div>\n  </div>\n</div>\n\n\n<script>\n    // Get the modal\nvar modal = document.getElementById('myModal');\n\n/*\n$('input[type=text]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"english\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n\n$('input[type=number]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"numbers_only\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n*/\n\nvar inputTags;\nvar inputType;\n\nvar getinputs = function() {\n    inputTags = document.getElementsByTagName(\"input\");\n    console.log(inputTags)\n    for (var i = 0; i < inputTags.length; i++) {\n        inputTags[i].addEventListener('click', openModal, false)\n    }\n}\n\nsetTimeout(function(){ getinputs(); }, 1000);\n\nvar inputTarget;\n\nvar openModal = function() {\n    inputType = event.target.type\n    inputTarget = event.target\n    var layoutName;\n    if (inputType == \"number\"){\n        //inputTarget.type = \"number\" //hack because chrome doesn't allow setselection in number inputs\n        //inputTarget.value = \"\"\n        layoutName = \"numbers_only\"\n    }else{\n        layoutName = \"english\"\n    }\n    $('#vkeyname').text(event.target.value)\n    $('#keyboard').unbind().removeData();\n    modal.style.display = \"block\";\n    $('#keyboard').jkeyboard({\n        layout: layoutName,\n        input: $('#'+$(this).attr('id'))\n    });\n}\n\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\n//span.onclick = function(event) {\n  //closeModal()\n//}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    var source = event.target;\n    if (source == modal || source == span) {\n        closeModal(source)\n    }\n};\n\nvar closeModal = function(source){\n    //console.log(\"closing\")\n    modal.style.display = \"none\";\n   \n    if (inputType == \"number\"){\n        inputTarget.type = \"number\" //hack because chrome doesn't allow selectionstart on number inputs\n    }\n}\n\n</script>\n<script>\n\nvar clickState = 1;\nvar btn = document.querySelector('.VK');\n\nbtn.addEventListener('click', function(){\n\n  if (clickState == 0) {\n    this.textContent = 'V-KeyBoard On';\n    modal = document.getElementById('myModal');\n    clickState = 1;\n  } else {\n    this.textContent = 'V-KeyBoard Off';\n    modal = document.getElementById('empty');\n    clickState = 0;\n  }\n\n});\n</script>\n\n<style>\n.VK{\n    position: fixed;\n    top: 60px;\n    right: 20px;\n    height: 30px;\n}\n</style>\n\n<div id=\"empty\"></div>\n<button style=\"display:none;\" class=\"VK\">V-KeyBoard On</button> ",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 200,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "496c2344.872eec",
        "type": "ui_text_input",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "84ad1d4c.e0002",
        "order": 4,
        "width": "2",
        "height": "1",
        "passthru": false,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 630,
        "y": 420,
        "wires": [
            [
                "72569eb3.4a338",
                "7a3c23dbc8ac810b"
            ]
        ]
    },
    {
        "id": "d2461055.3396d",
        "type": "trigger",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "op1": "",
        "op2": "0000",
        "op1type": "nul",
        "op2type": "num",
        "duration": "10",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "496c2344.872eec"
            ]
        ]
    },
    {
        "id": "72569eb3.4a338",
        "type": "switch",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 540,
        "wires": [
            [
                "d2461055.3396d"
            ]
        ]
    },
    {
        "id": "8aa44365.1d51e",
        "type": "function",
        "z": "9a9fe8141212d6cf",
        "name": "settings.title",
        "func": "\nmsg.payload = \"<p><small>\" + global.get(\"networkId\") + \" / \" +  global.get(\"node\") + \"</small></p>\";\nmsg.payload += \"<p><big>\" + global.get(\"settings.title.value\") || global.get(\"nodeDescription\") + \"</big></p>\";\n\nvar state = global.get(\"readings.\"+global.get(\"localNetworkId\")+\".\"+global.get(\"node\")+\".stat.state.value\");\nif (state!==\"ok\") {\n    msg.payload += '<p><small><span style=\"color:#ff0000\">' + state + \"</span></small></p>\";\n}\n\nvar logo  = global.get(\"settings.customerLogo.value\") || \"http://heatweb.co.uk/w/images/thumb/3/3f/G12749.png/120px-G12749.png\";\nif (logo) {\n    \n    if (logo.indexOf(\"http\")<0) { \n        \n        logo = \"/files/images/\" + logo;\n        \n    }\n\n\n    msg.payload = '<table align=\"center\" width=\"94%\" height=\"100%\"><tr><td align=\"left\" valign=\"middle\" height=\"100%\"><img style=\"border-radius: 5px; max-height: 90px\" src=\"' + logo + '\"></td><td align=\"right\" valign=\"middle\" height=\"100%\">' + msg.payload + '</td></tr></table>';\n   //msg.payload = '<img src=\"' + logo + '\" height=\"40px\"> ' + msg.payload;\n} else {\n    \n    msg.payload = '<table width=\"100%\" height=\"100%\"><tr><td align=\"center\" valign=\"middle\" height=\"100%\"><big>' + msg.payload + '</big>&nbsp;&nbsp;</td></tr></table>';\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "51e62b0a.b42434"
            ]
        ]
    },
    {
        "id": "cfd7f87bee217367",
        "type": "function",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "func": "msg.topic = \"_/user/pin\" ;\nmsg.title = \"User Keypad PIN Input\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 540,
        "wires": [
            [
                "805efecb490b4df6",
                "26f29a02fae45280"
            ]
        ]
    },
    {
        "id": "f507145e54d36ba5",
        "type": "trigger",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 900,
        "y": 540,
        "wires": [
            [
                "cfd7f87bee217367"
            ]
        ]
    },
    {
        "id": "7a3c23dbc8ac810b",
        "type": "switch",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 540,
        "wires": [
            [
                "f507145e54d36ba5"
            ]
        ]
    },
    {
        "id": "805efecb490b4df6",
        "type": "debug",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 620,
        "wires": []
    },
    {
        "id": "325cdb6c00699fdb",
        "type": "function",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "func": "\n    msg.payload = '<table width=\"100%\" height=\"100%\"><tr><td align=\"center\" valign=\"middle\" height=\"100%\"><big>' + msg.payload + '</big>&nbsp;&nbsp;</td></tr></table>';\n   //msg.payload = '<img src=\"' + logo + '\" height=\"40px\"> ' + msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 60,
        "wires": [
            [
                "12978bf48632b4a5",
                "331e45622632db48"
            ]
        ]
    },
    {
        "id": "12978bf48632b4a5",
        "type": "link out",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "mode": "link",
        "links": [
            "6cce1b9.af560e4"
        ],
        "x": 575,
        "y": 60,
        "wires": []
    },
    {
        "id": "9e639d5d0411a444",
        "type": "ui_ui_control",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "events": "all",
        "x": 640,
        "y": 240,
        "wires": [
            [
                "2c0af4c069cbdcab"
            ]
        ]
    },
    {
        "id": "331e45622632db48",
        "type": "trigger",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 610,
        "y": 120,
        "wires": [
            [
                "2c0af4c069cbdcab"
            ]
        ]
    },
    {
        "id": "2c0af4c069cbdcab",
        "type": "trigger",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": " ",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 180,
        "wires": [
            [
                "8aa44365.1d51e"
            ]
        ]
    },
    {
        "id": "2f9dba58d22dc166",
        "type": "inject",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "6ce6de74ec15dcd3"
            ]
        ]
    },
    {
        "id": "6ce6de74ec15dcd3",
        "type": "function",
        "z": "9a9fe8141212d6cf",
        "name": "gauges[0]",
        "func": "\nif (global.get(\"settings.gauges\")) {\n\n    var gauges = global.get(\"settings.gauges.value\");\n\n    if (gauges[0].topic) {\n\n        var topic = gauges[0].topic; //global.get(\"localNetworkId\") + \"/+/DHW/dat/tCo\";\n        msg.topic = [];\n        msg.topic.push({ \"topic\": topic, \"qos\": 0 });\n        msg.action = \"subscribe\"\n        msg.payload = null;\n\n        return msg;\n    }\n   \n}\n\n\nreturn null;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 720,
        "wires": [
            [
                "567cfc25d683ae00",
                "263f5e9cc452b088"
            ]
        ]
    },
    {
        "id": "12cd1b8e22ad5a37",
        "type": "mqtt in",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 430,
        "y": 800,
        "wires": [
            [
                "3eefcd4f.bd3522"
            ]
        ]
    },
    {
        "id": "3aa7ae8680fba7c7",
        "type": "inject",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "aa2119ed755b3403"
            ]
        ]
    },
    {
        "id": "aa2119ed755b3403",
        "type": "function",
        "z": "9a9fe8141212d6cf",
        "name": "gauges[1]",
        "func": "\nif (global.get(\"settings.gauges\")) {\n\n    var gauges = global.get(\"settings.gauges.value\");\n\n    if (gauges[1].topic) {\n\n        var topic = gauges[1].topic; //global.get(\"localNetworkId\") + \"/+/DHW/dat/tCo\";\n        msg.topic = [];\n        msg.topic.push({ \"topic\": topic, \"qos\": 0 });\n        msg.action = \"subscribe\"\n        msg.payload = null;\n\n        return msg;\n    }\n\n}\n\n\nreturn null;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 800,
        "wires": [
            [
                "12cd1b8e22ad5a37"
            ]
        ]
    },
    {
        "id": "2a33f13c34b9f316",
        "type": "inject",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 810,
        "y": 900,
        "wires": [
            [
                "61cbc5f5.22dbbc"
            ]
        ]
    },
    {
        "id": "567cfc25d683ae00",
        "type": "mqtt in",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 430,
        "y": 720,
        "wires": [
            [
                "6129542c.75c96c"
            ]
        ]
    },
    {
        "id": "b6cf9f0c.00abb",
        "type": "ui_template",
        "z": "9a9fe8141212d6cf",
        "group": "84ad1d4c.e0002",
        "name": "header icons",
        "order": 2,
        "width": "1",
        "height": "1",
        "format": "<script>\n    (function(scope) {\n        //console.log('Position 1');\n        //console.dir(scope);\n        //console.log(scope.msg);\n        scope.$watch('msg.payload', function(data) {\n            //console.log('Position 2');\n            //console.dir(data);\n            //alert(data);\n            instr = data;\n        });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 430,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "1c4fc445b04f8379",
        "type": "mqtt in",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "topic": "html/headerIcons",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 280,
        "wires": [
            [
                "b6cf9f0c.00abb"
            ]
        ]
    },
    {
        "id": "1f6bc0a9f32c14db",
        "type": "mqtt in",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "topic": "cmd/displayMessage",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 60,
        "wires": [
            [
                "325cdb6c00699fdb"
            ]
        ]
    },
    {
        "id": "26f29a02fae45280",
        "type": "mqtt out",
        "z": "9a9fe8141212d6cf",
        "name": "",
        "topic": "user/pin",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 1260,
        "y": 540,
        "wires": []
    },
    {
        "id": "263f5e9cc452b088",
        "type": "debug",
        "z": "9a9fe8141212d6cf",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 660,
        "wires": []
    },
    {
        "id": "5ecd5bf0795bd642",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 640,
        "wires": [
            [
                "f80e2139d14010f2"
            ]
        ]
    },
    {
        "id": "7fc27ff1e4cf8c1a",
        "type": "comment",
        "z": "ca03066f6a7451f4",
        "name": "TI COMMANDS",
        "info": "        -v              Display the ti command version number\n        -h              Display the list of command options or one command option details\n        -warranty       Display the warranty\n        -list:          List all ti boards connected\n                        return the # of boards and stack level for every board\n        board           Display the board status and firmware version number\n        rtcbrd          Display the RTC backup battery voltage\n        relwr:          Set relays (AC switch) On/Off\n        relrd:          Read relays  status\n        reltest:                Turn ON and OFF the relays until press a key\n        contactrd:      Read dry contact status\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrd:        Read dry contact transitions count\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrst:       Reset dry contact transitions count\n        edgerd:         Read dry contact transitions type, ret 0 - disable, 1 - rising, 2 - falling, 3 - both\n        edgewr:         Write dry contact transitions type: 0 - disable, 1 - rising, 2 - falling, 3 - both\n        dacrd:          Read DAC voltage value (0 - 10V)\n        dacwr:          Write DAC output voltage value (0..10V)\n        odrd:           Read open drain pwm value (0 - 100%)\n        odwr:           Write the open drain output pwm value (0..100%)\n        adcrd:          Read ADC input voltage value (0 - 10V)\n                        Warning: For this measurements to be valid place the jumper in position \"0-10V\"\n        r1krd:          Read resistor input  value (1k) in kiloOhms, Warning: You must palce the jumper in position \"1K\".\n                        Return 30kOhm for resistor out of range\n        r10krd:         Read resistor input  value (10k) in kiloOhms, Warning: You must palce the jumper in position \"10K                                                                                                                    \".\n                        Return 30kOhm for resistor out of range\n        rthrd:          Read thermistor input  resistance value in kiloOhms, Return 60kOhm for resistor out of range\n        pwmrd:          Read PWM input\n        adccal:         Calibrate one ADC channel, the calibration must be done in 2 points at min 5V apart\n        adccalrst:      Reset the calibration for one ADC channel\n        daccal:         Calibrate one DAC channel, the calibration must be done in 2 points at min 5V apart\n        daccalrst:      Reset calibration for one DAC channel\n        wdtr:           Reload the watchdog timer and enable the watchdog if is disabled\n        wdtpwr:         Set the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtprd:         Get the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtipwr:        Set the watchdog initial period in seconds,\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtiprd:        Get the watchdog initial period in seconds.\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtopwr:        Set the watchdog off period in seconds (max 48 days).\n                        This is the time that watchdog mantain Raspberry turned off\n        wdtoprd:        Get the watchdog off period in seconds (max 48 days)\n                        This is the time that watchdog mantain Raspberry turned off\n        rtcrd:          Get the internal RTC  date and time(mm/dd/yy hh:mm:ss)\ntcbrd:          Get the internal RTC backup battery voltage\n        rtcwr:          Set the internal RTC  date and time(mm/dd/yy hh:mm:ss)\n        bckbrd:         Get the backup battery voltage\n        pwrsrd:         Get the power supply status\n",
        "x": 100,
        "y": 40,
        "wires": []
    },
    {
        "id": "73eb8679965c1672",
        "type": "trigger",
        "z": "ca03066f6a7451f4",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 230,
        "y": 820,
        "wires": [
            [
                "b5726b628ee3e61b"
            ]
        ]
    },
    {
        "id": "3e140d99885b1dcf",
        "type": "function",
        "z": "ca03066f6a7451f4",
        "name": "",
        "func": "\nvar msg1 = {};\nmsg1.topic = \"system/firmwareHat\",\nmsg1.payload = msg.payload.split(\",\")[0].trim().split(\" \")[2];\nmsg1.title = \"IO Hat Firmware Version\";\n\nvar msg2 = {};\nmsg2.topic = \"system/tCpuHat\",\nmsg2.payload = msg.payload.split(\",\")[1].trim().split(\" \")[2];\nmsg2.units=\"°C\";\nmsg2.title = \"IO Hat CPU Temperature\";\n\nvar msg3 = {};\nmsg3.topic = \"system/vPowerHat\",\nmsg3.payload = msg.payload.split(\",\")[2].trim().split(\" \")[2];\nmsg3.units=\"volts\";\nmsg3.title = \"IO Hat Power Supply Voltage\";\n\n\nvar msg4 = {};\nmsg4.topic = \"system/vBatteryHat\",\nmsg4.payload = msg.payload.split(\",\")[3].trim().split(\" \")[1];\nmsg4.units=\"volts\";\nmsg4.title = \"IO Hat Battery Voltage\";\n\nreturn [msg1, msg2,msg3,msg4];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 840,
        "wires": [
            [
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ]
        ]
    },
    {
        "id": "3fdcb94d47bf9bff",
        "type": "link in",
        "z": "ca03066f6a7451f4",
        "name": "",
        "links": [
            "c52dea4958c2f7ea",
            "26f1ad336f82aeeb"
        ],
        "x": 935,
        "y": 860,
        "wires": [
            [
                "a9c8363a03750511"
            ]
        ]
    },
    {
        "id": "b5726b628ee3e61b",
        "type": "exec",
        "z": "ca03066f6a7451f4",
        "command": "bash /home/pi/node-hiu/sq2.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "sq2.sh",
        "x": 390,
        "y": 820,
        "wires": [
            [
                "1a5f38473038651a",
                "3e140d99885b1dcf"
            ],
            [],
            []
        ]
    },
    {
        "id": "1a5f38473038651a",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 780,
        "wires": []
    },
    {
        "id": "301ee1a1ec6f3074",
        "type": "template",
        "z": "ca03066f6a7451f4",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{cmdprefix}} board\n{{cmdprefix}} wdtr",
        "output": "str",
        "x": 580,
        "y": 400,
        "wires": [
            [
                "69e19411dbc48dd4"
            ]
        ]
    },
    {
        "id": "69e19411dbc48dd4",
        "type": "file",
        "z": "ca03066f6a7451f4",
        "name": "",
        "filename": "/home/pi/node-hiu/sq2.sh",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 910,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "f80e2139d14010f2",
        "type": "exec",
        "z": "ca03066f6a7451f4",
        "command": "bash /home/pi/node-hiu/sq.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "sq.sh",
        "x": 390,
        "y": 640,
        "wires": [
            [
                "0fbb5027b2e50745",
                "92d71bc19a90ebb7"
            ],
            [],
            [
                "5225132d4929334b",
                "119c833c97aaa8ef"
            ]
        ]
    },
    {
        "id": "0fbb5027b2e50745",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 560,
        "wires": []
    },
    {
        "id": "a9c8363a03750511",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 860,
        "wires": []
    },
    {
        "id": "722ebfebdf90d15a",
        "type": "change",
        "z": "ca03066f6a7451f4",
        "name": "portSetup",
        "rules": [
            {
                "t": "set",
                "p": "portSetup",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 340,
        "wires": [
            [
                "c470f5c039353850"
            ]
        ]
    },
    {
        "id": "c470f5c039353850",
        "type": "function",
        "z": "ca03066f6a7451f4",
        "name": "",
        "func": "//[{\"portId\":\"TH8\",\"block\":\"TH8\",\"channel\":\"8\",\"name\":\"TH8 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"ntcr23\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"DHW\",\"topicKey\":\"tCo\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[97.006,-20],[72.911,-15],[72.911,-10],[42.317,-5],[32.651,0],[25.395,5],[19.903,10],[15.714,15],[12.493,20],[10,25],[8.056,30],[6.53,35],[5.325,40],[4.367,45],[3.601,50],[2.985,55],[2.467,60],[2.082,65],[1.752,70],[1.256,80],[0.916,90],[0.678,100],[0.51,110],[0.388,120]]\"},\n//{\"portId\":\"D1\",\"block\":\"\",\"channel\":\"1\",\"name\":\"Digital Input D1\",\"figure\":\"Input\",\"portColor\":\"#00ffff\",\"wiredTo\":\"FS\",\"wiredToPort\":\"pulse\",\"signalType\":\"PULSE\",\"topicDevice\":\"FS\",\"topicKey\":\"pulse\",\"mapUnits\":\"pulse/s to ltr/min\",\"map\":\"[[0,0],[265,30]]\"},{\"portId\":\"P1\",\"block\":\"\",\"channel\":\"1\",\"name\":\"PWM Input P1\",\"figure\":\"Input\",\"portColor\":\"#40aceb\",\"wiredTo\":\"pump\",\"wiredToPort\":\"speed\",\"signalType\":\"PWM\",\"topicDevice\":\"pump\",\"topicKey\":\"speed\",\"mapUnits\":\"% to %\",\"map\":\"[[0,0],[100,100]]\"},{\"portId\":\"P2\",\"block\":\"\",\"channel\":\"2\",\"name\":\"PWM Input P2\",\"figure\":\"Input\",\"portColor\":\"#40aceb\",\"wiredTo\":\"valve4\",\"wiredToPort\":\"position\",\"signalType\":\"PWM\",\"topicDevice\":\"valve4\",\"topicKey\":\"position\",\"mapUnits\":\"% to %\",\"map\":\"[[0,0],[100,100]]\"},{\"portId\":\"OD2\",\"block\":\"OD2\",\"channel\":\"2\",\"name\":\"PWM Output OD2\",\"figure\":\"Output\",\"portColor\":\"#40aceb\",\"wiredTo\":\"valve4\",\"wiredToPort\":\"setpoint\",\"signalType\":\"PWM\",\"topicDevice\":\"valve4\",\"topicKey\":\"setpoint\",\"mapUnits\":\"% to %\",\"map\":\"[[0,0],[100,100]]\"},{\"portId\":\"OD1\",\"block\":\"OD1\",\"channel\":\"1\",\"name\":\"PWM Output OD1\",\"figure\":\"Output\",\"portColor\":\"#40aceb\",\"wiredTo\":\"pump\",\"wiredToPort\":\"setpoint\",\"signalType\":\"PWM\",\"topicDevice\":\"pump\",\"topicKey\":\"setpoint\",\"mapUnits\":\"% to %\",\"map\":\"[[0,0],[100,100]]\"}]\n\n\n// echo \"rthrd1\",$(ti rthrd 1)\n// echo \"countrd1\",$(ti countrd 1)\n// echo \"pwmrd1\",$(ti pwmrd 1)\n// echo \"pwmrd2\",$(ti pwmrd 2)\n\n\nvar oot=\"\";\nvar pL = msg.payload;\nvar cmdprefix = flow.get(\"cmdprefix\") || \"ti\";\n\nfor (var p in pL) {\n    \n    \n    if (pL[p].portId.substr(0, 2) == \"TH\" && pL[p].signalType.substr(0, 6) == \"NTC10K\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',rthrd' + pL[p].channel + '\",$('+cmdprefix+' rthrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].signalType.substr(0,5)==\"PULSE\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',countrd' + pL[p].channel + '\",$('+cmdprefix+' countrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,1)==\"D\" && pL[p].signalType.substr(0,3)==\"DRY\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',contactrd' + pL[p].channel + '\",$('+cmdprefix+' contactrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,1)==\"P\" && pL[p].signalType.substr(0,3)==\"PWM\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',pwmrd' + pL[p].channel + '\",$('+cmdprefix+' pwmrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,2)==\"IN\" && pL[p].signalType.substr(0,5)==\"NTC1K\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',r1krd' + pL[p].channel + '\",$('+cmdprefix+' r1krd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,2)==\"IN\" && pL[p].signalType.substr(0,6)==\"NTC10K\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',r10krd' + pL[p].channel + '\",$('+cmdprefix+' r10krd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,2)==\"IN\" && pL[p].signalType.substr(0,5)==\"0-10V\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',adcrd' + pL[p].channel + '\",$('+cmdprefix+' adcrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,2)==\"IN\" && pL[p].signalType.substr(0,3)==\"DRY\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',contactrd' + pL[p].channel + '\",$('+cmdprefix+' contactrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,1)==\"IN\" && pL[p].signalType.substr(0,5)==\"PULSE\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',countrd' + pL[p].channel + '\",$('+cmdprefix+' countrd ' + pL[p].channel + ')\\n';\n        \n    }\n    \n    \n    \n}\n\n\nmsg.payload=oot;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "11c03d3cbc04923d",
                "f63e5d3839a91cd1"
            ]
        ]
    },
    {
        "id": "11c03d3cbc04923d",
        "type": "file",
        "z": "ca03066f6a7451f4",
        "name": "",
        "filename": "/home/pi/node-hiu/sq.sh",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1230,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "99f19987a9d79c31",
        "type": "function",
        "z": "ca03066f6a7451f4",
        "name": "",
        "func": "\n\nfunction uniq(a) {\n    var seen = {};\n    return a.filter(function(item) {\n        return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n}\n\nif (msg.payload.indexOf(\",\")<1) { return null; }\n\nvar invar = msg.payload.split(\",\");\n\nvar presult = global.get(\"portSetup\").filter(port => port.portId == invar[0]);\nif (presult.length>0) { \n    \n    var msg1 = {};\n    \n    var readin = parseFloat(invar[2].split(\" \")[0]);\n    \n    if (presult[0].signalType && presult[0].signalType.indexOf(\"PULSE\") == 0) {\n        \n        var p1 = flow.get(\"c\" + invar[0] + \"last\") || 0;\n        flow.set(\"c\" + invar[0] + \"last\",readin);\n        readin = readin - p1;\n    }\n    \n    msg1.topic = (presult[0].topicDevice?presult[0].topicDevice + \"/\":\"\") + \"dat/\" + (presult[0].topicKey || \"value\"),\n    msg1.payload = readin;\n    msg1.points = 1000;\n    msg1.units = presult[0].mapUnits;\n    msg1.title = (presult[0].topicDevice?presult[0].topicDevice + \" \":\"\") + presult[0].wiredToPort;\n    \n    var msg2 = {};\n    msg2.topic = \"raw/\" + invar[0],\n    msg2.payload = readin;\n    msg2.title = presult[0].name || (\"Raw \" + invar[0]);\n    if (presult[0].mapUnits) { msg2.units = presult[0].mapUnits.split(\" to \")[0];  }\n    \n    var msg3 = { \"payload\":\"ok\"};  // alarm\n    msg3.topic=\"alarm/terminal\" + presult[0].portId;\n    \n    \n    \n    if (invar[1].substr(0, 5) == \"rthrd\" && readin==60) {  // sensor not connected\n\n        msg1 = null;\n        msg3.payload = \"Sensor Disconnected\"\n\n    }\n\n    else if (invar[1].substr(0, 5) == \"rthrd\" && readin == 30) {  // sensor not connected\n\n        msg1 = null;\n        msg3.payload = \"Sensor Short-circuit\"\n\n    }\n\n    else if(presult[0][\"map\"]) {\n     \n        msg1.units = presult[0].mapUnits.split(\" to \")[1];   \n        msg1.payload = \"\";\n        \n        var ntc = JSON.parse(presult[0][\"map\"]);\n        \n        var temp = -999;\n        for (var i = 1; i < ntc.length; i++) { \n            \n            if  (ntc[i][0]==readin) { \n                \n                temp = ntc[i][1];\n                \n                break;\n            }\n            else if  (ntc[i-1][0]==readin) { \n                \n                temp = ntc[i-1][1];\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]<=readin) && (ntc[i][0]>readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]>=readin) && (ntc[i][0]<readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            \n        }\n        \n\n        if (presult[0].signalType && presult[0].signalType.indexOf(\"PULSE\") == 0) {\n\n            //temp = 1.111;\n            if (temp == -999) { //} && (ntc[ntc.length -1][0] > readin)) {\n\n                temp = ((ntc[1][1]) * ((readin) / (ntc[1][0])));\n                //temp = ntc.length;\n\n            }\n        }\n\n        if (temp != -999) {\n            \n            msg1.payload =  temp; //parseInt(temp*100)/100; \n            \n            // if (temp <10) { msg1.payload =  parseInt(temp*100)/100; }\n            // else { msg1.payload =  parseInt(temp*10)/10; }\n            \n            if (presult[0].signalType && (presult[0].signalType.indexOf(\"NTC\")==0) && readin==60) {\n                \n                msg3.payload = \"Out of range\"\n                \n            }\n            \n            \n        } else {\n            \n            //msg1.payload = 0;\n            msg1 = null;\n            msg3.payload = \"Out of range\"\n        }\n    }\n    \n    if (msg1) {\n\n        \n        var readout = parseInt(parseFloat(msg1.payload)*100)/100; \n\n        //var readout = 50;\n        \n        var history = context.get(invar[0]) || [];\n        \n        // if (history.length>5 && history.indexOf(msg1.payload)<0) {  history = [];  }\n        // else if (history.length>1) {\n        //     var uniqh = uniq(history);\n        //     if ((uniqh.length<4) && (history.length<10)) {  \n        //         // slow mode\n        //         msg1=null; \n                \n        //     } else {\n        //     // else if (uniqh.length>0) {   readin = history.reduce((a, b) => a + b, 0) / history.length;  }\n        //         msg1.payload = history.reduce((a, b) => a + b, 0) / history.length; \n        //         msg1.payload =  parseInt(msg1.payload*100)/100; \n        //     }\n        //     if (history.length>9) { history=[msg1.payload]; }\n            \n        // }\n        \n        if (invar[1].substr(0, 5) == \"rthrd\" && history.indexOf(readout)>-1) {  \n            \n            msg1.payload =  parseInt((history.reduce((a, b) => a + b, 0) / history.length)*100)/100; \n            \n        } //msg1=null;\n        \n        history.push(readout);\n        if (history.length>20) { history.shift(); }\n        context.set(invar[0],history);\n        \n    }   \n    \n    if (msg1) { msg1.payload = parseInt(msg1.payload * 100) / 100;  }\n    \n    return [msg1, msg2, msg3];\n      \n}\n\nreturn null;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 660,
        "wires": [
            [
                "2e988386940749d8",
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ]
        ]
    },
    {
        "id": "92d71bc19a90ebb7",
        "type": "split",
        "z": "ca03066f6a7451f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 660,
        "wires": [
            [
                "99f19987a9d79c31",
                "c77d99f6194079d7"
            ]
        ]
    },
    {
        "id": "26f1ad336f82aeeb",
        "type": "link out",
        "z": "ca03066f6a7451f4",
        "name": "",
        "links": [
            "72fc070f.39dd8",
            "3fdcb94d47bf9bff"
        ],
        "x": 1175,
        "y": 740,
        "wires": []
    },
    {
        "id": "0b9b33794e321921",
        "type": "template",
        "z": "ca03066f6a7451f4",
        "name": "BOARD SETUP",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{cmdprefix}} wdtpwr 30\n{{cmdprefix}} edgewr 8 1",
        "output": "str",
        "x": 600,
        "y": 480,
        "wires": [
            [
                "5fb83c77f77d7cdb"
            ]
        ]
    },
    {
        "id": "5fb83c77f77d7cdb",
        "type": "file",
        "z": "ca03066f6a7451f4",
        "name": "",
        "filename": "/home/pi/node-hiu/sqsetup.sh",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 480,
        "wires": [
            [
                "d76edb39ad2c4601"
            ]
        ]
    },
    {
        "id": "62339bb059d4a43b",
        "type": "exec",
        "z": "ca03066f6a7451f4",
        "command": "bash /home/pi/node-hiu/sqsetup.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1280,
        "y": 480,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d76edb39ad2c4601",
        "type": "trigger",
        "z": "ca03066f6a7451f4",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1040,
        "y": 480,
        "wires": [
            [
                "62339bb059d4a43b"
            ]
        ]
    },
    {
        "id": "5225132d4929334b",
        "type": "link out",
        "z": "ca03066f6a7451f4",
        "name": "",
        "mode": "link",
        "links": [
            "0632f1bc7ce231b2",
            "38851676a0d913c9"
        ],
        "x": 555,
        "y": 720,
        "wires": []
    },
    {
        "id": "119c833c97aaa8ef",
        "type": "delay",
        "z": "ca03066f6a7451f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 760,
        "wires": [
            [
                "73eb8679965c1672"
            ]
        ]
    },
    {
        "id": "2e988386940749d8",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 600,
        "wires": []
    },
    {
        "id": "f63e5d3839a91cd1",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 300,
        "wires": []
    },
    {
        "id": "f0671ce68e136d63",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ti",
        "payloadType": "str",
        "x": 830,
        "y": 120,
        "wires": [
            [
                "0607bca7108e1f7c"
            ]
        ]
    },
    {
        "id": "f7757b4ca8561b28",
        "type": "change",
        "z": "ca03066f6a7451f4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "cmdprefix",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 200,
        "wires": [
            [
                "1a634abb96ea0953",
                "91668c2ca5f738bb"
            ]
        ]
    },
    {
        "id": "bf7eb1cb4b51e1dd",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "megabas 1",
        "payloadType": "str",
        "x": 840,
        "y": 160,
        "wires": [
            [
                "0607bca7108e1f7c"
            ]
        ]
    },
    {
        "id": "570aa45dabac319e",
        "type": "change",
        "z": "ca03066f6a7451f4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "cmdprefix",
                "pt": "msg",
                "to": "cmdprefix",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "301ee1a1ec6f3074"
            ]
        ]
    },
    {
        "id": "a225e75c1489d1ba",
        "type": "change",
        "z": "ca03066f6a7451f4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "cmdprefix",
                "pt": "msg",
                "to": "cmdprefix",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 480,
        "wires": [
            [
                "0b9b33794e321921"
            ]
        ]
    },
    {
        "id": "da443342a3ee7581",
        "type": "rbe",
        "z": "ca03066f6a7451f4",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 930,
        "y": 740,
        "wires": [
            [
                "11ef8c40cb8707eb"
            ]
        ]
    },
    {
        "id": "95e237adbbb4b523",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 990,
        "y": 680,
        "wires": [
            [
                "da443342a3ee7581"
            ]
        ]
    },
    {
        "id": "11ef8c40cb8707eb",
        "type": "switch",
        "z": "ca03066f6a7451f4",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 740,
        "wires": [
            [
                "26f1ad336f82aeeb"
            ]
        ]
    },
    {
        "id": "4dc151ca46e90967",
        "type": "comment",
        "z": "ca03066f6a7451f4",
        "name": "Building Automation Hat Commands",
        "info": "     -v              Display the megabas command version number\n        -h              Display the list of command options or one command option details\n        -warranty       Display the warranty\n        -list:          List all megabas boards connected\n                        return the # of boards and stack level for every board\n        board           Display the board status and firmware version number\n        trwr:           Set triacs (AC switch) On/Off\n        trrd:           Read triacs (AC switch) status\n        trtest:         Turn ON and OFF the triacs until press a key\n        contactrd:      Read dry contact status\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrd:        Read dry contact transitions count\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrst:       Reset dry contact transitions count\n        edgerd:         Read dry contact transitions type, ret 0 - disable, 1 - rising, 2 - falling, 3 -both\n        edgewr:         Write dry contact transitions type: 0 - disable, 1 - rising, 2 - falling, 3 - bot                                  h\n        dacrd:          Read DAC voltage value (0 - 10V)\n        dacwr:          Write DAC output voltage value (0..10V)\n        adcrd:          Read ADC input voltage value (0 - 10V)\n                        Warning: For this measurements to be valid place the jumper in position \"0-10V\"\n        r1krd:          Read resistor input  value (1k) in kiloOhms, Warning: You must palce the jumper in position \"1K\".\n                        Return 30kOhm for resistor out of range\n        r10krd:         Read resistor input  value (10k) in kiloOhms, Warning: You must palce the jumper in position \"10K\".\n                        Return 30kOhm for resistor out of range\n        adccal:         Calibrate one ADC channel, the calibration must be done in 2 points at min 5V apart\n        adccalrst:      Reset the calibration for one ADC channel\n        daccal:         Calibrate one DAC channel, the calibration must be done in 2 points at min 5V apart\n        daccalrst:      Reset calibration for one DAC channel\n        wdtr:           Reload the watchdog timer and enable the watchdog if is disabled\n        wdtpwr:         Set the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtprd:         Get the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtipwr:        Set the watchdog initial period in seconds,\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtiprd:        Get the watchdog initial period in seconds.\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtopwr:        Set the watchdog off period in seconds (max 48 days).\n                        This is the time that watchdog mantain Raspberry turned off\n        wdtoprd:        Get the watchdog off period in seconds (max 48 days)\n                        This is the time that watchdog mantain Raspberry turned off\n        rs485rd:        Read the RS485 communication settings\n        rs485wr:        Write the RS485 communication settings\n        rtcrd:          Get the internal RTC  date and time(mm/dd/yy hh:mm:ss)\n        rtcwr:          Set the internal RTC  date and time(mm/dd/yy hh:mm:ss)\n",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "8920b47930855b75",
        "type": "comment",
        "z": "ca03066f6a7451f4",
        "name": "Building Automation Hat ",
        "info": "https://sequentmicrosystems.com/collections/industrial-automation/products/raspberry-pi-building-automation",
        "x": 600,
        "y": 40,
        "wires": []
    },
    {
        "id": "c77d99f6194079d7",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 600,
        "wires": []
    },
    {
        "id": "12b1b35f41010d30",
        "type": "mqtt in",
        "z": "ca03066f6a7451f4",
        "name": "",
        "topic": "_/set/io",
        "qos": "0",
        "datatype": "json",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 550,
        "y": 260,
        "wires": [
            [
                "e4ac7c2a2adbf210",
                "722ebfebdf90d15a"
            ]
        ]
    },
    {
        "id": "e4ac7c2a2adbf210",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 260,
        "wires": []
    },
    {
        "id": "7006906bf1072ded",
        "type": "json",
        "z": "ca03066f6a7451f4",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 340,
        "wires": [
            [
                "722ebfebdf90d15a"
            ]
        ]
    },
    {
        "id": "0607bca7108e1f7c",
        "type": "mqtt out",
        "z": "ca03066f6a7451f4",
        "name": "",
        "topic": "_/set/ioCommand",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 1070,
        "y": 120,
        "wires": []
    },
    {
        "id": "c982e20b85d63972",
        "type": "mqtt in",
        "z": "ca03066f6a7451f4",
        "name": "",
        "topic": "_/set/ioCommand",
        "qos": "0",
        "datatype": "utf8",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "f7757b4ca8561b28"
            ]
        ]
    },
    {
        "id": "0271392ecfb72b34",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "ioCommand",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "settings.ioCommand.value",
        "payloadType": "global",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "f7757b4ca8561b28"
            ]
        ]
    },
    {
        "id": "1a634abb96ea0953",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 200,
        "wires": []
    },
    {
        "id": "91668c2ca5f738bb",
        "type": "link out",
        "z": "ca03066f6a7451f4",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "92bff8de10c66936"
        ],
        "x": 415,
        "y": 260,
        "wires": []
    },
    {
        "id": "92bff8de10c66936",
        "type": "link in",
        "z": "ca03066f6a7451f4",
        "name": "link in 2",
        "links": [
            "91668c2ca5f738bb",
            "f88d2c3350e78be3"
        ],
        "x": 205,
        "y": 340,
        "wires": [
            [
                "2d6c82fdac4bf920",
                "570aa45dabac319e",
                "a225e75c1489d1ba"
            ]
        ]
    },
    {
        "id": "2d6c82fdac4bf920",
        "type": "change",
        "z": "ca03066f6a7451f4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "settings.io.value",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 340,
        "wires": [
            [
                "7006906bf1072ded"
            ]
        ]
    },
    {
        "id": "ffd2523f080ae774",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 60,
        "wires": [
            [
                "6693dcc1e7730c30"
            ]
        ]
    },
    {
        "id": "6693dcc1e7730c30",
        "type": "function",
        "z": "ca03066f6a7451f4",
        "name": "new",
        "func": "if (!global.get(\"settings.ioCommand\")) { msg.payload = \"ti\"; return msg; }\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 60,
        "wires": [
            [
                "0607bca7108e1f7c"
            ]
        ]
    },
    {
        "id": "8093362b302a402e",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "ioCommand",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "settings.ioCommand.value",
        "payloadType": "global",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "f7757b4ca8561b28"
            ]
        ]
    },
    {
        "id": "cbda5ee26f8a31c8",
        "type": "mqtt out",
        "z": "ca03066f6a7451f4",
        "name": "",
        "topic": "_/set/io",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 1360,
        "y": 220,
        "wires": []
    },
    {
        "id": "5355a4329b044a33",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"portId\":\"TH7\",\"block\":\"TH7\",\"channel\":\"7\",\"name\":\"TH7 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"TS3\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"TS3\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[55.298,-10],[32.65,0],[23.396,5],[19.9035,10],[15.714,15],[12.4937,20],[10,25],[8.056,30],[5.3249,40],[3.601,50],[2.4871,60],[1.7516,70],[1.25617,80],[0.91611,90],[0.57863,100],[0.51,120]]\"},{\"portId\":\"TH6\",\"block\":\"TH6\",\"channel\":\"6\",\"name\":\"TH6 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"TS2\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"TS2\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[55.298,-10],[32.65,0],[23.396,5],[19.9035,10],[15.714,15],[12.4937,20],[10,25],[8.056,30],[5.3249,40],[3.601,50],[2.4871,60],[1.7516,70],[1.25617,80],[0.91611,90],[0.57863,100],[0.51,120]]\"},{\"portId\":\"TH4\",\"block\":\"TH4\",\"channel\":\"4\",\"name\":\"TH4 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"T4\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"T4\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[32.624,0],[25.381,5],[19.897,10],[15.711,15],[12.493,20],[10,25],[8.056,30],[5.324,40],[3.599,50],[2.483,60],[1.748,70],[1.252,80],[0.912,90],[0.674,100],[0.5,110]]\"},{\"portId\":\"TH3\",\"block\":\"TH3\",\"channel\":\"3\",\"name\":\"TH3 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"T3\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"T3\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[32.624,0],[25.381,5],[19.897,10],[15.711,15],[12.493,20],[10,25],[8.056,30],[5.324,40],[3.599,50],[2.483,60],[1.748,70],[1.252,80],[0.912,90],[0.674,100],[0.5,110]]\"},{\"portId\":\"TH2\",\"block\":\"TH2\",\"channel\":\"2\",\"name\":\"TH2 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"T1\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"T1\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[32.624,0],[25.381,5],[19.897,10],[15.711,15],[12.493,20],[10,25],[8.056,30],[5.324,40],[3.599,50],[2.483,60],[1.748,70],[1.252,80],[0.912,90],[0.674,100],[0.5,110]]\"},{\"portId\":\"TH1\",\"block\":\"TH1\",\"channel\":\"1\",\"name\":\"TH1 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"T2\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"T2\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[32.624,0],[25.381,5],[19.897,10],[15.711,15],[12.493,20],[10,25],[8.056,30],[5.324,40],[3.599,50],[2.483,60],[1.748,70],[1.252,80],[0.912,90],[0.674,100],[0.5,110]]\"},{\"portId\":\"IN4\",\"block\":\"IN4\",\"channel\":\"4\",\"name\":\"IN4 Signal\",\"figure\":\"Input\",\"portColor\":\"#fffffe\",\"wiredTo\":\"RPS1\",\"wiredToPort\":\"pressure\",\"signalType\":\"0-10V\",\"topicDevice\":\"RPS1\",\"topicKey\":\"pressure\",\"mapUnits\":\"V to bar\",\"map\":\"[[0.5,0],[3.5,6]]\"},{\"portId\":\"IN3\",\"block\":\"IN3\",\"channel\":\"3\",\"name\":\"IN3 Signal\",\"figure\":\"Input\",\"portColor\":\"#fffffe\",\"wiredTo\":\"RPS1\",\"wiredToPort\":\"temperature\",\"signalType\":\"0-10V\",\"topicDevice\":\"RPS1\",\"topicKey\":\"temperature\",\"mapUnits\":\"V to °C\",\"map\":\"[[0.5,0],[3.5,100]]\"},{\"portId\":\"IN2\",\"block\":\"IN2\",\"channel\":\"2\",\"name\":\"IN2 Signal\",\"figure\":\"Input\",\"portColor\":\"#fffffe\",\"wiredTo\":\"RPS2\",\"wiredToPort\":\"pressure\",\"signalType\":\"0-10V\",\"topicDevice\":\"RPS2\",\"topicKey\":\"pressure\",\"mapUnits\":\"V to bar\",\"map\":\"[[0.5,0],[3.5,6]]\"},{\"portId\":\"IN1\",\"block\":\"IN1\",\"channel\":\"1\",\"name\":\"IN1 Signal\",\"figure\":\"Input\",\"portColor\":\"#fffffe\",\"wiredTo\":\"RPS2\",\"wiredToPort\":\"temperature\",\"signalType\":\"0-10V\",\"topicDevice\":\"RPS2\",\"topicKey\":\"temperature\",\"mapUnits\":\"V to °C\",\"map\":\"[[0.5,0],[3.5,100]]\"}]",
        "payloadType": "json",
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "3950ac910f7e07dd"
            ]
        ]
    },
    {
        "id": "3950ac910f7e07dd",
        "type": "json",
        "z": "ca03066f6a7451f4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1170,
        "y": 220,
        "wires": [
            [
                "cbda5ee26f8a31c8"
            ]
        ]
    },
    {
        "id": "535dda9a07525c7e",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"portId\":\"TH8\",\"block\":\"TH8\",\"channel\":\"8\",\"name\":\"TH8 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"TS4\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"TS4\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[27.396,0],[17.999,10],[12.099,20],[10,25],[8.308,30],[5.819,40],[4.151,50],[3.012,60],[2.221,70],[1.663,80],[1.262,90],[0.97,100],[0.755,110]]\"},{\"portId\":\"TH7\",\"block\":\"TH7\",\"channel\":\"7\",\"name\":\"TH7 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"TS3\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"TS3\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[27.396,0],[17.999,10],[12.099,20],[10,25],[8.308,30],[5.819,40],[4.151,50],[3.012,60],[2.221,70],[1.663,80],[1.262,90],[0.97,100],[0.755,110]]\"},{\"portId\":\"TH6\",\"block\":\"TH6\",\"channel\":\"6\",\"name\":\"TH6 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"TS2\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"TS2\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[27.396,0],[17.999,10],[12.099,20],[10,25],[8.308,30],[5.819,40],[4.151,50],[3.012,60],[2.221,70],[1.663,80],[1.262,90],[0.97,100],[0.755,110]]\"},{\"portId\":\"TH5\",\"block\":\"TH5\",\"channel\":\"5\",\"name\":\"TH5 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"TS1\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"TS1\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[27.396,0],[17.999,10],[12.099,20],[10,25],[8.308,30],[5.819,40],[4.151,50],[3.012,60],[2.221,70],[1.663,80],[1.262,90],[0.97,100],[0.755,110]]\"},{\"portId\":\"TH4\",\"block\":\"TH4\",\"channel\":\"4\",\"name\":\"TH4 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"T4\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"T4\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[27.396,0],[17.999,10],[12.099,20],[10,25],[8.308,30],[5.819,40],[4.151,50],[3.012,60],[2.221,70],[1.663,80],[1.262,90],[0.97,100],[0.755,110]]\"},{\"portId\":\"TH3\",\"block\":\"TH3\",\"channel\":\"3\",\"name\":\"TH3 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"T3\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"T3\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[27.396,0],[17.999,10],[12.099,20],[10,25],[8.308,30],[5.819,40],[4.151,50],[3.012,60],[2.221,70],[1.663,80],[1.262,90],[0.97,100],[0.755,110]]\"},{\"portId\":\"TH2\",\"block\":\"TH2\",\"channel\":\"2\",\"name\":\"TH2 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"T1\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"T1\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[27.396,0],[17.999,10],[12.099,20],[10,25],[8.308,30],[5.819,40],[4.151,50],[3.012,60],[2.221,70],[1.663,80],[1.262,90],[0.97,100],[0.755,110]]\"},{\"portId\":\"TH1\",\"block\":\"TH1\",\"channel\":\"1\",\"name\":\"TH1 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"T2\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"T2\",\"topicKey\":\"temperature\",\"mapUnits\":\"kΩ to °C\",\"map\":\"[[42.739,-10],[27.396,0],[17.999,10],[12.099,20],[10,25],[8.308,30],[5.819,40],[4.151,50],[3.012,60],[2.221,70],[1.663,80],[1.262,90],[0.97,100],[0.755,110]]\"},{\"portId\":\"IN4\",\"block\":\"IN4\",\"channel\":\"4\",\"name\":\"IN4 Signal\",\"figure\":\"Input\",\"portColor\":\"#fffffe\",\"wiredTo\":\"RPS12\",\"wiredToPort\":\"pressure\",\"signalType\":\"0-10V\",\"topicDevice\":\"RPS12\",\"topicKey\":\"pressure\",\"mapUnits\":\"V to bar\",\"map\":\"[[0.5,3.5],[0,6]]\"},{\"portId\":\"IN3\",\"block\":\"IN3\",\"channel\":\"3\",\"name\":\"IN3 Signal\",\"figure\":\"Input\",\"portColor\":\"#fffffe\",\"wiredTo\":\"RPS12\",\"wiredToPort\":\"temperature\",\"signalType\":\"0-10V\",\"topicDevice\":\"RPS1\",\"topicKey\":\"temperature\",\"mapUnits\":\"V to °C\",\"map\":\"[[0.5,3.5],[0,100]]\"},{\"portId\":\"IN2\",\"block\":\"IN2\",\"channel\":\"2\",\"name\":\"IN2 Signal\",\"figure\":\"Input\",\"portColor\":\"#fffffe\",\"wiredTo\":\"RPS1\",\"wiredToPort\":\"pressure\",\"signalType\":\"0-10V\",\"topicDevice\":\"RPS1\",\"topicKey\":\"pressure\",\"mapUnits\":\"V to bar\",\"map\":\"[[0.5,3.5],[0,6]]\"},{\"portId\":\"IN1\",\"block\":\"IN1\",\"channel\":\"1\",\"name\":\"IN1 Signal\",\"figure\":\"Input\",\"portColor\":\"#fffffe\",\"wiredTo\":\"RPS1\",\"wiredToPort\":\"temperature\",\"signalType\":\"0-10V\",\"topicDevice\":\"RPS1\",\"topicKey\":\"temperature\",\"mapUnits\":\"V to °C\",\"map\":\"[[0.5,3.5],[0,100]]\"}]",
        "payloadType": "json",
        "x": 990,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e8313ffa69e8676b",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "59e47513c3972f75"
            ]
        ]
    },
    {
        "id": "59e47513c3972f75",
        "type": "exec",
        "z": "ca03066f6a7451f4",
        "command": "ti ",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 570,
        "y": 1060,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ec32ffa8.3f6f6",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "sudo iwlist wlan0 scan | grep ESSID | sed 's/ESSID://g;s/\"//g;s/^ *//;s/ *$//'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "scan",
        "x": 430,
        "y": 80,
        "wires": [
            [
                "e0d66c7a.647c9"
            ],
            [],
            []
        ]
    },
    {
        "id": "e0d66c7a.647c9",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "parseOptions",
        "func": "var ssids = msg.payload.split('\\n').filter(s => !!s)\n\nssids = [...new Set(ssids)];\n\nmsg.options = ssids\nmsg.payload = null\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 67,
        "wires": [
            [
                "617d9746.cbcbd8"
            ]
        ]
    },
    {
        "id": "a44c56bf.408c08",
        "type": "inject",
        "z": "f0a27113.452c7",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "ec32ffa8.3f6f6",
                "80ce12b.e5edff",
                "9aa43ac5.df3728"
            ]
        ]
    },
    {
        "id": "617d9746.cbcbd8",
        "type": "ui_dropdown",
        "z": "f0a27113.452c7",
        "name": "",
        "label": "Wifi",
        "tooltip": "",
        "place": "Select a WIFI",
        "group": "4d0f060d.dee7e8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "x": 830,
        "y": 67,
        "wires": [
            [
                "fc8462e2.6bc6e"
            ]
        ]
    },
    {
        "id": "f50dd378.27c7f",
        "type": "ui_button",
        "z": "f0a27113.452c7",
        "name": "",
        "group": "4d0f060d.dee7e8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Scan",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 230,
        "y": 181,
        "wires": [
            [
                "ec32ffa8.3f6f6"
            ]
        ]
    },
    {
        "id": "49307dfc.36fce4",
        "type": "ui_ui_control",
        "z": "f0a27113.452c7",
        "name": "onTab",
        "events": "all",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "ee0231ae.607de"
            ]
        ]
    },
    {
        "id": "ee0231ae.607de",
        "type": "switch",
        "z": "f0a27113.452c7",
        "name": "ifWifi",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Wifi",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 271,
        "y": 80,
        "wires": [
            [
                "ec32ffa8.3f6f6",
                "80ce12b.e5edff",
                "9aa43ac5.df3728"
            ]
        ]
    },
    {
        "id": "80ce12b.e5edff",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "ifconfig wlan0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "getInfo",
        "x": 430,
        "y": 181,
        "wires": [
            [
                "8a86d9a3.7ccca8"
            ],
            [],
            []
        ]
    },
    {
        "id": "8a86d9a3.7ccca8",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "parseInfo",
        "func": "var ip = msg.payload.match(/inet ([0-9\\.]+)/)[1]\nvar mask = msg.payload.match(/netmask ([0-9\\.]+)/)[1]\nvar broadcast = msg.payload.match(/broadcast ([0-9\\.]+)/)[1]\n\n\nnode.send({topic: 'ip', payload: ip})\nnode.send({topic: 'mask', payload: mask})\nnode.send({topic: 'broadcast', payload: broadcast})",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 168,
        "wires": [
            [
                "446ce308.eaab1c"
            ]
        ]
    },
    {
        "id": "446ce308.eaab1c",
        "type": "switch",
        "z": "f0a27113.452c7",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ip",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mask",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "broadcast",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 810,
        "y": 181,
        "wires": [
            [
                "d1ea316d.10c3d"
            ],
            [
                "8cadebd5.bedfe8"
            ],
            [
                "3592ebde.5596b4"
            ]
        ]
    },
    {
        "id": "d1ea316d.10c3d",
        "type": "ui_text",
        "z": "f0a27113.452c7",
        "group": "a1e7431b.229d5",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "IP",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 990,
        "y": 141,
        "wires": []
    },
    {
        "id": "8cadebd5.bedfe8",
        "type": "ui_text",
        "z": "f0a27113.452c7",
        "group": "a1e7431b.229d5",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Netmask",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 1000,
        "y": 181,
        "wires": []
    },
    {
        "id": "3592ebde.5596b4",
        "type": "ui_text",
        "z": "f0a27113.452c7",
        "group": "a1e7431b.229d5",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Broadcast",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 1000,
        "y": 221,
        "wires": []
    },
    {
        "id": "4e417c79.0e9454",
        "type": "ui_form",
        "z": "f0a27113.452c7",
        "name": "",
        "label": "Update",
        "group": "4d0f060d.dee7e8",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "SSID",
                "value": "ssid",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ssid": "",
            "password": ""
        },
        "payload": "",
        "submit": "UPDATE",
        "cancel": "RESET",
        "topic": "",
        "x": 1120,
        "y": 67,
        "wires": [
            [
                "562a8ec7.a7e76"
            ]
        ]
    },
    {
        "id": "fc8462e2.6bc6e",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "",
        "func": "\nmsg.payload = {ssid: msg.payload}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 67,
        "wires": [
            [
                "4e417c79.0e9454"
            ]
        ]
    },
    {
        "id": "562a8ec7.a7e76",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "getPassphrase",
        "func": "var data = msg.payload\n\nvar command = `wpa_passphrase \"${data.ssid}\" \"${data.password}\" | sed '/#psk=\".*\"/d'`\n \nmsg.payload = command\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 67,
        "wires": [
            [
                "50f3b384.d92f4c"
            ]
        ]
    },
    {
        "id": "50f3b384.d92f4c",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1481,
        "y": 67,
        "wires": [
            [
                "201a9fb.244ff6"
            ],
            [],
            []
        ]
    },
    {
        "id": "201a9fb.244ff6",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "updateWpasupplicant",
        "func": "var template = `sudo tee /etc/wpa_supplicant/wpa_supplicant.conf <<EOF\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=GB\n\n${msg.payload}\nEOF\\n\n`\n\nmsg.payload = template\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 60,
        "wires": [
            [
                "d288a86d.e0ba48"
            ]
        ]
    },
    {
        "id": "d288a86d.e0ba48",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "updateConf",
        "x": 1270,
        "y": 180,
        "wires": [
            [
                "ecc743df.05dd"
            ],
            [],
            []
        ]
    },
    {
        "id": "ecc743df.05dd",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "sudo wpa_cli -i wlan0 reconfigure",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "reconfigure",
        "x": 1450,
        "y": 167,
        "wires": [
            [
                "2e12d3e8.51947c"
            ],
            [],
            []
        ]
    },
    {
        "id": "2e12d3e8.51947c",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "showMessage",
        "func": "\nmsg.payload = msg.payload.trim() === 'OK' ? \"Wifi configuration updated successfully\" : \"Error while updating wifi configuration\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 154,
        "wires": [
            [
                "aa9d6712.91e718"
            ]
        ]
    },
    {
        "id": "aa9d6712.91e718",
        "type": "ui_toast",
        "z": "f0a27113.452c7",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1720,
        "y": 220,
        "wires": []
    },
    {
        "id": "d4e866c7.6c3958",
        "type": "ui_button",
        "z": "f0a27113.452c7",
        "name": "",
        "group": "a1e7431b.229d5",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "Menu",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "ec32ffa8.3f6f6",
                "80ce12b.e5edff",
                "9aa43ac5.df3728"
            ]
        ]
    },
    {
        "id": "9aa43ac5.df3728",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "iwgetid",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "getCurrentSSID",
        "x": 460,
        "y": 260,
        "wires": [
            [
                "6cff487b.f73b08"
            ],
            [],
            []
        ]
    },
    {
        "id": "4e1b74b8.84f51c",
        "type": "ui_text",
        "z": "f0a27113.452c7",
        "group": "a1e7431b.229d5",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SSID",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "6cff487b.f73b08",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "parseInfo",
        "func": "var ssid = msg.payload.match(/ESSID:\"([^\"]+)\"/)[1]\n\n\nnode.send({topic: 'ssid', payload: ssid})\n",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 247,
        "wires": [
            [
                "4e1b74b8.84f51c"
            ]
        ]
    },
    {
        "id": "3bf9d2e69a5772be",
        "type": "ui_template",
        "z": "f0a27113.452c7",
        "d": true,
        "group": "a1e7431b.229d5",
        "name": "Virtual Keyboard",
        "order": 6,
        "width": "6",
        "height": "1",
        "format": "<script> \n    \n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n; (function ($, window, document, undefined) {\n\n    // undefined is used here as the undefined global variable in ECMAScript 3 is\n    // mutable (ie. it can be changed by someone else). undefined isn't really being\n    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n    // can no longer be modified.\n\n    // window and document are passed through as local variable rather than global\n    // as this (slightly) quickens the resolution process and can be more efficiently\n    // minified (especially when both are regularly referenced in your plugin).\n\n    // Create the defaults once\n    var pluginName = \"jkeyboard\",\n        defaults = {\n            layout: \"english\",\n            input: $('#input'),\n            customLayouts: {\n                selectable: []\n            },\n        };\n\n\n    var function_keys = {\n        backspace: {\n            text: 'DEL',\n        },\n        return: {\n            text: 'Enter'\n        },\n        shift: {\n            text: 'Shift'\n        },\n        space: {\n            text: 'Space'\n        },\n        numeric_switch: {\n            text: '123',\n            command: function () {\n                this.createKeyboard('numeric');\n                this.events();\n            }\n        },\n        layout_switch: {\n            text: '<i class=\"fa fa-keyboard-o\" aria-hidden=\"true\"></i>',\n            command: function () {\n                var l = this.toggleLayout();\n                this.createKeyboard(l);\n                this.events();\n            }\n        },\n        character_switch: {\n            text: 'ABC',\n            command: function () {\n                this.createKeyboard(layout);\n                this.events();\n            }\n        },\n        symbol_switch: {\n            text: '#+=',\n            command: function () {\n                this.createKeyboard('symbolic');\n                this.events();\n            }\n        }\n    };\n\n\n    var layouts = {\n        selectable: ['azeri', 'english', 'russian','french', 'emoji'],\n        azeri: [\n            ['q', 'ü', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'ö', 'ğ'],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ı', 'ə'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'ç', 'ş', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        english: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        russian: [\n            ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х'],\n            ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n            ['shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        french: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        emoji: [\n            ['😀', '😁', '😂', '🤣', '😃', '😄', '😅', '😆', '😉', '😊',],\n            ['😋', '😎', '😍', '😘', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],            \n        numeric: [\n            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n            ['-', '/', ':', ';', '(', ')', '$', '&', '@', '\"'],\n            ['symbol_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n        ],\n        numbers_only: [\n            ['1', '2', '3',],\n            ['4', '5', '6',],\n            ['7', '8', '9',],\n            ['0', 'backspace'],\n        ],\n        symbolic: [\n            ['[', ']', '{', '}', '#', '%', '^', '*', '+', '='],\n            ['_', '\\\\', '|', '~', '<', '>'],\n            ['numeric_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n\n        ]\n    }\n\n    var shift = false, capslock = false, layout = 'english', layout_id = 0;\n\n    // The actual plugin constructor\n    function Plugin(element, options) {\n        this.element = element;\n        // jQuery has an extend method which merges the contents of two or\n        // more objects, storing the result in the first object. The first object\n        // is generally empty as we don't want to alter the default options for\n        // future instances of the plugin\n        this.settings = $.extend({}, defaults, options);\n        // Extend & Merge the cusom layouts\n        layouts = $.extend(true, {}, this.settings.customLayouts, layouts);\n        if (Array.isArray(this.settings.customLayouts.selectable)) {\n            $.merge(layouts.selectable, this.settings.customLayouts.selectable);\n        }\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function () {\n            layout = this.settings.layout;\n            this.createKeyboard(layout);\n            this.events();\n        },\n\n        setInput: function (newInputField) {\n            this.settings.input = newInputField;\n        },\n\n        createKeyboard: function (layout) {\n            shift = false;\n            capslock = false;\n\n            var keyboard_container = $('<ul/>').addClass('jkeyboard'),\n                me = this;\n\n            layouts[layout].forEach(function (line, index) {\n                var line_container = $('<li/>').addClass('jline');\n                line_container.append(me.createLine(line));\n                keyboard_container.append(line_container);\n            });\n\n            $(this.element).html('').append(keyboard_container);\n        },\n\n        createLine: function (line) {\n            var line_container = $('<ul/>');\n\n            line.forEach(function (key, index) {\n                var key_container = $('<li/>').addClass('jkey').data('command', key);\n\n                if (function_keys[key]) {\n                    key_container.addClass(key).html(function_keys[key].text);\n                }\n                else {\n                    key_container.addClass('letter').html(key);\n                }\n\n                line_container.append(key_container);\n            })\n\n            return line_container;\n        },\n\n        events: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift'),\n                space_key = $(this.element).find('.space'),\n                backspace_key = $(this.element).find('.backspace'),\n                return_key = $(this.element).find('.return'),\n\n                me = this,\n                fkeys = Object.keys(function_keys).map(function (k) {\n                    return '.' + k;\n                }).join(',');\n\n            letters.on('click', function () {\n                me.type((shift || capslock) ? $(this).text().toUpperCase() : $(this).text());\n            });\n\n            space_key.on('click', function () {\n                me.type(' ');\n            });\n\n            return_key.on('click', function () {\n                me.type(\"\\n\");\n                me.settings.input.parents('form').submit();\n            });\n\n            backspace_key.on('click', function () {\n                me.backspace();\n            });\n\n            shift_key.on('click', function () {\n                if (capslock) {\n                    me.toggleShiftOff();\n                    capslock = false;\n                } else {\n                    me.toggleShiftOn();\n                }\n            }).on('dblclick', function () {\n                capslock = true;\n            });\n\n\n            $(fkeys).on('click', function () {\n                var command = function_keys[$(this).data('command')].command;\n                if (!command) return;\n\n                command.call(me);\n            });\n        },\n\n        type: function (key) {\n            var input = this.settings.input,\n                val = input.val(),\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n\n            var max_length = $(input).attr(\"maxlength\");\n            if (start == end && end == val.length) {\n                if (!max_length || val.length < max_length) {\n                    input.val(val + key);\n                    input.change()\n                    $('#vkeyname').text(val + key)\n                }\n            } else {\n                if (input_node.type == \"text\"){\n                    var new_string = this.insertToString(start, end, val, key);\n                    input.val(new_string);\n                    start++;\n                    end = start;\n                    input_node.setSelectionRange(start, end);\n                }else{\n                    input.val(val + key);\n                }\n                input.change()\n                $('#vkeyname').text(val + key)\n                \n            }\n            input.trigger('focus');\n\n            if (shift && !capslock) {\n                this.toggleShiftOff();\n            }\n        },\n\n        backspace: function () {\n            var input = this.settings.input,\n                val = input.val();\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n            if (input.type == \"text\"){\n                input.val(val.slice(0, start-1) + val.slice(start))\n                input_node.setSelectionRange(start-1, start-1);\n                console.log(val)\n                $('#vkeyname').text(val)\n            }else{\n                input.val(val.slice(0,-1))\n                $('#vkeyname').text(val.slice(0,-1))\n            }\n            input.change()\n            input.focus()\n        },\n\n        toggleShiftOn: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.addClass('uppercase');\n            shift_key.addClass('active')\n            shift = true;\n        },\n\n        toggleShiftOff: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.removeClass('uppercase');\n            shift_key.removeClass('active');\n            shift = false;\n        },\n\n        toggleLayout: function () {\n            layout_id = layout_id || 0;\n            var plain_layouts = layouts.selectable;\n            layout_id++;\n\n            var current_id = layout_id % plain_layouts.length;\n            var SelectedLayoutName = plain_layouts[current_id];\n            $('#vkeyname').text('V-Keyboard ' + SelectedLayoutName )\n            return plain_layouts[current_id];\n        },\n\n        insertToString: function (start, end, string, insert_string) {\n            return string.substring(0, start) + insert_string + string.substring(end, string.length);\n        }\n    };\n\n        /*\n\t\t// A really lightweight plugin wrapper around the constructor,\n\t\t// preventing against multiple instantiations\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\n\t\t\t\t\t\t\t\t$.data( this, \"plugin_\" + pluginName, new Plugin( this, options ) );\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n        */\n        var methods = {\n            init: function(options) {\n                if (!this.data(\"plugin_\" + pluginName)) {\n                    this.data(\"plugin_\" + pluginName, new Plugin(this, options));\n                }\n            },\n\t\t\tsetInput: function(content) {\n\t\t\t\tthis.data(\"plugin_\" + pluginName).setInput($(content));\n            },\n            setLayout: function(layoutname) {\n                // change layout if it is not match current\n                object = this.data(\"plugin_\" + pluginName);\n                if (typeof(layouts[layoutname]) !== 'undefined' && object.settings.layout != layoutname) {\n                    object.settings.layout = layoutname;\n                    object.createKeyboard(layoutname);\n                    object.events();\n                };\n            },\n        };\n\n\t\t$.fn[pluginName] = function (methodOrOptions) {\n            if (methods[methodOrOptions]) {\n                return methods[methodOrOptions].apply(this.first(), Array.prototype.slice.call( arguments, 1));\n            } else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\n                // Default to \"init\"\n                return methods.init.apply(this.first(), arguments);\n            } else {\n                $.error('Method ' +  methodOrOptions + ' does not exist on jQuery.tooltip');\n            }\n        };\n\n})(jQuery, window, document);\n</script>\n<style>\n    .jkeyboard {\n  display: inline-block;\n}\n.jkeyboard, .jkeyboard .jline, .jkeyboard .jline ul {\n  display: block;\n  margin: 0;\n  padding: 0;\n}\n.jkeyboard .jline {\n  text-align: center;\n  margin-left: -14px;\n}\n.jkeyboard .jline ul li {\n  font-family: arial, sans-serif;\n  font-size: 20px;\n  display: inline-block;\n  border: 1px solid #468db3;\n  -webkit-box-shadow: 0 0 3px #468db3;\n  -webkit-box-shadow: inset 0 0 3px #468db3;\n  margin: 5px 0 1px 6px;\n  color: #000000;\n  border-radius: 5px;\n  width: 52px;\n  height: 52px;\n  box-sizing: border-box;\n  text-align: center;\n  line-height: 52px;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: -moz-none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.jkeyboard .jline ul li.uppercase {\n  text-transform: uppercase;\n}\n.jkeyboard .jline ul li:hover, .jkeyboard .jline ul li:active {\n  background-color: #185a82;\n}\n.jkeyboard .jline .return {\n  width: 80px;\n}\n.jkeyboard .jline .space {\n  width: 366px;\n}\n.jkeyboard .jline .numeric_switch {\n  width: 65px;\n}\n.jkeyboard .jline .layout_switch {\n}\n.jkeyboard .jline .shift {\n  width: 60px;\n}\n.jkeyboard .jline .backspace {\n  width: 69px;\n}\n</style>\n\n\n\n\n<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n.nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    opacity:0.99;\n    z-index: 100; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n/* Modal Content */\n.modal-content {\n    position: fixed;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 0;\n    bottom: 0%;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    border: 1px solid #888;\n    width: fit-content;\n    max-width: 100%;\n    max-height: 100%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: animate;\n    -webkit-animation-duration: 0.4s;\n    animation-name: animate;\n    animation-duration: 0.4s\n}\n\n/* Add Animation */\n@-webkit-keyframes animate {\n    from {bottom:100%; opacity:0} \n    to {bottom:0%; opacity:1}\n}\n\n@keyframes animate {\n    from {bottom:100%; opacity:0}\n    to {bottom:0%; opacity:1}\n}\n\n/* The Close Button */\n.close {\n    color: black;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-header {\n    padding: 2px 16px;\n    background-color: aliceblue;\n    color: white;\n}\n\n.modal-body {padding: 2px 16px;}\n\n.modal-footer {\n    padding: 2px 16px;\n    background-color: #5cb85c;\n    color: white;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"myModal\" class=\"modal\">\n\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n      <div class=\"modal-header\">\n      <span class=\"close\" onclick=\"closeModal()\">&times;</span>\n      <h2 id=\"vkeyname\" style=\"background-color: aliceblue !important; color: black !important; text-align: center; min-height: 30px;\">V-Keyboard</h2>\n    </div>\n    <div class=\"modal-body\">\n        <div id=\"keyboard\"></div>\n        <div>\n        </div>\n    </div>\n  </div>\n</div>\n\n\n<script>\n    // Get the modal\nvar modal = document.getElementById('myModal');\n\n/*\n$('input[type=text]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"english\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n\n$('input[type=number]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"numbers_only\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n*/\n\nvar inputTags;\nvar inputType;\n\nvar getinputs = function() {\n    inputTags = document.getElementsByTagName(\"input\");\n    console.log(inputTags)\n    for (var i = 0; i < inputTags.length; i++) {\n        inputTags[i].addEventListener('click', openModal, false)\n    }\n}\n\nsetTimeout(function(){ getinputs(); }, 1000);\n\nvar inputTarget;\n\nvar openModal = function() {\n    inputType = event.target.type\n    inputTarget = event.target\n    var layoutName;\n    if (inputType == \"number\"){\n        //inputTarget.type = \"number\" //hack because chrome doesn't allow setselection in number inputs\n        //inputTarget.value = \"\"\n        layoutName = \"numbers_only\"\n    }else{\n        layoutName = \"english\"\n    }\n    $('#vkeyname').text(event.target.value)\n    $('#keyboard').unbind().removeData();\n    modal.style.display = \"block\";\n    $('#keyboard').jkeyboard({\n        layout: layoutName,\n        input: $('#'+$(this).attr('id'))\n    });\n}\n\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\n//span.onclick = function(event) {\n  //closeModal()\n//}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    var source = event.target;\n    if (source == modal || source == span) {\n        closeModal(source)\n    }\n};\n\nvar closeModal = function(source){\n    //console.log(\"closing\")\n    modal.style.display = \"none\";\n   \n    if (inputType == \"number\"){\n        inputTarget.type = \"number\" //hack because chrome doesn't allow selectionstart on number inputs\n    }\n}\n\n</script>\n<script>\n\nvar clickState = 1;\nvar btn = document.querySelector('.VK');\n\nbtn.addEventListener('click', function(){\n\n  if (clickState == 0) {\n    this.textContent = 'V-KeyBoard On';\n    modal = document.getElementById('myModal');\n    clickState = 1;\n  } else {\n    this.textContent = 'V-KeyBoard Off';\n    modal = document.getElementById('empty');\n    clickState = 0;\n  }\n\n});\n</script>\n\n<style>\n.VK{\n    position: fixed;\n    top: 60px;\n    right: 20px;\n    height: 30px;\n}\n</style>\n\n<div id=\"empty\"></div>\n<button style=\"display:none;\" class=\"VK\">V-KeyBoard On</button> ",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4bfec146cfe60f8f",
        "type": "comment",
        "z": "f0a27113.452c7",
        "name": "WiFi Flow",
        "info": "https://flows.nodered.org/flow/c3c7a393b05f6383b888bdee39aa5fa5",
        "x": 220,
        "y": 380,
        "wires": []
    },
    {
        "id": "71684eb4cd5d1dd6",
        "type": "comment",
        "z": "f0a27113.452c7",
        "name": "Setup WiFi Repeater",
        "info": "https://raspberrypi.stackexchange.com/questions/89803/access-point-as-wifi-router-repeater-optional-with-bridge/89804#89804",
        "x": 250,
        "y": 440,
        "wires": []
    },
    {
        "id": "0f32252c41e0be2b",
        "type": "ui_button",
        "z": "f0a27113.452c7",
        "name": "",
        "group": "f405b29b0175ff69",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Scan",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "topicType": "str",
        "x": 270,
        "y": 660,
        "wires": [
            [
                "fb378810ca61deca"
            ]
        ]
    },
    {
        "id": "aaf7e5025b03a178",
        "type": "arp",
        "z": "f0a27113.452c7",
        "name": "ARP",
        "macs": "",
        "x": 350,
        "y": 820,
        "wires": [
            [
                "49e19b144ab24320",
                "0c2968c1ed40a532"
            ]
        ]
    },
    {
        "id": "49e19b144ab24320",
        "type": "debug",
        "z": "f0a27113.452c7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 740,
        "wires": []
    },
    {
        "id": "28eb25ef79e0a8ae",
        "type": "inject",
        "z": "f0a27113.452c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "desktopjson",
                "v": "desktop.desktop1",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"JSON Editor\",\"body\":\"\"}",
        "payloadType": "json",
        "x": 110,
        "y": 660,
        "wires": [
            [
                "fb378810ca61deca"
            ]
        ]
    },
    {
        "id": "ebf040adb1653134",
        "type": "ui_table",
        "z": "f0a27113.452c7",
        "group": "f405b29b0175ff69",
        "name": "",
        "order": 1,
        "width": "12",
        "height": "6",
        "columns": [
            {
                "field": "ip",
                "title": "Ip Address",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "mac",
                "title": "MAC Address",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "hostname",
                "title": "Hostname",
                "width": "17%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "iface",
                "title": "Interface",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "software",
                "title": "NR",
                "width": "6%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "networkId",
                "title": "Network",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "node",
                "title": "Node",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1810,
        "y": 780,
        "wires": [
            [
                "10a6ec5e13bc2098"
            ]
        ]
    },
    {
        "id": "8cc21653dd45cb08",
        "type": "http request",
        "z": "f0a27113.452c7",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "senderr": false,
        "x": 1110,
        "y": 860,
        "wires": [
            [
                "e7fe2e3ccdf875cd"
            ]
        ]
    },
    {
        "id": "80396b9abad16578",
        "type": "split",
        "z": "f0a27113.452c7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 820,
        "wires": [
            [
                "3c0a8a028e8a06b3",
                "919297faf1ee9b2f"
            ]
        ]
    },
    {
        "id": "3c0a8a028e8a06b3",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "",
        "func": "\n\nvar id = msg.payload.ip.replace(/\\./g,\"_\");\n\nfor (var k in msg.payload) {\n    flow.set(\"iplist.\" + id + \".\" + k, msg.payload[k]);\n}\n\nmsg.url = \"http://\" + msg.payload.ip + \":1880\";\nmsg.info = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 860,
        "wires": [
            [
                "460ed44638eec8f4"
            ]
        ]
    },
    {
        "id": "fbdf280a3bc325cb",
        "type": "debug",
        "z": "f0a27113.452c7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 960,
        "wires": []
    },
    {
        "id": "e7fe2e3ccdf875cd",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "",
        "func": "if (msg.payload.indexOf(\"Node-RED\")>-1) {\n    \n    var id = msg.info.ip.replace(/\\./g,\"_\");\n    flow.set(\"iplist.\" + id + \".software\" , \"NR\");\n    return msg;\n}\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 860,
        "wires": [
            [
                "fbdf280a3bc325cb",
                "b56ab62781dd622b",
                "01ad601a4ebe29ba"
            ]
        ]
    },
    {
        "id": "0c2968c1ed40a532",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "save",
        "func": "\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 820,
        "wires": [
            [
                "80396b9abad16578"
            ]
        ]
    },
    {
        "id": "22b2f8870ce4412b",
        "type": "trigger",
        "z": "f0a27113.452c7",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "0.9",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1330,
        "y": 780,
        "wires": [
            [
                "2f59f42f9fb5d2d6"
            ]
        ]
    },
    {
        "id": "2f59f42f9fb5d2d6",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "",
        "func": "\nvar oot=[];\nvar iplist = flow.get(\"iplist\");\n\nfor (var k in iplist) {\n    oot.push(iplist[k]);\n}\nmsg.payload=oot;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 780,
        "wires": [
            [
                "e3c5023f86c0261a"
            ]
        ]
    },
    {
        "id": "eccc347b167ddc8e",
        "type": "inject",
        "z": "f0a27113.452c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 740,
        "y": 680,
        "wires": [
            [
                "a40d16850ad6923f"
            ]
        ]
    },
    {
        "id": "a40d16850ad6923f",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "nmap -sn",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1060,
        "y": 680,
        "wires": [
            [
                "ddb55926b3937562"
            ],
            [],
            []
        ]
    },
    {
        "id": "1b46a984054f6acf",
        "type": "debug",
        "z": "f0a27113.452c7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 640,
        "wires": []
    },
    {
        "id": "919297faf1ee9b2f",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "",
        "func": "\nmsg.info = msg.payload;\nmsg.payload = msg.payload.ip;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 740,
        "wires": [
            [
                "1068fdc8a59eef37"
            ]
        ]
    },
    {
        "id": "1068fdc8a59eef37",
        "type": "delay",
        "z": "f0a27113.452c7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 740,
        "wires": [
            [
                "a40d16850ad6923f"
            ]
        ]
    },
    {
        "id": "ddb55926b3937562",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "",
        "func": "if (msg.payload.indexOf(\"report for \")>-1) {\n    \n    var host = msg.payload.split(\"report for \")[1].trim();\n    \n    if (host.indexOf(\" \")>-1) { host = host.substr(0,host.indexOf(\" \")); }\n    if (host.indexOf(\"\\n\")>-1) { host = host.split(\"\\n\")[0]; }\n    \n    \n    //Nmap scan report for HelenRaesiPhone (192.168.0.10)\n    \n    var id = msg.info.ip.replace(/\\./g,\"_\");\n    flow.set(\"iplist.\" + id + \".hostname\" , host);\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 680,
        "wires": [
            [
                "1b46a984054f6acf",
                "dd295d1c6306b675"
            ]
        ]
    },
    {
        "id": "460ed44638eec8f4",
        "type": "delay",
        "z": "f0a27113.452c7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 950,
        "y": 860,
        "wires": [
            [
                "8cc21653dd45cb08"
            ]
        ]
    },
    {
        "id": "78186f32b10a0120",
        "type": "link in",
        "z": "f0a27113.452c7",
        "name": "",
        "links": [
            "b56ab62781dd622b",
            "dd295d1c6306b675",
            "75e8f922fb6f5dd3",
            "1e968a389c949351"
        ],
        "x": 1215,
        "y": 780,
        "wires": [
            [
                "22b2f8870ce4412b"
            ]
        ]
    },
    {
        "id": "b56ab62781dd622b",
        "type": "link out",
        "z": "f0a27113.452c7",
        "name": "",
        "mode": "link",
        "links": [
            "78186f32b10a0120"
        ],
        "x": 1455,
        "y": 860,
        "wires": []
    },
    {
        "id": "dd295d1c6306b675",
        "type": "link out",
        "z": "f0a27113.452c7",
        "name": "",
        "mode": "link",
        "links": [
            "78186f32b10a0120"
        ],
        "x": 1375,
        "y": 680,
        "wires": []
    },
    {
        "id": "9ce929088a84c329",
        "type": "http request",
        "z": "f0a27113.452c7",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "senderr": false,
        "x": 1130,
        "y": 1020,
        "wires": [
            [
                "a5fe7c72aebd3a50",
                "66f3ba1e58e05c32"
            ]
        ]
    },
    {
        "id": "01ad601a4ebe29ba",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "",
        "func": "\n\n\nmsg.url = msg.url + \"/about\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1020,
        "wires": [
            [
                "9ce929088a84c329"
            ]
        ]
    },
    {
        "id": "a5fe7c72aebd3a50",
        "type": "function",
        "z": "f0a27113.452c7",
        "name": "",
        "func": "if (msg.payload.indexOf(\"{\")>-1) {\n    \n    var facts = JSON.parse(msg.payload);\n    var id = msg.info.ip.replace(/\\./g,\"_\");    \n        \n    for (var k in facts) {\n        flow.set(\"iplist.\" + id + \".\" + k, facts[k]);\n    }\n    \n    return msg;\n}\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1020,
        "wires": [
            [
                "1e968a389c949351"
            ]
        ]
    },
    {
        "id": "1e968a389c949351",
        "type": "link out",
        "z": "f0a27113.452c7",
        "name": "",
        "mode": "link",
        "links": [
            "78186f32b10a0120"
        ],
        "x": 1475,
        "y": 1020,
        "wires": []
    },
    {
        "id": "66f3ba1e58e05c32",
        "type": "debug",
        "z": "f0a27113.452c7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1100,
        "wires": []
    },
    {
        "id": "fb378810ca61deca",
        "type": "trigger",
        "z": "f0a27113.452c7",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 190,
        "y": 740,
        "wires": [
            [
                "06efc19aa25410af"
            ]
        ]
    },
    {
        "id": "06efc19aa25410af",
        "type": "trigger",
        "z": "f0a27113.452c7",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 180,
        "y": 820,
        "wires": [
            [
                "aaf7e5025b03a178"
            ]
        ]
    },
    {
        "id": "e3c5023f86c0261a",
        "type": "rbe",
        "z": "f0a27113.452c7",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1670,
        "y": 780,
        "wires": [
            [
                "ebf040adb1653134"
            ]
        ]
    },
    {
        "id": "d154ae08a4044006",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "sudo dhclient -v wlan0",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 960,
        "y": 360,
        "wires": [
            [
                "f36908153d2b35bd"
            ],
            [
                "f36908153d2b35bd"
            ],
            []
        ]
    },
    {
        "id": "67a89ee157dec3a9",
        "type": "inject",
        "z": "f0a27113.452c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 730,
        "y": 360,
        "wires": [
            [
                "d154ae08a4044006"
            ]
        ]
    },
    {
        "id": "f36908153d2b35bd",
        "type": "debug",
        "z": "f0a27113.452c7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 360,
        "wires": []
    },
    {
        "id": "44cc50913b920667",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "sudo ifconfig wlan0 down",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1710,
        "y": 360,
        "wires": [
            [
                "6814658b9bed5f44"
            ],
            [
                "6814658b9bed5f44"
            ],
            [
                "d8af7c2ac10d9072"
            ]
        ]
    },
    {
        "id": "7f73bbe2c21f14b5",
        "type": "inject",
        "z": "f0a27113.452c7",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 06 * * *",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1480,
        "y": 360,
        "wires": [
            [
                "44cc50913b920667"
            ]
        ]
    },
    {
        "id": "6814658b9bed5f44",
        "type": "debug",
        "z": "f0a27113.452c7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 360,
        "wires": []
    },
    {
        "id": "c08515d3a8691a14",
        "type": "exec",
        "z": "f0a27113.452c7",
        "command": "sudo ifconfig wlan0 up",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1700,
        "y": 460,
        "wires": [
            [
                "d3a2b637398e0ad6"
            ],
            [
                "d3a2b637398e0ad6"
            ],
            []
        ]
    },
    {
        "id": "5d54a793b0d8c5c9",
        "type": "inject",
        "z": "f0a27113.452c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 1470,
        "y": 460,
        "wires": [
            [
                "c08515d3a8691a14"
            ]
        ]
    },
    {
        "id": "d3a2b637398e0ad6",
        "type": "debug",
        "z": "f0a27113.452c7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 460,
        "wires": []
    },
    {
        "id": "d8af7c2ac10d9072",
        "type": "delay",
        "z": "f0a27113.452c7",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1520,
        "y": 400,
        "wires": [
            [
                "c08515d3a8691a14"
            ]
        ]
    },
    {
        "id": "10a6ec5e13bc2098",
        "type": "debug",
        "z": "f0a27113.452c7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 780,
        "wires": []
    },
    {
        "id": "dd1f12e346b81e3c",
        "type": "inject",
        "z": "f0a27113.452c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"timestamp\":1659579385007,\"value\":0.52},{\"timestamp\":1659579385036,\"value\":0.52},{\"timestamp\":1659579385065,\"value\":0.53},{\"timestamp\":1659579385094,\"value\":0.52},{\"timestamp\":1659579385123,\"value\":0.52},{\"timestamp\":1659579385152,\"value\":0.52},{\"timestamp\":1659579385182,\"value\":0.52},{\"timestamp\":1659579385211,\"value\":0.52},{\"timestamp\":1659579385240,\"value\":0.51},{\"timestamp\":1659579385268,\"value\":0.5},{\"timestamp\":1659579385298,\"value\":0.51},{\"timestamp\":1659579385327,\"value\":0.51},{\"timestamp\":1659579385356,\"value\":0.52},{\"timestamp\":1659579385385,\"value\":0.53},{\"timestamp\":1659579385414,\"value\":0.52},{\"timestamp\":1659579385443,\"value\":0.52},{\"timestamp\":1659579385472,\"value\":0.51},{\"timestamp\":1659579385501,\"value\":0.51},{\"timestamp\":1659579385531,\"value\":0.51},{\"timestamp\":1659579385559,\"value\":0.51},{\"timestamp\":1659579385589,\"value\":0.51},{\"timestamp\":1659579385622,\"value\":0.52},{\"timestamp\":1659579385661,\"value\":0.51},{\"timestamp\":1659579385700,\"value\":0.51},{\"timestamp\":1659579385730,\"value\":0.51},{\"timestamp\":1659579385808,\"value\":10.76},{\"timestamp\":1659579385838,\"value\":10.76},{\"timestamp\":1659579385867,\"value\":10.76},{\"timestamp\":1659579385896,\"value\":10.76},{\"timestamp\":1659579385925,\"value\":10.76},{\"timestamp\":1659579385955,\"value\":10.76},{\"timestamp\":1659579385986,\"value\":10.76},{\"timestamp\":1659579386013,\"value\":10.76},{\"timestamp\":1659579386042,\"value\":10.76},{\"timestamp\":1659579386071,\"value\":10.76},{\"timestamp\":1659579386100,\"value\":10.76},{\"timestamp\":1659579386333,\"value\":1.58},{\"timestamp\":1659579386362,\"value\":1.04},{\"timestamp\":1659579386392,\"value\":0.97},{\"timestamp\":1659579386426,\"value\":0.96},{\"timestamp\":1659579386464,\"value\":0.72},{\"timestamp\":1659579386503,\"value\":0.64},{\"timestamp\":1659579386535,\"value\":0.63},{\"timestamp\":1659579386565,\"value\":0.58},{\"timestamp\":1659579386595,\"value\":0.55},{\"timestamp\":1659579386624,\"value\":0.56},{\"timestamp\":1659579386654,\"value\":0.55},{\"timestamp\":1659579386683,\"value\":0.54},{\"timestamp\":1659579386713,\"value\":0.53},{\"timestamp\":1659579386742,\"value\":0.53}]",
        "payloadType": "json",
        "x": 1860,
        "y": 1100,
        "wires": [
            [
                "fd4d4eaadf0381c1"
            ]
        ]
    },
    {
        "id": "fd4d4eaadf0381c1",
        "type": "change",
        "z": "f0a27113.452c7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "readingsHistory.local.mcnode1.dat.dp1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "readings.local.mcnode1.dat.dp1.value",
                "pt": "global",
                "to": "0.53",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2080,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "98881954733ca024",
        "type": "function",
        "z": "2841b6e7647d36d7",
        "name": "InfluxDB",
        "func": "\nvar oot = {};\nvar tags = {};\nvar tops = msg.topic.split(\"/\");\n\n\n\n\nif (!tops[4]) { return null; }\n\nvar net = global.get(\"networkId\") || \"local\";\nnet = (tops[0] == \"local\" ? net : tops[0])\n\ntags.node = tops[1];\ntags.device = tops[2];\ntags.network = net;\ntags.vargroup = tops[3];\ntags.varkey = tops[4];\n\n//tags.title = flow.get(\"title.\" + tops[2]) || tops[2];\n\nvar msg1={};\nmsg1.topic = \"\"+msg.topic;\n\ntry {\n\n    \n\n    if (isNaN(msg.payload)) { msg1.payload = '' + msg.payload  }\n    else { msg1.payload = parseFloat(msg.payload); }\n    \n\n    oot[tops[3] + '_' + tops[4]] = msg1.payload;\n\n    msg1.measurement = net + '_' + tops[1] + '_' + tops[2];\n    msg1.payload = [oot, tags];\n\n    return msg1;\n\n\n\n\n} catch { return null; }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 320,
        "wires": [
            [
                "97f279a8ca0407ef",
                "42b1841e8767677e"
            ]
        ]
    },
    {
        "id": "f1695f2eed7ca947",
        "type": "subflow:344fa160119932f8",
        "z": "2841b6e7647d36d7",
        "name": "",
        "x": 540,
        "y": 320,
        "wires": [
            [
                "5fbbdb33f1ed7372",
                "98881954733ca024"
            ]
        ]
    },
    {
        "id": "2143c6002c05358f",
        "type": "link in",
        "z": "2841b6e7647d36d7",
        "name": "Influx",
        "links": [
            "adae7e8a.85a74"
        ],
        "x": 235,
        "y": 340,
        "wires": [
            [
                "de4f96d579288586",
                "7695a6aa86ef0678"
            ]
        ]
    },
    {
        "id": "de4f96d579288586",
        "type": "switch",
        "z": "2841b6e7647d36d7",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/raw/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "local/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/dat/t",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/dat/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/stat/",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 370,
        "y": 340,
        "wires": [
            [],
            [],
            [
                "6a78b11bbdf4dd35"
            ],
            [
                "f1695f2eed7ca947"
            ],
            [
                "f1695f2eed7ca947"
            ],
            [
                "d1d98a47047011c0"
            ]
        ]
    },
    {
        "id": "97f279a8ca0407ef",
        "type": "influxdb out",
        "z": "2841b6e7647d36d7",
        "d": true,
        "influxdb": "6b9c37ce7d1d32ec",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "heatweb",
        "bucket": "swanseashed",
        "x": 1180,
        "y": 320,
        "wires": []
    },
    {
        "id": "d1d98a47047011c0",
        "type": "subflow:3bcc1796d56e0e4a",
        "z": "2841b6e7647d36d7",
        "name": "",
        "x": 540,
        "y": 380,
        "wires": [
            [
                "98881954733ca024",
                "5fbbdb33f1ed7372"
            ]
        ]
    },
    {
        "id": "e9451aef60c24033",
        "type": "catch",
        "z": "2841b6e7647d36d7",
        "name": "",
        "scope": [
            "97f279a8ca0407ef"
        ],
        "uncaught": false,
        "x": 1230,
        "y": 600,
        "wires": [
            [
                "a6ee5f810f4ef4fb",
                "b4c02552369f7f45"
            ]
        ]
    },
    {
        "id": "906238386ccadf41",
        "type": "trigger",
        "z": "2841b6e7647d36d7",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "topic",
        "topic": "topic",
        "outputs": 1,
        "x": 1150,
        "y": 500,
        "wires": [
            [
                "97f279a8ca0407ef"
            ]
        ]
    },
    {
        "id": "b4c02552369f7f45",
        "type": "switch",
        "z": "2841b6e7647d36d7",
        "name": "",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 500,
        "wires": [
            [
                "906238386ccadf41"
            ]
        ]
    },
    {
        "id": "d8747c0cfdc0e1c1",
        "type": "comment",
        "z": "2841b6e7647d36d7",
        "name": "Try resending dropped messages",
        "info": "",
        "x": 990,
        "y": 600,
        "wires": []
    },
    {
        "id": "a6ee5f810f4ef4fb",
        "type": "debug",
        "z": "2841b6e7647d36d7",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 600,
        "wires": []
    },
    {
        "id": "7695a6aa86ef0678",
        "type": "debug",
        "z": "2841b6e7647d36d7",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 460,
        "wires": []
    },
    {
        "id": "6a78b11bbdf4dd35",
        "type": "rbe",
        "z": "2841b6e7647d36d7",
        "name": "",
        "func": "deadbandEq",
        "gap": "0.25",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 560,
        "y": 240,
        "wires": [
            [
                "e1a4a5a7741f6e6a"
            ]
        ]
    },
    {
        "id": "921354645a9b80bb",
        "type": "inject",
        "z": "2841b6e7647d36d7",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 560,
        "y": 180,
        "wires": [
            [
                "6a78b11bbdf4dd35"
            ]
        ]
    },
    {
        "id": "e1a4a5a7741f6e6a",
        "type": "switch",
        "z": "2841b6e7647d36d7",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 710,
        "y": 240,
        "wires": [
            [
                "98881954733ca024",
                "5fbbdb33f1ed7372"
            ]
        ]
    },
    {
        "id": "42b1841e8767677e",
        "type": "debug",
        "z": "2841b6e7647d36d7",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 260,
        "wires": []
    },
    {
        "id": "c1e9834df04469c1",
        "type": "mqtt out",
        "z": "2841b6e7647d36d7",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ed2df76d3b6a6aa",
        "x": 970,
        "y": 380,
        "wires": []
    },
    {
        "id": "5fbbdb33f1ed7372",
        "type": "function",
        "z": "2841b6e7647d36d7",
        "name": "userProperties",
        "func": "try { \n    \n    var tops = msg.topic.split(\"/\");\n\n    var title = global.get(\"readings.local.\" + tops[2] + \".\" + tops[3] + \".\" + tops[4] + \".title\"); \n    \n    if (title) {\n        \n        msg.userProperties = {\"title\": title};\n        // userProperties\n    }\n}\ncatch { }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "c1e9834df04469c1"
            ]
        ]
    },
    {
        "id": "7ef41dc1.ed2e0c",
        "type": "mbus-out",
        "z": "789aa767.91c36",
        "name": "",
        "client": "618faf057d845369",
        "x": 471,
        "y": 242,
        "wires": [
            [
                "cfe1fe5a.4377f",
                "0ffde9328bdc43d2"
            ]
        ]
    },
    {
        "id": "cfe1fe5a.4377f",
        "type": "debug",
        "z": "789aa767.91c36",
        "name": "",
        "active": false,
        "console": false,
        "complete": "false",
        "x": 630,
        "y": 180,
        "wires": []
    },
    {
        "id": "b09b5389.e16f18",
        "type": "mbus-controller",
        "z": "789aa767.91c36",
        "name": "",
        "client": "618faf057d845369",
        "x": 511,
        "y": 303,
        "wires": [
            [
                "950250cd.ba0db8",
                "ec1a5b76.fe6a68",
                "682462aa.67061c"
            ]
        ]
    },
    {
        "id": "ce0c2ab.6ef14d8",
        "type": "inject",
        "z": "789aa767.91c36",
        "name": "scan",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "scan",
        "payload": "",
        "payloadType": "str",
        "x": 122,
        "y": 72,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "950250cd.ba0db8",
        "type": "debug",
        "z": "789aa767.91c36",
        "name": "",
        "active": false,
        "console": false,
        "complete": "false",
        "x": 762,
        "y": 361,
        "wires": []
    },
    {
        "id": "4415ab35.a140dc",
        "type": "inject",
        "z": "789aa767.91c36",
        "name": "Read ID 1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "getDevice",
        "payload": "{\"address\": 1}",
        "payloadType": "json",
        "x": 129,
        "y": 146,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "46f5ca76.564844",
        "type": "inject",
        "z": "789aa767.91c36",
        "name": "Get Devices",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "getDevices",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "topic": "getDevices",
        "payload": "",
        "payloadType": "str",
        "x": 145,
        "y": 220,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "ec1a5b76.fe6a68",
        "type": "ui_template",
        "z": "789aa767.91c36",
        "group": "cbd3bd44.834398",
        "name": "mbus-table",
        "order": 0,
        "width": "14",
        "height": "10",
        "format": "<table>\n  <tr>\n    <th>ID</th>\n    <th>Primary ID</th>\n    <th>Info</th>\n    <th>Data</th>\n    <th>Last Update</th>\n    <th>Status</th>\n  </tr>\n  <tr style=\"cursor:pointer;\" ng-click=\"showData(device)\" ng-repeat=\"(id, device) in devices\">\n    <td>{{ device.secondaryID }}</td>\n    <td>{{ device.primaryID }}</td>\n    <td ng-bind-html=\"getInfo(device)\"></td>\n    <td>{{ device.DataRecord.length }}</td>\n    <td>{{ device.lastUpdate }}</td>\n    <td>\n        <div class=\"online\" ng-style=\"{background: !device.error ? '#4CAF50' : '#f44336'}\">\n            <md-tooltip md-direction=\"bottom\">{{ device.error ? device.error : 'OK' }}</md-tooltip>\n        </div>\n    </td>\n  </tr>\n</table>\n\n<style>\ntable {\n    border-collapse: collapse;\n    width: 100%;\n}\n\nth, td{\n    text-align: left;\n    padding: 8px;\n    background-color: #f2f2f2;\n    color: black;\n}\n\nth {\n    background-color: #4CAF50;\n    color: white;\n}\n\n.online {\n\tbackground:#ff3333;\n\twidth:20px;\n\theight:20px;\n\tmargin:0 auto;\n\t-webkit-border-radius:50%;\n\t-moz-border-radius:50%;\n\tborder-radius:50%;\n}\n</style>\n\n<script>\n\n\n(function(scope) {\n    \n    scope.send({topic: 'getDevices'});\n    scope.devices = [];\n    \n    scope.showData = function(device){\n        scope.send({topic: 'deviceData', payload: device});\n    }\n    \n    scope.getInfo = function(device){\n        var text = '';\n        var info = device.SlaveInformation;\n        \n        for(key in info){\n            text += `<p><b>${key}</b>: ${info[key]}</p>`;\n        }\n        \n        return text;\n    }\n\n    scope.$watch('msg', function(data) {\n        if(data && data.topic){\n            switch(data.topic){\n                case \"getDevices\":\n                    if(data.payload && data.payload.devices)\n                        scope.devices = data.payload.devices;\n                break;\n            }\n        }\n    });\n    \n})(scope);\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 708,
        "y": 303,
        "wires": [
            [
                "c4e77f76.60f13"
            ]
        ]
    },
    {
        "id": "e4f8a44c.9991a",
        "type": "inject",
        "z": "789aa767.91c36",
        "name": "restart",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "restart",
        "payload": "",
        "payloadType": "num",
        "x": 119,
        "y": 108,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "c4e77f76.60f13",
        "type": "ui_template",
        "z": "789aa767.91c36",
        "group": "fb0048e.a5eec38",
        "name": "data-table",
        "order": 0,
        "width": "14",
        "height": "10",
        "format": "<p><b>Device ID:</b> {{ID}} </p>\n\n<br>\n<br>\n\n<table>\n  <tr>\n    <th>ID</th>\n    <th>Function</th>\n    <th>Unit</th>\n    <th>Value</th>\n    <th>Timestamp</th>\n  </tr>\n  <tr ng-repeat=\"(key, data) in deviceData\">\n    <td>{{ data.id }}</td>\n    <td>{{ data.Function }}</td>\n    <td>{{ data.Unit }}</td>\n    <td>{{ data.Value }}</td>\n    <td>{{ data.Timestamp }}</td>\n  </tr>\n</table>\n\n<style>\ntable {\n    border-collapse: collapse;\n    width: 100%;\n}\n\nth, td{\n    text-align: left;\n    padding: 8px;\n    background-color: #f2f2f2;\n    color: black;\n}\n\nth {\n    background-color: #4CAF50;\n    color: white;\n}\n\n.online {\n\tbackground:#ff3333;\n\twidth:20px;\n\theight:20px;\n\tmargin:0 auto;\n\t-webkit-border-radius:50%;\n\t-moz-border-radius:50%;\n\tborder-radius:50%;\n}\n</style>\n\n<script>\n\n\n(function(scope) {\n    \n    scope.deviceData = [];\n    scope.ID = '';\n\n    scope.$watch('msg', function(data) {\n        if(data && data.topic){\n            switch(data.topic){\n                case \"deviceData\":\n                    if(data.payload){\n                        scope.deviceData = data.payload.DataRecord;\n                        scope.ID = data.payload.SlaveInformation.Id;\n                    }\n                break;\n            }\n        }\n    });\n    \n})(scope);\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 872,
        "y": 303,
        "wires": [
            []
        ]
    },
    {
        "id": "41ec05d7.924b04",
        "type": "inject",
        "z": "789aa767.91c36",
        "name": "Read ID 2",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "getDevice",
        "payload": "{\"address\": 2}",
        "payloadType": "json",
        "x": 130,
        "y": 184,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "48d0b9e5.236fb8",
        "type": "ui_button",
        "z": "789aa767.91c36",
        "name": "Scan",
        "group": "de125633.ed6c5",
        "order": 3,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Scan",
        "color": "",
        "bgcolor": "",
        "icon": "location_searching",
        "payload": "",
        "payloadType": "str",
        "topic": "scan",
        "x": 97,
        "y": 306,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "1b07dce9.8a093b",
        "type": "ui_button",
        "z": "789aa767.91c36",
        "name": "Restart",
        "group": "de125633.ed6c5",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Restart",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "restart",
        "x": 107,
        "y": 343,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "cb5b5d1b.3e8b98",
        "type": "ui_button",
        "z": "789aa767.91c36",
        "name": "GetDevices",
        "group": "de125633.ed6c5",
        "order": 5,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Update Devices",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "getDevices",
        "x": 115,
        "y": 380,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "4646c610.c0a18",
        "type": "ui_button",
        "z": "789aa767.91c36",
        "name": "readAddress",
        "group": "de125633.ed6c5",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Read Device",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "deviceID",
        "payloadType": "flow",
        "topic": "getDevice",
        "x": 112,
        "y": 419,
        "wires": [
            [
                "437a749f.6ab504"
            ]
        ]
    },
    {
        "id": "6e5d9013.091c38",
        "type": "ui_text_input",
        "z": "789aa767.91c36",
        "name": "Device_ID",
        "label": "ID: ",
        "group": "de125633.ed6c5",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "x": 570,
        "y": 560,
        "wires": [
            [
                "3e4c4281.63d6b6"
            ]
        ]
    },
    {
        "id": "3e4c4281.63d6b6",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "storeID",
        "func": "\nflow.set('deviceID', msg.payload);\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 746,
        "y": 560,
        "wires": []
    },
    {
        "id": "437a749f.6ab504",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "readAddr",
        "func": "var data = {address: msg.payload}\n\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 419,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "4417fa63.93883c",
        "type": "status",
        "z": "789aa767.91c36",
        "name": "controller_status",
        "scope": [
            "b09b5389.e16f18"
        ],
        "x": 411,
        "y": 97,
        "wires": [
            [
                "5a88af3c.5d0258"
            ]
        ]
    },
    {
        "id": "2d994365.6f212c",
        "type": "status",
        "z": "789aa767.91c36",
        "name": "mbus_status",
        "scope": [
            "7ef41dc1.ed2e0c"
        ],
        "x": 404,
        "y": 142,
        "wires": [
            [
                "b886eaf0.44a528"
            ]
        ]
    },
    {
        "id": "5a88af3c.5d0258",
        "type": "ui_text",
        "z": "789aa767.91c36",
        "group": "88aaec54.303928",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "controller_status",
        "label": "Controller",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 623,
        "y": 97,
        "wires": []
    },
    {
        "id": "b886eaf0.44a528",
        "type": "ui_text",
        "z": "789aa767.91c36",
        "group": "88aaec54.303928",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "mbus_status",
        "label": "M-Bus",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 613,
        "y": 142,
        "wires": []
    },
    {
        "id": "3d78c691.9bd322",
        "type": "inject",
        "z": "789aa767.91c36",
        "name": "setPrimary",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "setPrimary",
        "payload": "{\"newAddr\":3,\"oldAddr\":2}",
        "payloadType": "json",
        "x": 121,
        "y": 35,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "d31c87e.42a2af8",
        "type": "ui_text_input",
        "z": "789aa767.91c36",
        "name": "Old_ID",
        "label": "Old ID",
        "group": "de125633.ed6c5",
        "order": 6,
        "width": "3",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "x": 577,
        "y": 600,
        "wires": [
            [
                "852edb36.359ee8"
            ]
        ]
    },
    {
        "id": "852edb36.359ee8",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "storeID",
        "func": "\nflow.set('oldID', msg.payload);\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 744,
        "y": 600,
        "wires": []
    },
    {
        "id": "35f10be8.81eff4",
        "type": "ui_text_input",
        "z": "789aa767.91c36",
        "name": "New_ID",
        "label": "New ID",
        "group": "de125633.ed6c5",
        "order": 7,
        "width": "3",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "x": 574,
        "y": 640,
        "wires": [
            [
                "21cfe6a.569359a"
            ]
        ]
    },
    {
        "id": "21cfe6a.569359a",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "storeID",
        "func": "\nflow.set('newID', msg.payload);\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 742,
        "y": 640,
        "wires": []
    },
    {
        "id": "bd997a73.d5cb18",
        "type": "ui_button",
        "z": "789aa767.91c36",
        "name": "SetPrimary",
        "group": "de125633.ed6c5",
        "order": 8,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Set Primary ID",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "setPrimary",
        "x": 111,
        "y": 460,
        "wires": [
            [
                "87d95a5a.46573"
            ]
        ]
    },
    {
        "id": "87d95a5a.46573",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "setPrimary",
        "func": "var data = {\n    oldAddr: flow.get('oldID'), \n    newAddr:flow.get('newID')\n    }\n\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 460,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "357e7aec.dcce3e",
        "type": "inject",
        "z": "789aa767.91c36",
        "name": "setDevices",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "setDevices",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "setDevices",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 260,
        "wires": [
            [
                "9bd33402.9e6558"
            ]
        ]
    },
    {
        "id": "9bd33402.9e6558",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "devices",
        "func": "var devices = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\"];\n\nmsg.payload = devices;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 258,
        "y": 260,
        "wires": [
            [
                "b09b5389.e16f18"
            ]
        ]
    },
    {
        "id": "682462aa.67061c",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "Meter Data Selection",
        "func": "\n\nvar oot = [];\n\n//Unit: \"Flow temperature (1e-2 deg C)\"\n\nfor (var meter in msg.payload.devices) {\n    \n    if (msg.payload.devices[meter].DataRecord[9].Unit.indexOf(\"temperature\")>0) {\n    \n        var meterid = msg.payload.devices[meter].SlaveInformation.Manufacturer + meter;\n        \n        oot.push({\n            \"payload\": msg.payload.devices[meter].SlaveInformation.Manufacturer,\n            \"topic\": \"meter/manufacturer\", \"meter\": meterid });\n            \n        \n            \n        oot.push({\n            \"payload\": msg.payload.devices[meter].SlaveInformation.Id,\n            \"topic\": \"meter/id\", \"meter\": meterid }\n            );\n        \n        \n        oot.push({\n            \"payload\": msg.payload.devices[meter].DataRecord[7].Value,\n            \"topic\": \"meter/kwh\",\n            \"title\": \"Heat meter energy\",\n            \"units\": \"kWh\", \"meter\": meterid \n            });\n         \n        \n        oot.push({\n            \"payload\": msg.payload.devices[meter].DataRecord[9].Value / 100,\n            \"topic\": \"meter/tF\",\n            \"title\": \"Heat meter flow temperature\",\n            \"units\": \"°C\" , \"meter\": meterid\n            });\n         \n        oot.push({\n            \"payload\": msg.payload.devices[meter].DataRecord[10].Value / 100,\n            \"topic\": \"meter/tR\",\n            \"title\": \"Heat meter return temperature\",\n            \"units\": \"°C\" , \"meter\": meterid \n            });\n         \n        \n        oot.push({\n            \"payload\": msg.payload.devices[meter].DataRecord[11].Value / 100,\n            \"topic\": \"meter/tDiff\",\n            \"title\": \"Heat meter temperature drop\",\n            \"units\": \"°C\"  , \"meter\": meterid\n            });     \n        \n        \n        oot.push({\n            \"payload\": msg.payload.devices[meter].DataRecord[12].Value / 10,\n            \"topic\": \"meter/kw\",\n            \"title\": \"Heat meter power\",\n            \"units\": \"kW\" , \"meter\": meterid \n            });     \n            \n    }\n        \n}   \nmsg.payload = oot;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "e4d3eaec.811fd8",
        "type": "split",
        "z": "789aa767.91c36",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1050,
        "y": 280,
        "wires": [
            [
                "7c7cca54.a35e54"
            ]
        ]
    },
    {
        "id": "7c7cca54.a35e54",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "",
        "func": "msg=msg.payload;\n\nvar msg2={};\nmsg2.topic = msg.meter + \"/\" + msg.topic.replace(\"meter\",\"dat\");\n\nmsg2.payload = msg.payload;\n\nreturn [msg,msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 280,
        "wires": [
            [
                "78acc2faab027526"
            ],
            [
                "26de6b3f.6399fc"
            ]
        ]
    },
    {
        "id": "e162d709.82b3",
        "type": "link out",
        "z": "789aa767.91c36",
        "name": "",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1515,
        "y": 300,
        "wires": []
    },
    {
        "id": "f6968840de96bbe4",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "Micronics U1000 ",
        "func": "\n\nvar oot = [];\n\n//Unit: \"Flow temperature (1e-2 deg C)\"\n\n//for (var meter in msg.payload.devices) {\n    \n   // if (msg.payload.devices[meter].DataRecord[9].Unit.indexOf(\"temperature\")>0) {\n    \nvar meter = msg.payload.secondaryID\nvar meterid = msg.payload.SlaveInformation.Manufacturer + meter;\n        \n        oot.push({\n            \"payload\": msg.payload.SlaveInformation.Manufacturer,\n            \"topic\": \"meter/manufacturer\", \"meter\": meterid });\n            \n        \n            \n        oot.push({\n            \"payload\": msg.payload.SlaveInformation.Id,\n            \"topic\": \"meter/id\", \"meter\": meterid }\n            );\n        \n        \n        oot.push({\n            \"payload\": msg.payload.DataRecord[6].Value,\n            \"topic\": \"meter/kwh\",\n            \"title\": \"Heat meter energy\",\n            \"units\": \"kWh\", \"meter\": meterid \n            });\n         \n        \n        oot.push({\n            \"payload\": msg.payload.DataRecord[4].Value ,\n            \"topic\": \"meter/tF\",\n            \"title\": \"Heat meter flow temperature\",\n            \"units\": \"°C\" , \"meter\": meterid\n            });\n         \n        oot.push({\n            \"payload\": msg.payload.DataRecord[3].Value,\n            \"topic\": \"meter/tR\",\n            \"title\": \"Heat meter return temperature\",\n            \"units\": \"°C\" , \"meter\": meterid \n            });\n         \n        \n        oot.push({\n            \"payload\": parseInt(1000 * (msg.payload.DataRecord[4].Value - msg.payload.DataRecord[3].Value))/1000,\n            \"topic\": \"meter/tDiff\",\n            \"title\": \"Heat meter temperature drop\",\n            \"units\": \"°C\"  , \"meter\": meterid\n            });     \n        \n        \n        oot.push({\n            \"payload\": msg.payload.DataRecord[7].Value,\n            \"topic\": \"meter/kw\",\n            \"title\": \"Heat meter power\",\n            \"units\": \"kW\" , \"meter\": meterid \n            });     \n\n\n        oot.push({\n            \"payload\": msg.payload.DataRecord[5].Value,\n            \"topic\": \"meter/mps\",\n            \"title\": \"Heat meter water velocity\",\n            \"units\": \"m/s\", \"meter\": meterid\n        });     \n\n            \n //   }\n        \n//}   \nmsg.payload = oot;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "0ffde9328bdc43d2",
        "type": "function",
        "z": "789aa767.91c36",
        "name": "Meter Data Selection",
        "func": "\n\nvar oot = [];\n\n//Unit: \"Flow temperature (1e-2 deg C)\"\n\n//for (var meter in msg.payload.devices) {\n\n// if (msg.payload.devices[meter].DataRecord[9].Unit.indexOf(\"temperature\")>0) {\n\nvar meter = msg.payload.secondaryID\nvar meterid = msg.payload.SlaveInformation.Manufacturer + meter;\n\n    \nif (msg.payload.SlaveInformation.Manufacturer == \"ZRI\" && msg.payload.DataRecord[9].Unit.indexOf(\"temperature\")>0) {\n    \n        var meterid = msg.payload.SlaveInformation.Manufacturer + meter;\n        \n        oot.push({\n            \"payload\": msg.payload.SlaveInformation.Manufacturer,\n            \"topic\": \"meter/manufacturer\", \"meter\": meterid });\n            \n        \n            \n        oot.push({\n            \"payload\": msg.payload.SlaveInformation.Id,\n            \"topic\": \"meter/id\", \"meter\": meterid }\n            );\n        \n        \n        oot.push({\n            \"payload\": msg.payload.DataRecord[1].Value,\n            \"topic\": \"meter/kwh\",\n            \"title\": \"Heat meter energy\",\n            \"units\": \"kWh\", \"meter\": meterid \n            });\n         \n        \n        oot.push({\n            \"payload\": msg.payload.DataRecord[9].Value / 100,\n            \"topic\": \"meter/tF\",\n            \"title\": \"Heat meter flow temperature\",\n            \"units\": \"°C\" , \"meter\": meterid\n            });\n         \n        oot.push({\n            \"payload\": msg.payload.DataRecord[10].Value / 100,\n            \"topic\": \"meter/tR\",\n            \"title\": \"Heat meter return temperature\",\n            \"units\": \"°C\" , \"meter\": meterid \n            });\n         \n        \n        oot.push({\n            \"payload\": msg.payload.DataRecord[11].Value / 100,\n            \"topic\": \"meter/tDiff\",\n            \"title\": \"Heat meter temperature drop\",\n            \"units\": \"°C\"  , \"meter\": meterid\n            });     \n        \n        \n        oot.push({\n            \"payload\": msg.payload.DataRecord[12].Value / 10,\n            \"topic\": \"meter/kw\",\n            \"title\": \"Heat meter power\",\n            \"units\": \"kW\" , \"meter\": meterid \n            });     \n\n\n\n    oot.push({\n        \"payload\": msg.payload.DataRecord[13].Value / 1000,\n        \"topic\": \"meter/m3h\",\n        \"title\": \"Heat meter flow rate\",\n        \"units\": \"m3/h\", \"meter\": meterid\n    });     \n\n    oot.push({\n        \"payload\": msg.payload.DataRecord[13].Value / (60),\n        \"topic\": \"meter/fH\",\n        \"title\": \"Heat meter flow rate\",\n        \"units\": \"ltr/min\", \"meter\": meterid\n    });  \n            \n}\n\n\nelse if (msg.payload.SlaveInformation.Manufacturer == \"AXI\") {\n\n        var meterid = msg.payload.SlaveInformation.Manufacturer + meter;\n\n        oot.push({\n            \"payload\": msg.payload.SlaveInformation.Manufacturer,\n            \"topic\": \"meter/manufacturer\", \"meter\": meterid\n        });\n\n\n\n        oot.push({\n            \"payload\": msg.payload.SlaveInformation.Id,\n            \"topic\": \"meter/id\", \"meter\": meterid\n        }\n        );\n\n\n        oot.push({\n            \"payload\": msg.payload.DataRecord[5].Value / 10,\n            \"topic\": \"meter/kwh\",\n            \"title\": \"Heat meter energy\",\n            \"units\": \"kWh\", \"meter\": meterid\n        });\n\n\n        oot.push({\n            \"payload\": msg.payload.DataRecord[12].Value / 100,\n            \"topic\": \"meter/tF\",\n            \"title\": \"Heat meter flow temperature\",\n            \"units\": \"°C\", \"meter\": meterid\n        });\n\n        oot.push({\n            \"payload\": msg.payload.DataRecord[13].Value / 100,\n            \"topic\": \"meter/tR\",\n            \"title\": \"Heat meter return temperature\",\n            \"units\": \"°C\", \"meter\": meterid\n        });\n\n\n        oot.push({\n            \"payload\": msg.payload.DataRecord[14].Value / 100,\n            \"topic\": \"meter/tDiff\",\n            \"title\": \"Heat meter temperature drop\",\n            \"units\": \"°C\", \"meter\": meterid\n        });\n\n\n        oot.push({\n            \"payload\": msg.payload.DataRecord[10].Value / 1000,\n            \"topic\": \"meter/kw\",\n            \"title\": \"Heat meter power\",\n            \"units\": \"kW\", \"meter\": meterid\n        });\n\n\n\n        oot.push({\n            \"payload\": msg.payload.DataRecord[11].Value / 1000,\n            \"topic\": \"meter/m3h\",\n            \"title\": \"Heat meter flow rate\",\n            \"units\": \"m3/h\", \"meter\": meterid\n        });\n\n        oot.push({\n            \"payload\": msg.payload.DataRecord[11].Value / (60),\n            \"topic\": \"meter/fH\",\n            \"title\": \"Heat meter flow rate\",\n            \"units\": \"ltr/min\", \"meter\": meterid\n        });\n\n    }\n\n  \nmsg.payload = oot;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 240,
        "wires": [
            [
                "20b39f02ffda1ed4",
                "e4d3eaec.811fd8"
            ]
        ]
    },
    {
        "id": "20b39f02ffda1ed4",
        "type": "debug",
        "z": "789aa767.91c36",
        "name": "debug 34",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 220,
        "wires": []
    },
    {
        "id": "78acc2faab027526",
        "type": "debug",
        "z": "789aa767.91c36",
        "name": "",
        "active": false,
        "console": false,
        "complete": "false",
        "x": 1370,
        "y": 180,
        "wires": []
    },
    {
        "id": "9a45da0e.16d9a",
        "type": "inject",
        "z": "789aa767.91c36",
        "name": "Standard Calculations",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "calculations",
        "payload": "[{\"topic\":\"stat/vwatR24\",\"filter\":\"+/+/+/dat/#\",\"function\":\"weightedAverage\",\"save\":\"daily\",\"wipe\":\"daily\",\"parameters\":[\"dat/tR\",\"dat/fH\"],\"title\":\"Volume weighted average return temp for today\",\"units\":\"°C\",\"points\":365,\"deadband\":0.1},{\"topic\":\"stat/vwatF24\",\"filter\":\"+/+/+/dat/#\",\"function\":\"weightedAverage\",\"save\":\"daily\",\"wipe\":\"daily\",\"parameters\":[\"dat/tF\",\"dat/fH\"],\"title\":\"Volume weighted average flow temp for today\",\"units\":\"°C\",\"points\":365,\"deadband\":0.1}]",
        "payloadType": "json",
        "x": 1160,
        "y": 360,
        "wires": [
            [
                "26de6b3f.6399fc"
            ]
        ]
    },
    {
        "id": "26de6b3f.6399fc",
        "type": "heatwebCalc",
        "z": "789aa767.91c36",
        "name": "",
        "x": 1370,
        "y": 300,
        "wires": [
            [
                "d30ef22e4bb021fd",
                "e162d709.82b3"
            ]
        ]
    },
    {
        "id": "d30ef22e4bb021fd",
        "type": "debug",
        "z": "789aa767.91c36",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 360,
        "wires": []
    },
    {
        "id": "1dd21e77edd74b55",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "",
        "func": "//if(Buffer.from(msg.payload, 'ascii')[1]!==3) { return null; }\n\nfunction hex2bin(hex){\n    return (\"00000000\" + (parseInt(hex)).toString(2)).substr(-8);\n}\n\nfunction dec2bin(dec){\n  return (dec >>> 0).toString(2);\n}\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128)\n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}\n\nvar msg2 = { \"payload\": Buffer.from(msg.payload, 'ascii') };\n\nmsg.address = msg.payload[0];\n//msg.register = (256 * msg.payload[2]) + msg.payload[3];\nmsg.register = flow.get(\"curreg\");\n\n\nvar minfo = flow.get(\"registers.r\" + msg.register) || null;\nvar dinfo = flow.get(\"devices.\" + msg.address) || null;\n\nif (!minfo) { return null; }\nif (!dinfo) { return null; }  \n\nflow.set(\"modbusIn\",\"xxx\");\n\n\nif (minfo.datatype==\"bits\") {\n    \n    var oot = {};\n    var bits = minfo.items.split(\",\");\n    var bc=15;\n    for (var bit in bits) {\n    \n        var item = {};\n        item.payload = (256 * msg.payload[3]) + msg.payload[4];        \n        item.payload =   (\"00000000000000000\" + dec2bin(item.payload)).substr(-16);\n        item.payload =  item.payload.substr(bc,1);\n        \n        item.topic = dinfo.device + \"/\" + bits[bit].replace(\".\",\"/\");\n        \n        if (minfo[\"units\"]) { item.units = minfo[\"units\"]; }\n        item.title = (bits[bit].split(\".\")[1]?  bits[bit].split(\".\")[1]:bits[bit]) + \" [Modbus \" + msg.register + \", bit \" + bit + \"]\"; \n\n        if (minfo[\"title\"]) { item.title = minfo[\"title\"] + \", \" + item.title; }\n\n        if (minfo[\"values\"]) {\n            \n            if (minfo[\"values\"][15-bc]) {\n                if (minfo[\"values\"][15-bc][\"\" + item.payload]) { item.payload = minfo[\"values\"][15-bc][\"\" + item.payload]; }\n            }\n        }\n\n\n        \n        oot[item.topic] = item;\n        \n        bc=bc-1;\n\n    }\n    msg.payload = oot;\n    \n    return [null,msg];\n    \n    \n} \n\nelse if (minfo.datatype == \"IEEE754\") {\n\n    msg.payload = String.fromCharCode(msg.payload[3]) + String.fromCharCode(msg.payload[4]) + String.fromCharCode(msg.payload[5]) + String.fromCharCode(msg.payload[6]);\n    msg.payload = Buffer.from(msg.payload, 'ascii');\n\n    \n    let intValue;\n    // if (typeof msg.payload === \"number\") {\n    //     intValue = msg.payload;\n    // } else if (typeof msg.payload === \"string\") {\n    //     intValue = Number(msg.payload);\n    // } else if (msg.payload.length == 4) {\n        // four byte array or buffer\n        intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n    // } else {\n    //     node.warn(\"Unrecognised payload type or length\");\n    // }\n\n    msg.payload = Int2Float32(intValue);\n        \n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\", \"/\");\n\n\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n\n\n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else { msg.title = (minfo[\"reading\"].split(\".\")[1] ? minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg, null];\n\n}\n\nelse {\n    \n   \n           \n    msg.payload = (256 * msg.payload[3]) + msg.payload[4];        \n    msg.payload =  msg.payload / parseFloat(minfo[\"multiplier\"] || 1);\n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\",\"/\");\n\n\n    if (minfo[\"values\"]) {\n        \n        if (minfo[\"values\"]==\"alarmCodes\") { \n            \n            var ac = flow.get(\"alarmCodes\");\n            if (ac[\"\" + msg.payload]) { msg.payload = ac[\"\" + msg.payload]; }\n        }\n        \n        else if (minfo[\"values\"][\"\" + msg.payload]) { msg.payload = minfo[\"values\"][\"\" + msg.payload]; }\n    }\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n    \n    \n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else  { msg.title = (minfo[\"reading\"].split(\".\")[1]?  minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg,null];\n    \n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 760,
        "wires": [
            [
                "89f6b15f4ca4496d",
                "d7356daaa2e32446",
                "3c36422ec46db20a"
            ],
            [
                "2a9647a6b8670c90",
                "a36e125276e7c5f4",
                "d7356daaa2e32446"
            ]
        ]
    },
    {
        "id": "89f6b15f4ca4496d",
        "type": "debug",
        "z": "f7189e37dc245121",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1070,
        "y": 640,
        "wires": []
    },
    {
        "id": "e9565a3badc37316",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "Modbus",
        "func": "// http://www.simplymodbus.ca/FC03.htm\n//11 03 006B 0003 7687\n// 11 03 06 AE41 5652 4340 49AD\n\n// uses address 17 as default.\n\n//var offs = 0;\n//if  (msg.payload[0] === 0) { offs = 1; }\nif (!msg.payload) { msg.payload={}; }\n\nvar address = msg.payload.address || msg.address ||8;\nvar fc = msg.payload.fc || msg.fc ;\nvar register = msg.payload.register || msg.register || 1;\nflow.set(\"curreg\", register);\nflow.set(\"fc\", fc);\n\n//register = register + 1;\n\nvar rlength = msg.payload.rlength || msg.rlength || 1;\n\nvar r1 = Math.floor(register / 256);\nvar r2 = register % 256;\n\n\n\n\nvar targetv = msg.targetv; //999;\n\n\nif (fc != 3 && fc != 6) { return null; }\n\nflow.set(\"modbusIn\",\"\");\n\n//targetv = global.get(\"modbus.\"+register+\".value\") || 0;\n\n//targetv = parseInt(global.get(\"modbus.\"+register+\".multiply\") || 1) * targetv;\n\n\nfunction crc16(buffer) {\n    var crc = 0xFFFF;\n    var odd;\n\n    for (var i = 0; i < buffer.length; i++) {\n        crc = crc ^ buffer[i];\n\n        for (var j = 0; j < 8; j++) {\n            odd = crc & 0x0001;\n            crc = crc >> 1;\n            if (odd) {\n                crc = crc ^ 0xA001;\n            }\n        }\n    }\n\n    crc  = \"0000\" + crc.toString(16);\n    crc = crc.substr(-4);\n\n    return crc;\n}\n\nvar tosend = \"\";\nvar crcString =\"\";\nvar msg2={};\n \nif (fc == 3) {   // read\n\n    \n    tosend = String.fromCharCode(address) + String.fromCharCode(3);\n    tosend += String.fromCharCode(r1) + String.fromCharCode(r2);\n    tosend += String.fromCharCode(0) + String.fromCharCode(rlength);\n    \n    crcString = crc16(Buffer.from(tosend, 'ascii'));\n    tosend += String.fromCharCode(parseInt(crcString.substr(2,2),16)) + String.fromCharCode(parseInt(crcString.substr(0,2),16)) ;\n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    tosend = \"-\" + tosend;\n    \n    msg2.payload  = Buffer.from(tosend, 'ascii');\n    \n    \n    return [msg,msg2];\n\n} else if (fc == 6 ) {    // write\n\n\n    tosend = String.fromCharCode(address) + String.fromCharCode(6);\n    \n    tosend += String.fromCharCode(r1) + String.fromCharCode(r2);\n    \n    targetv = parseInt(targetv) ;\n    var hexStringValue  = \"0000\" + targetv.toString(16);\n    hexStringValue = hexStringValue.substr(-4);\n    \n    \n    tosend += String.fromCharCode(parseInt(hexStringValue.substr(0,2),16)) + String.fromCharCode(parseInt(hexStringValue.substr(2,2),16)) ;\n    \n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    crcString = crc16(msg.payload);\n   \n    tosend += String.fromCharCode(parseInt(crcString.substr(2,2),16)) + String.fromCharCode(parseInt(crcString.substr(0,2),16)) ;\n   \n       \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    tosend = \"-\" + tosend;\n    msg2.payload  = Buffer.from(tosend, 'ascii');\n    \n    \n    return [msg,msg2];\n\n} \n\n\n",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "708f802220e2fc5c",
                "f44509be1471b033",
                "90b9ddb9b290f2d3"
            ],
            []
        ]
    },
    {
        "id": "e6f1305404cb2778",
        "type": "serial in",
        "z": "f7189e37dc245121",
        "name": "",
        "serial": "72301e42389da199",
        "x": 650,
        "y": 760,
        "wires": [
            [
                "c15f015196db6680",
                "1dd21e77edd74b55"
            ]
        ]
    },
    {
        "id": "90b9ddb9b290f2d3",
        "type": "serial out",
        "z": "f7189e37dc245121",
        "name": "",
        "serial": "72301e42389da199",
        "x": 1210,
        "y": 380,
        "wires": []
    },
    {
        "id": "c15f015196db6680",
        "type": "debug",
        "z": "f7189e37dc245121",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 730,
        "y": 680,
        "wires": []
    },
    {
        "id": "f44509be1471b033",
        "type": "debug",
        "z": "f7189e37dc245121",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1210,
        "y": 340,
        "wires": []
    },
    {
        "id": "6415eabcdd559e70",
        "type": "inject",
        "z": "f7189e37dc245121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "payload": "registers",
        "payloadType": "flow",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "f3eca4c26c00c73c"
            ]
        ]
    },
    {
        "id": "f3eca4c26c00c73c",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "",
        "func": "\nvar oot = [];\n\nfor (var r in flow.get(\"registers\")) {\n    for (var d in flow.get(\"devices\")) {\n    \n    \n        var item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = flow.get(\"registers.\"+r+\".register\");\n        item.rlength = 1;\n\n        oot.push(item);\n        \n    }\n    \n}\n\nmsg.payload = oot;\n\nflow.set(\"msglist\",[]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "bc89d3c2664736c9"
            ]
        ]
    },
    {
        "id": "ac69614b6c25e96f",
        "type": "split",
        "z": "f7189e37dc245121",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 320,
        "wires": [
            [
                "79e750ccae27a84a"
            ]
        ]
    },
    {
        "id": "5ab92ce3bc73d6cd",
        "type": "debug",
        "z": "f7189e37dc245121",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "71781fe8c73f770d",
        "type": "link out",
        "z": "f7189e37dc245121",
        "name": "",
        "mode": "link",
        "links": [
            "e47dc76ffef0a56d"
        ],
        "x": 1535,
        "y": 680,
        "wires": []
    },
    {
        "id": "2a9647a6b8670c90",
        "type": "split",
        "z": "f7189e37dc245121",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1030,
        "y": 920,
        "wires": [
            [
                "01e08c648a58c2a8"
            ]
        ]
    },
    {
        "id": "79393b57be26a747",
        "type": "debug",
        "z": "f7189e37dc245121",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1350,
        "y": 920,
        "wires": []
    },
    {
        "id": "a36e125276e7c5f4",
        "type": "debug",
        "z": "f7189e37dc245121",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1050,
        "y": 880,
        "wires": []
    },
    {
        "id": "759c5f2c278201d7",
        "type": "debug",
        "z": "f7189e37dc245121",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1810,
        "y": 800,
        "wires": []
    },
    {
        "id": "7877d5f27f6ee0a4",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "34 - set PIR delay to 60s",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 34;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 60;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 560,
        "wires": [
            [
                "7378b63fe9862534"
            ]
        ]
    },
    {
        "id": "41c709adc47d8dfe",
        "type": "inject",
        "z": "f7189e37dc245121",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "7877d5f27f6ee0a4"
            ]
        ]
    },
    {
        "id": "d19d88c1cc93c326",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "Read Key Registers",
        "func": "\n\nvar oot = [];\n\n    for (var d in flow.get(\"devices\")) {\n    \n    \n        var item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 11;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n        \n        \n        item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 12;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n   \n        item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 8;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n        \n    }\n    \n\n\nmsg.payload = oot;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 320,
        "wires": [
            [
                "ac69614b6c25e96f"
            ]
        ]
    },
    {
        "id": "558271ee37e07876",
        "type": "inject",
        "z": "f7189e37dc245121",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "d19d88c1cc93c326"
            ]
        ]
    },
    {
        "id": "79e750ccae27a84a",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "SHIFT",
        "func": "\nvar msglist=flow.get(\"msglist\") || [];\n\n//if (msglist.length> 100) { msglist = []; }\n    \nif (msg.payload == \"next\") { \n    \n    if (!msglist[0]) { return null; }\n    \n    if (flow.get(\"modbusIn\")===\"\") { return null; }\n    \n    msg = msglist[0];\n    msglist.shift();\n    flow.set(\"msglist\",msglist);\n    return msg;\n}\n\nelse {   \n    \n    msglist.push(msg); \n    flow.set(\"msglist\",msglist);\n    return null;\n    \n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            [
                "e9565a3badc37316"
            ]
        ]
    },
    {
        "id": "5c1032ca5285c4df",
        "type": "inject",
        "z": "f7189e37dc245121",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "next",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "next",
        "payloadType": "str",
        "x": 610,
        "y": 400,
        "wires": [
            [
                "79e750ccae27a84a"
            ]
        ]
    },
    {
        "id": "d7356daaa2e32446",
        "type": "link out",
        "z": "f7189e37dc245121",
        "name": "",
        "links": [
            "c4e46a82.1c9e7",
            "9b0802198ac38863"
        ],
        "x": 1015,
        "y": 760,
        "wires": []
    },
    {
        "id": "708f802220e2fc5c",
        "type": "trigger",
        "z": "f7189e37dc245121",
        "name": "",
        "op1": "reading",
        "op2": "done",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 1200,
        "y": 460,
        "wires": [
            [
                "bd0f17255a0cb374"
            ]
        ]
    },
    {
        "id": "bd0f17255a0cb374",
        "type": "change",
        "z": "f7189e37dc245121",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "modbusIn",
                "pt": "flow",
                "to": "xxx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "9b0802198ac38863",
        "type": "link in",
        "z": "f7189e37dc245121",
        "name": "",
        "links": [
            "d7356daaa2e32446"
        ],
        "x": 415,
        "y": 440,
        "wires": [
            [
                "b3d99fed63778336"
            ]
        ]
    },
    {
        "id": "b10dadf7ea74236c",
        "type": "change",
        "z": "f7189e37dc245121",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 440,
        "wires": [
            [
                "79e750ccae27a84a"
            ]
        ]
    },
    {
        "id": "cfe21587c09f801a",
        "type": "inject",
        "z": "f7189e37dc245121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "708f802220e2fc5c"
            ]
        ]
    },
    {
        "id": "890bff328bdf567c",
        "type": "link in",
        "z": "f7189e37dc245121",
        "name": "",
        "links": [
            "9d6ae37dd1825692",
            "2db0089.690c2f8",
            "be5ca099.80857",
            "5dbf074d.dd7078",
            "315cd92.2bca026"
        ],
        "x": 635,
        "y": 360,
        "wires": [
            [
                "79e750ccae27a84a"
            ]
        ]
    },
    {
        "id": "9d6ae37dd1825692",
        "type": "link out",
        "z": "f7189e37dc245121",
        "name": "",
        "links": [
            "890bff328bdf567c",
            "479e65f4.abc6cc"
        ],
        "x": 815,
        "y": 560,
        "wires": []
    },
    {
        "id": "01e08c648a58c2a8",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "",
        "func": "msg= msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 920,
        "wires": [
            [
                "79393b57be26a747",
                "a1a830da07cc82c4"
            ]
        ]
    },
    {
        "id": "7378b63fe9862534",
        "type": "change",
        "z": "f7189e37dc245121",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "msglist",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 560,
        "wires": [
            [
                "9d6ae37dd1825692"
            ]
        ]
    },
    {
        "id": "5fdfc79101d872ce",
        "type": "delay",
        "z": "f7189e37dc245121",
        "d": true,
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 240,
        "wires": [
            [
                "79e750ccae27a84a"
            ]
        ]
    },
    {
        "id": "bc89d3c2664736c9",
        "type": "split",
        "z": "f7189e37dc245121",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "5fdfc79101d872ce",
                "5ab92ce3bc73d6cd",
                "79e750ccae27a84a"
            ]
        ]
    },
    {
        "id": "4ebfa94cc20c4435",
        "type": "change",
        "z": "f7189e37dc245121",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "points",
                "pt": "msg",
                "to": "5000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 720,
        "wires": [
            [
                "71781fe8c73f770d"
            ]
        ]
    },
    {
        "id": "3c36422ec46db20a",
        "type": "switch",
        "z": "f7189e37dc245121",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "AlarmCode",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "WarningCode",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Position",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1050,
        "y": 700,
        "wires": [
            [
                "3497d88761159c36",
                "71781fe8c73f770d"
            ],
            [
                "71781fe8c73f770d"
            ],
            [
                "4ebfa94cc20c4435"
            ],
            [
                "a1a830da07cc82c4"
            ]
        ]
    },
    {
        "id": "fa560d7c6780dfd2",
        "type": "inject",
        "z": "f7189e37dc245121",
        "name": "REGISTERS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "[{\"register\":\"5\",\"reading\":\"modbus.baud\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"units\":\"\"},{\"register\":\"25\",\"reading\":\"dat.operatingMode\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"units\":\"\"}]",
        "payloadType": "json",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "ec33cd14460d637a"
            ]
        ]
    },
    {
        "id": "3325b192cd7334ff",
        "type": "split",
        "z": "f7189e37dc245121",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 140,
        "wires": [
            [
                "320e459205f0f401"
            ]
        ]
    },
    {
        "id": "320e459205f0f401",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "Store Registers",
        "func": "\nvar rin = msg.payload;\nif (rin.register<1) { return null; } \n\n\nvar v = global.get(\"readings.\" + rin.reading + \".value\") || 0\nrin[\"value\"] = v;\n\n\n\nflow.set(\"registers.r\" + rin.register, rin);\n\nmsg.payload = flow.get(\"registers\") ;\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f9f0f915230172bd",
        "type": "inject",
        "z": "f7189e37dc245121",
        "name": "DEVICES",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "[{\"address\":\"1\",\"device\":\"heatpump\"}]",
        "payloadType": "json",
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "bfd9c2d86020ad4d"
            ]
        ]
    },
    {
        "id": "bfd9c2d86020ad4d",
        "type": "split",
        "z": "f7189e37dc245121",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1210,
        "y": 60,
        "wires": [
            [
                "ea3aa478b365acfb"
            ]
        ]
    },
    {
        "id": "ea3aa478b365acfb",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "Store Devices",
        "func": "\nvar rin = msg.payload;\nif (rin.address<1) { return null; } \n\n\nflow.set(\"devices.\" + rin.address, rin);\n\n\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1360,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3c72b03d7b96f262",
        "type": "link in",
        "z": "f7189e37dc245121",
        "name": "",
        "links": [
            "1f335ee0.7b9a41",
            "b09805d5.754898"
        ],
        "x": 195,
        "y": 500,
        "wires": [
            [
                "38226792480dfe98"
            ]
        ]
    },
    {
        "id": "3497d88761159c36",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "",
        "func": "msg.topic = msg.topic.replace(\"/stat/\",\"/alarm/\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 660,
        "wires": [
            [
                "71781fe8c73f770d"
            ]
        ]
    },
    {
        "id": "38226792480dfe98",
        "type": "delay",
        "z": "f7189e37dc245121",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 500,
        "wires": [
            [
                "7378b63fe9862534"
            ]
        ]
    },
    {
        "id": "2a12b03126bab28d",
        "type": "inject",
        "z": "f7189e37dc245121",
        "name": "REGISTERS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "[{\"register\":\"1\",\"reading\":\"dat.setpoint\",\"multiplier\":\"100\",\"datatype\":\"int16\"},{\"register\":\"2\",\"reading\":\"dat.overrideControl\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"none\",\"1\":\"open\",\"2\":\"close\",\"3\":\"min\",\"4\":\"mid\",\"5\":\"max\"}},{\"register\":\"3\",\"reading\":\"dat.command\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"4\",\"reading\":\"dat.actuatorType\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"Actuator Not Connected\",\"1\":\"Air / Water\",\"2\":\"VAV / EPIV\",\"3\":\"Fire\",\"4\":\"Energy Valve\",\"5\":\"6way EPIV\"}},{\"register\":\"5\",\"reading\":\"dat.relativePosition\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"6\",\"reading\":\"dat.absolutePosition\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"units\":\"mm\"},{\"register\":\"6\",\"reading\":\"dat.sensorValue1\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"13\",\"reading\":\"dat.setpointAnalogue\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"100\",\"reading\":\"settings.busTermination\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"inactive\",\"1\":\"active\"}},{\"register\":\"101\",\"reading\":\"stat.seriesNumberPart1\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"102\",\"reading\":\"stat.seriesNumberPart2\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"103\",\"reading\":\"stat.seriesNumberPart3\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"104\",\"reading\":\"stat.firmwareVirsion\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"106\",\"reading\":\"settings.min\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"107\",\"reading\":\"settings.max\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"108\",\"reading\":\"settings.sensorType1\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"None\",\"1\":\"Active / Hybrid\",\"2\":\"Passive_1K\",\"3\":\"Passive_20K\",\"4\":\"Switch\",\"5\":\"PT1000_C\",\"6\":\"NI1000_C\",\"7\":\"NTC10K_C\",\"8\":\"PT1000_F\",\"9\":\"NI1000_F\",\"10\":\"NTC10K_F\"}},{\"register\":\"109\",\"reading\":\"settings.busFailPosition\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"None / Last setpoint\",\"1\":\"Fast close\",\"2\":\"Fast open\",\"3\":\"Mid position\"}},{\"register\":\"110\",\"reading\":\"settings.watchdogTimeout\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"units\":\"s\"}]",
        "payloadType": "json",
        "x": 1090,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ec33cd14460d637a",
        "type": "change",
        "z": "f7189e37dc245121",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "registers",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 140,
        "wires": [
            [
                "3325b192cd7334ff"
            ]
        ]
    },
    {
        "id": "03896be410a4e4cc",
        "type": "inject",
        "z": "f7189e37dc245121",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "d5a3aa280e529329"
            ]
        ]
    },
    {
        "id": "d5a3aa280e529329",
        "type": "http request",
        "z": "f7189e37dc245121",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://raw.githubusercontent.com/heatweb/plumbing-controller/main/json/modbus/sontay.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "35a650c10eed89c7",
                "0d89f8316740ad3b"
            ]
        ]
    },
    {
        "id": "a7f326053e6adecd",
        "type": "debug",
        "z": "f7189e37dc245121",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 690,
        "y": 80,
        "wires": []
    },
    {
        "id": "35a650c10eed89c7",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "sontay1",
        "func": "\nfunction checkMatch(device) {\n  return device.id == \"sontay1\";\n}\n\nmsg.payload = msg.payload.filter(checkMatch);\n\nif (msg.payload[0]) { msg.payload = msg.payload[0].registers }\n\nelse { return null; }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "a7f326053e6adecd",
                "ec33cd14460d637a"
            ]
        ]
    },
    {
        "id": "0d89f8316740ad3b",
        "type": "debug",
        "z": "f7189e37dc245121",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 40,
        "wires": []
    },
    {
        "id": "b3d99fed63778336",
        "type": "delay",
        "z": "f7189e37dc245121",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "b10dadf7ea74236c"
            ]
        ]
    },
    {
        "id": "ae31632f00eb5436",
        "type": "switch",
        "z": "f7189e37dc245121",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1410,
        "y": 860,
        "wires": [
            [
                "71781fe8c73f770d",
                "759c5f2c278201d7"
            ]
        ]
    },
    {
        "id": "33703a55606d3e8f",
        "type": "change",
        "z": "f7189e37dc245121",
        "name": "reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 820,
        "wires": [
            [
                "a1a830da07cc82c4"
            ]
        ]
    },
    {
        "id": "4554273471dd7c90",
        "type": "inject",
        "z": "f7189e37dc245121",
        "name": "3 min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "180",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1350,
        "y": 780,
        "wires": [
            [
                "33703a55606d3e8f"
            ]
        ]
    },
    {
        "id": "a1a830da07cc82c4",
        "type": "rbe",
        "z": "f7189e37dc245121",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1290,
        "y": 860,
        "wires": [
            [
                "ae31632f00eb5436"
            ]
        ]
    },
    {
        "id": "d24e57143073fcd6",
        "type": "mqtt out",
        "z": "f7189e37dc245121",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 1710,
        "y": 620,
        "wires": []
    },
    {
        "id": "f4c9f16a3f3c22a4",
        "type": "function",
        "z": "f7189e37dc245121",
        "name": "_/",
        "func": "msg.topic = \"_/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 620,
        "wires": [
            [
                "d24e57143073fcd6"
            ]
        ]
    },
    {
        "id": "e47dc76ffef0a56d",
        "type": "link in",
        "z": "f7189e37dc245121",
        "name": "link in 2",
        "links": [
            "71781fe8c73f770d"
        ],
        "x": 1495,
        "y": 620,
        "wires": [
            [
                "f4c9f16a3f3c22a4"
            ]
        ]
    },
    {
        "id": "962a236a04be0aa2",
        "type": "comment",
        "z": "f7189e37dc245121",
        "name": "",
        "info": "https://www.binaryconvert.com/convert_signed_int.html?hexadecimal=000019FD",
        "x": 160,
        "y": 680,
        "wires": []
    },
    {
        "id": "5bf1bc0d13e55a17",
        "type": "inject",
        "z": "f7189e37dc245121",
        "name": "REGISTERS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "[{\"register\":\"8\",\"reading\":\"dat.co2\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"units\":\"ppm\"},{\"register\":\"11\",\"reading\":\"dat.humidity\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"12\",\"reading\":\"dat.temperature\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"°C\"},{\"register\":\"15\",\"reading\":\"dat.pirStatus\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"65534\":0,\"65535\":1}},{\"register\":\"28\",\"reading\":\"dat.setpoint\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"units\":\"%\"}]",
        "payloadType": "json",
        "x": 1070,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b1f6a92b88804ebc",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "func": "//if(Buffer.from(msg.payload, 'ascii')[1]!==3) { return null; }\n\nfunction hex2bin(hex){\n    return (\"00000000\" + (parseInt(hex)).toString(2)).substr(-8);\n}\n\nfunction dec2bin(dec){\n  return (dec >>> 0).toString(2);\n}\n\nvar msg2 = { \"payload\": Buffer.from(msg.payload, 'ascii') };\n\nmsg.address = msg.payload[0];\n//msg.register = (256 * msg.payload[2]) + msg.payload[3];\nmsg.register = flow.get(\"curreg\");\n\n\nminfo = flow.get(\"registers.r\" + msg.register) || null;\ndinfo = flow.get(\"devices.\" + msg.address) || null;\n\nif (!minfo) { return null; }\nif (!dinfo) { return null; }  \n\nif (minfo.datatype==\"bits\") {\n    \n    var oot = {};\n    var bits = minfo.items.split(\",\");\n    var bc=15;\n    for (var bit in bits) {\n    \n        var item = {};\n        item.payload = (256 * msg.payload[3]) + msg.payload[4];        \n        item.payload =   (\"00000000000000000\" + dec2bin(item.payload)).substr(-16);\n        item.payload =  item.payload.substr(bc,1);\n        \n        item.topic = dinfo.device + \"/\" + bits[bit].replace(\".\",\"/\");\n        \n        if (minfo[\"units\"]) { item.units = minfo[\"units\"]; }\n        item.title = (bits[bit].split(\".\")[1]?  bits[bit].split(\".\")[1]:bits[bit]) + \" [Modbus \" + msg.register + \", bit \" + bit + \"]\"; \n\n        if (minfo[\"title\"]) { item.title = minfo[\"title\"] + \", \" + item.title; }\n\n        if (minfo[\"values\"]) {\n            \n            if (minfo[\"values\"][15-bc]) {\n                if (minfo[\"values\"][15-bc][\"\" + item.payload]) { item.payload = minfo[\"values\"][15-bc][\"\" + item.payload]; }\n            }\n        }\n\n\n        \n        oot[item.topic] = item;\n        \n        bc=bc-1;\n\n    }\n    msg.payload = oot;\n    \n    return [null,msg];\n    \n    \n} else {\n    \n   \n           \n    msg.payload = (256 * msg.payload[3]) + msg.payload[4];        \n    msg.payload =  msg.payload / parseFloat(minfo[\"multiplier\"] || 1);\n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\",\"/\");\n\n\n    if (minfo[\"values\"]) {\n        \n        if (minfo[\"values\"]==\"alarmCodes\") { \n            \n            var ac = flow.get(\"alarmCodes\");\n            if (ac[\"\" + msg.payload]) { msg.payload = ac[\"\" + msg.payload]; }\n        }\n        \n        else if (minfo[\"values\"][\"\" + msg.payload]) { msg.payload = minfo[\"values\"][\"\" + msg.payload]; }\n    }\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n    \n    \n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else  { msg.title = (minfo[\"reading\"].split(\".\")[1]?  minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg,null];\n    \n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 430,
        "y": 980,
        "wires": [
            [
                "30c28d7ac8283c61",
                "42fddcb9bdad5db3",
                "20c2cea7ad891ab3"
            ],
            [
                "8559e5bca079505f",
                "7672215a118da1e7",
                "42fddcb9bdad5db3"
            ]
        ]
    },
    {
        "id": "30c28d7ac8283c61",
        "type": "debug",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 670,
        "y": 840,
        "wires": []
    },
    {
        "id": "997578fc266c3969",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "Modbus",
        "func": "// http://www.simplymodbus.ca/FC03.htm\n//11 03 006B 0003 7687\n// 11 03 06 AE41 5652 4340 49AD\n\n// uses address 17 as default.\n\n//var offs = 0;\n//if  (msg.payload[0] === 0) { offs = 1; }\n\nvar address = msg.payload.address || msg.address ||8;\nvar fc = msg.payload.fc || msg.fc ;\nvar register = msg.payload.register || msg.register || 1;\nflow.set(\"curreg\", register);\nflow.set(\"fc\", fc);\n\nregister = register - 1;\n\nvar rlength = msg.payload.rlength || msg.rlength || 1;\n\nvar r1 = Math.floor(register / 256);\nvar r2 = register % 256;\n\n\n\n\nvar targetv = msg.targetv; //999;\n\n\nif (fc != 3 && fc != 6) { return null; }\n\nflow.set(\"modbusIn\",\"\");\n\n//targetv = global.get(\"modbus.\"+register+\".value\") || 0;\n\n//targetv = parseInt(global.get(\"modbus.\"+register+\".multiply\") || 1) * targetv;\n\n\nfunction crc16(buffer) {\n    var crc = 0xFFFF;\n    var odd;\n\n    for (var i = 0; i < buffer.length; i++) {\n        crc = crc ^ buffer[i];\n\n        for (var j = 0; j < 8; j++) {\n            odd = crc & 0x0001;\n            crc = crc >> 1;\n            if (odd) {\n                crc = crc ^ 0xA001;\n            }\n        }\n    }\n\n    return crc;\n}\n\nvar tosend = \"\";\nvar hexString =\"\";\nvar msg2={};\n \nif (fc == 3) {   // read\n\n    \n    tosend = String.fromCharCode(address) + String.fromCharCode(3);\n    \n    tosend += String.fromCharCode(r1) + String.fromCharCode(r2);\n    \n    tosend += String.fromCharCode(0) + String.fromCharCode(rlength);\n    \n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    msg.payload = crc16(msg.payload);\n    hexString  = \"0000\" + msg.payload.toString(16);\n    hexString = hexString.substr(-4);\n    tosend += String.fromCharCode(parseInt(hexString.substr(2,2),16)) + String.fromCharCode(parseInt(hexString.substr(0,2),16)) ;\n    \n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    tosend = \"-\" + tosend;\n    \n    msg2.payload  = Buffer.from(tosend, 'ascii');\n    \n    \n    return [msg,msg2];\n\n} else if (fc == 6 ) {    // write\n\n\n    tosend = String.fromCharCode(address) + String.fromCharCode(6);\n    \n    tosend += String.fromCharCode(r1) + String.fromCharCode(r2);\n    \n    targetv = parseInt(targetv) ;\n    var hexStringValue  = \"0000\" + targetv.toString(16);\n    hexStringValue = hexStringValue.substr(-4);\n    \n    \n    tosend += String.fromCharCode(parseInt(hexStringValue.substr(0,2),16)) + String.fromCharCode(parseInt(hexStringValue.substr(2,2),16)) ;\n    \n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    msg.payload = crc16(msg.payload);\n    hexString  = \"0000\" + msg.payload.toString(16);\n    hexString = hexString.substr(-4);\n    tosend += String.fromCharCode(parseInt(hexString.substr(2,2),16)) + String.fromCharCode(parseInt(hexString.substr(0,2),16)) ;\n   \n       \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    tosend = \"-\" + tosend;\n    msg2.payload  = Buffer.from(tosend, 'ascii');\n    \n    \n    return [msg,msg2];\n\n} \n\n\n",
        "outputs": "2",
        "noerr": 0,
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "9538322d0c0471ab",
                "3b64441dac66d498",
                "ddf87d6f5579abc0"
            ],
            []
        ]
    },
    {
        "id": "1c824e1d18358221",
        "type": "serial in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "serial": "b1efaf6df6d027b0",
        "x": 230,
        "y": 980,
        "wires": [
            [
                "c4f1968c5a8437f6",
                "b1f6a92b88804ebc"
            ]
        ]
    },
    {
        "id": "3b64441dac66d498",
        "type": "serial out",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "serial": "b1efaf6df6d027b0",
        "x": 1210,
        "y": 380,
        "wires": []
    },
    {
        "id": "c4f1968c5a8437f6",
        "type": "debug",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 250,
        "y": 900,
        "wires": []
    },
    {
        "id": "9538322d0c0471ab",
        "type": "debug",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1210,
        "y": 340,
        "wires": []
    },
    {
        "id": "05edbace8496ab06",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "8 - 23",
        "func": "\nmsg.fc = 3;\nmsg.address = 8;\nmsg.register = 23;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1290,
        "y": 1180,
        "wires": [
            [
                "8e39a40787fc90e4"
            ]
        ]
    },
    {
        "id": "9cc69d54f4accfdf",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1060,
        "y": 1180,
        "wires": [
            [
                "05edbace8496ab06"
            ]
        ]
    },
    {
        "id": "3d9715500439f01b",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "8 - 101",
        "func": "\nmsg.fc = 3;\nmsg.address = 8;\nmsg.register = 101;\nmsg.rlength = 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 1220,
        "wires": [
            [
                "8e39a40787fc90e4"
            ]
        ]
    },
    {
        "id": "828c49b4a30e3f83",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1060,
        "y": 1220,
        "wires": [
            [
                "3d9715500439f01b"
            ]
        ]
    },
    {
        "id": "e747f5a91585debd",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "REGISTERS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "[{\"register\":\"1\",\"reading\":\"settings.SlaveMinimumReplyDelay\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"2\",\"reading\":\"settings.RegisterOffset\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"3\",\"reading\":\"settings.SoftwareDefinedModbusAddress\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"4\",\"reading\":\"settings.SoftwareDefinedBitRate\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"1200\",\"1\":\"2400\",\"2\":\"4800\",\"3\":\"9600\",\"4\":\"19200\",\"5\":\"38400\"},\"units\":\"bits/s\"},{\"register\":\"9\",\"reading\":\"settings.SoftwareDefinedParity\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"No parity\",\"1\":\"Even parity\",\"2\":\"Odd parity\"},\"units\":\"bits/s\"},{\"register\":\"10\",\"reading\":\"settings.SoftwareDefinedStopBit\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"No stop bit\",\"1\":\"1 stop bit\",\"2\":\"2 stop bits\"},\"units\":\"bits/s\"},{\"register\":\"21\",\"reading\":\"stat.GENIbusCRCErrorCnt\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"description\":\"Holds a CRC error counter for the GENIbus connection to the E-pump\"},{\"register\":\"22\",\"reading\":\"stat.GENIbusDataErrorCnt\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"23\",\"reading\":\"system.VersionNumber\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"24\",\"reading\":\"system.ActualModbusAddress\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"25\",\"reading\":\"stat.GENIbusTXcountHI\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"26\",\"reading\":\"stat.GENIbusTXcountLO\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"27\",\"reading\":\"stat.GENIbusRXcountHI\",\"multiplier\":\"10\",\"datatype\":\"int16\"},{\"register\":\"28\",\"reading\":\"stat.GENIbusRXcountLO\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"29\",\"reading\":\"stat.GeneralStatus\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"30\",\"reading\":\"system.UnitFamily\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"31\",\"reading\":\"system.UnitType\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"32\",\"reading\":\"system.UnitVersion\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"33\",\"reading\":\"dat.GSMBatteryState\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"values\":{\"0\":\"Battery not present\",\"1\":\"Battery must be replaced\",\"2\":\"Battery charging\",\"3\":\"Battery needs charging, but temperature too high\",\"4\":\"Battery needs charging, but temperature too low\",\"5\":\"Battery low\",\"6\":\"Battery OK\",\"255\":\"Battery state not available\"}},{\"register\":\"34\",\"reading\":\"system.ProductSoftwareVersionHI\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"35\",\"reading\":\"system.ProductSoftwareVersionLO\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"36\",\"reading\":\"system.ProductSoftwareDayMonth\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"37\",\"reading\":\"system.ProductSoftwareYear\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"101\",\"reading\":\"settings.bits101\",\"multiplier\":\"1\",\"datatype\":\"bits\",\"items\":\"settings.RemoteAccessReq,settings.OnOffReq,settings.ResetAlarm,settings.CopyToLocal,settings.EnableMaxFlowLimit,settings.b5,settings.b6,settings.b7,settings.b8,settings.b9,settings.b10,settings.b11,settings.b12,settings.b13,settings.b14,settings.b15\"},{\"register\":\"102\",\"reading\":\"settings.ControlMode\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"Constant speed\",\"1\":\"Constant frequency\",\"3\":\"Constant head\",\"4\":\"Constant pressure\",\"5\":\"Constant differential pressure\",\"6\":\"Proportional pressure\",\"7\":\"Constant flow\",\"8\":\"Constant temperature\",\"10\":\"Constant level\",\"128\":\"AUTOADAPT\",\"129\":\"FLOWADAPT\",\"130\":\"Closed-loop sensor\"}},{\"register\":\"103\",\"reading\":\"settings.OperationMode\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"Auto-control\",\"1\":\"Internal Sensor\",\"4\":\"OpenLoopMin\",\"6\":\"OpenLoopMax\"}},{\"register\":\"104\",\"reading\":\"settings.Setpoint\",\"multiplier\":\"100\",\"datatype\":\"int16\"},{\"register\":\"105\",\"reading\":\"settings.bits105\",\"multiplier\":\"1\",\"datatype\":\"bits\",\"items\":\"settings.Relay1Control,settings.Relay2Control,settings.Relay3Control,settings.Relay4Control\"},{\"register\":\"106\",\"reading\":\"settings.SetMaxFlowLimit\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"107\",\"reading\":\"settings.SetPumpUnixRtcHI\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"108\",\"reading\":\"settings.SetPumpUnixRtcLO\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"201\",\"reading\":\"settings.bits201\",\"multiplier\":\"1\",\"datatype\":\"bits\",\"items\":\"stat.LowFlowStop,stat.CopyToLocal,stat.MaxFlowLimitEnabled,stat.ResetAlarmAck,stat.SetpointInfluence,stat.AtMaxPower,stat.Rotation,stat.Direction,stat.AccessMode,stat.OnOff,stat.Fault,stat.Warning,stat.ForcedToLocal,stat.AtMaxSpeed,stat.RESERVED,stat.AtMinSpeed\",\"values\":[{\"0\":\"Not in Low Flow Stop\",\"1\":\"Low Flow Stop\"},{\"0\":\"Copying disabled\",\"1\":\"Copying enabled\"},{\"0\":\"Disabled\",\"1\":\"Enabled\"},{\"0\":\"No acknowledgement\",\"1\":\"Command acknowledged\"},{\"0\":\"Not active\",\"1\":\"Active\"},{\"0\":\"Not running at power limit\",\"1\":\"Running at power limit\"},{\"0\":\"No rotation\",\"1\":\"Rotation\"},{\"0\":\"Clockwise\",\"1\":\"Counter-clockwise\"},{\"0\":\"Local\",\"1\":\"Remote\"},{\"0\":\"Off\",\"1\":\"On\"},{\"0\":\"No fault\",\"1\":\"Fault\"},{\"0\":\"No warning\",\"1\":\"Warning\"},{\"0\":\"Not forced to local\",\"1\":\"Forced to local\"},{\"0\":\"No\",\"1\":\"Yes\"},{\"0\":\"0\",\"1\":\"1\"},{\"0\":\"No\",\"1\":\"Yes\"}]},{\"register\":\"202\",\"reading\":\"stat.ProcessFeedback\",\"multiplier\":\"100\",\"units\":\"%\",\"datatype\":\"int16\"},{\"register\":\"203\",\"reading\":\"stat.ControlMode\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"Constant speed\",\"1\":\"Constant frequency\",\"3\":\"Constant head\",\"4\":\"Constant pressure\",\"5\":\"Constant differential pressure\",\"6\":\"Proportional pressure\",\"7\":\"Constant flow\",\"8\":\"Constant temperature\",\"10\":\"Constant level\",\"128\":\"AUTOADAPT\",\"129\":\"FLOWADAPT\",\"130\":\"Closed-loop sensor\"}},{\"register\":\"204\",\"reading\":\"stat.OperationMode\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"Auto-control\",\"4\":\"OpenLoopMin\",\"6\":\"OpenLoopMax\"}},{\"register\":\"205\",\"reading\":\"stat.AlarmCode\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":\"alarmCodes\"},{\"register\":\"206\",\"reading\":\"stat.WarningCode\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":\"alarmCodes\"},{\"register\":\"301\",\"reading\":\"dat.Head\",\"multiplier\":\"1000\",\"datatype\":\"int16\",\"title\":\"Actual system head/pressure\",\"units\":\"Bar\"},{\"register\":\"302\",\"reading\":\"dat.VolumeFlow\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"title\":\"Actual system flow\",\"units\":\"m3/h\"},{\"register\":\"303\",\"reading\":\"dat.RelativePerformance\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"title\":\"Performance relative to maximum performance\",\"units\":\"%\"},{\"register\":\"304\",\"reading\":\"dat.Speed\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"title\":\"Motor speed\",\"units\":\"rpm\"},{\"register\":\"305\",\"reading\":\"dat.Frequency\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"title\":\"Actual control signal applied to motor\",\"units\":\"Hz\"},{\"register\":\"306\",\"reading\":\"dat.DigitalInput\",\"datatype\":\"bits\",\"items\":\"dat.DigitalInput0,dat.DigitalInput1,dat.DigitalInput2,dat.DigitalInput3,dat.DigitalInput4,dat.DigitalInput5,dat.DigitalInput6,dat.DigitalInput7\",\"title\":\"Logical value of external digital input signals\"},{\"register\":\"307\",\"reading\":\"dat.DigitalOutput\",\"datatype\":\"bits\",\"items\":\"dat.DigitalOutput0,dat.DigitalOutput1,dat.DigitalOutput2,dat.DigitalOutput3,dat.DigitalOutput4,dat.DigitalOutput5,dat.DigitalOutput6,dat.DigitalOutput7\",\"title\":\"Logical value of external digital output signals\"},{\"register\":\"308\",\"reading\":\"dat.ActualSetpoint\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"title\":\"Actual setpoint\",\"units\":\"%\"},{\"register\":\"309\",\"reading\":\"dat.MotorCurrent\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"title\":\"Actual motor current\",\"units\":\"A\"},{\"register\":\"310\",\"reading\":\"dat.DCLinkVoltage\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"title\":\"Frequency converter DC-Link voltage\",\"units\":\"V\"},{\"register\":\"316\",\"reading\":\"dat.pExternal\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"338\",\"reading\":\"stat.UserSetpoint\",\"multiplier\":\"100\",\"datatype\":\"int16\"}]",
        "payloadType": "json",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "7db05db87caa66c5"
            ]
        ]
    },
    {
        "id": "7db05db87caa66c5",
        "type": "split",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 310,
        "y": 100,
        "wires": [
            [
                "65d1c8efbc8e0bda"
            ]
        ]
    },
    {
        "id": "65d1c8efbc8e0bda",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "Store Registers",
        "func": "\nvar rin = msg.payload;\nif (rin.register<1) { return null; } \n\n\nvar v = global.get(\"readings.\" + rin.reading + \".value\") || 0\nrin[\"value\"] = v;\n\n\n\nflow.set(\"registers.r\" + rin.register, rin);\n\nmsg.payload = flow.get(\"registers\") ;\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "fc6a37df6e7eaceb",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "registers",
        "payloadType": "flow",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "516584b73390ebd2"
            ]
        ]
    },
    {
        "id": "932e6db1e7b0b208",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "DEVICES",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "[{\"address\":\"1\",\"device\":\"mainpump\"}]",
        "payloadType": "json",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "7cb85d316528c9b9"
            ]
        ]
    },
    {
        "id": "7cb85d316528c9b9",
        "type": "split",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 310,
        "y": 160,
        "wires": [
            [
                "16082867395d162d"
            ]
        ]
    },
    {
        "id": "16082867395d162d",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "Store Devices",
        "func": "\nvar rin = msg.payload;\nif (rin.address<1) { return null; } \n\n\nflow.set(\"devices.\" + rin.address, rin);\n\n\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "516584b73390ebd2",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "func": "\nvar oot = [];\n\nfor (var r in flow.get(\"registers\")) {\n    for (var d in flow.get(\"devices\")) {\n    \n    \n        var item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = flow.get(\"registers.\"+r+\".register\");\n        item.rlength = 1;\n\n        oot.push(item);\n        \n    }\n    \n}\n\nmsg.payload = oot;\n\nflow.set(\"msglist\",[]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "be3cf168ddf29dd3"
            ]
        ]
    },
    {
        "id": "7ae2d99065b67747",
        "type": "split",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 300,
        "wires": [
            [
                "2e6dbaa55a5f7258"
            ]
        ]
    },
    {
        "id": "e7c28bcdb1551b17",
        "type": "debug",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "7c75803224f63aee",
        "type": "link out",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1075,
        "y": 900,
        "wires": []
    },
    {
        "id": "8559e5bca079505f",
        "type": "split",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 590,
        "y": 1060,
        "wires": [
            [
                "0c78f6e795125a3a"
            ]
        ]
    },
    {
        "id": "257f96816cd1d795",
        "type": "debug",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 910,
        "y": 1060,
        "wires": []
    },
    {
        "id": "7672215a118da1e7",
        "type": "debug",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 490,
        "y": 1100,
        "wires": []
    },
    {
        "id": "4a797a4c06176a17",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "8 - 105",
        "func": "\nmsg.fc = 3;\nmsg.address = 8;\nmsg.register = 105;\nmsg.rlength = 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 1300,
        "wires": [
            [
                "8e39a40787fc90e4"
            ]
        ]
    },
    {
        "id": "4082fa8fb65650c3",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1060,
        "y": 1300,
        "wires": [
            [
                "4a797a4c06176a17"
            ]
        ]
    },
    {
        "id": "92ab6293fdaeccbf",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "8 - 201",
        "func": "\nmsg.fc = 3;\nmsg.address = 8;\nmsg.register = 201;\nmsg.rlength = 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 1340,
        "wires": [
            [
                "8e39a40787fc90e4"
            ]
        ]
    },
    {
        "id": "4a6c43c320456a92",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1060,
        "y": 1340,
        "wires": [
            [
                "92ab6293fdaeccbf"
            ]
        ]
    },
    {
        "id": "59ee48db3f1c674a",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "8 - 316 pressure",
        "func": "\nmsg.fc = 3;\nmsg.address = 1;\nmsg.register = 316;\nmsg.rlength = 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "2e6dbaa55a5f7258"
            ]
        ]
    },
    {
        "id": "ad037a8b0f3fd676",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "59ee48db3f1c674a"
            ]
        ]
    },
    {
        "id": "813c38051d2ce2d5",
        "type": "debug",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1090,
        "y": 1000,
        "wires": []
    },
    {
        "id": "50c1d02eb4b1aa9c",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "{\"fc\":3, \"address\":\"8\",\"register\":\"101\",\"rlength\":1}",
                "vt": "json"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"fc\":3, \"address\":\"8\",\"register\":\"101\",\"rlength\":1}",
        "payloadType": "json",
        "x": 950,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "39bd600688b8060e",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "1 - 101 - RUN",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 101;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 3;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 640,
        "wires": [
            [
                "f17e571bdf0bf51e"
            ]
        ]
    },
    {
        "id": "bc2b87c8753f3411",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 640,
        "wires": [
            [
                "39bd600688b8060e"
            ]
        ]
    },
    {
        "id": "6cb6c5797de1ce33",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "1 - 101 - OFF",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 101;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 680,
        "wires": [
            [
                "f17e571bdf0bf51e"
            ]
        ]
    },
    {
        "id": "6632a4d5e0de6e02",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 680,
        "wires": [
            [
                "6cb6c5797de1ce33"
            ]
        ]
    },
    {
        "id": "c7853b5a8b4d58b1",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "1 - 104 - Setpoint 0%",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 104;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 0;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 500,
        "wires": [
            [
                "f17e571bdf0bf51e"
            ]
        ]
    },
    {
        "id": "7e78c0971f45347e",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "c7853b5a8b4d58b1"
            ]
        ]
    },
    {
        "id": "bcbf3c8bccec66e2",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "Read Key Registers",
        "func": "\n\nvar oot = [];\n\n    for (var d in flow.get(\"devices\")) {\n    \n    \n        var item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 301;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n        \n        item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 304;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n        \n        item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 205;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n        \n        item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 206;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n    }\n    \n\n\nmsg.payload = oot;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 300,
        "wires": [
            [
                "7ae2d99065b67747"
            ]
        ]
    },
    {
        "id": "8b4b2020095b0fa7",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "bcbf3c8bccec66e2"
            ]
        ]
    },
    {
        "id": "2e6dbaa55a5f7258",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "SHIFT",
        "func": "\nvar msglist=flow.get(\"msglist\") || [];\n\n//if (msglist.length> 100) { msglist = []; }\n    \nif (msg.payload == \"next\") { \n    \n    if (!msglist[0]) { return null; }\n    \n    if (flow.get(\"modbusIn\")===\"\") { return null; }\n    \n    msg = msglist[0];\n    msglist.shift();\n    flow.set(\"msglist\",msglist);\n    return msg;\n}\n\nelse {   \n    \n    msglist.push(msg); \n    flow.set(\"msglist\",msglist);\n    return null;\n    \n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            [
                "997578fc266c3969"
            ]
        ]
    },
    {
        "id": "de6a3a29f1a6c86b",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "next",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "next",
        "payloadType": "str",
        "x": 650,
        "y": 360,
        "wires": [
            [
                "2e6dbaa55a5f7258"
            ]
        ]
    },
    {
        "id": "42fddcb9bdad5db3",
        "type": "link out",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "links": [
            "c4e46a82.1c9e7",
            "1c29d514fcf2a8d2"
        ],
        "x": 515,
        "y": 880,
        "wires": []
    },
    {
        "id": "ddf87d6f5579abc0",
        "type": "trigger",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "op1": "reading",
        "op2": "done",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 1200,
        "y": 460,
        "wires": [
            [
                "49d45c44ae5dd822"
            ]
        ]
    },
    {
        "id": "49d45c44ae5dd822",
        "type": "change",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "modbusIn",
                "pt": "flow",
                "to": "xxx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "1c29d514fcf2a8d2",
        "type": "link in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "links": [
            "42fddcb9bdad5db3"
        ],
        "x": 775,
        "y": 260,
        "wires": [
            [
                "4443bcd75731443f"
            ]
        ]
    },
    {
        "id": "4443bcd75731443f",
        "type": "change",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 260,
        "wires": [
            [
                "2e6dbaa55a5f7258"
            ]
        ]
    },
    {
        "id": "301f85121cba0997",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 990,
        "y": 460,
        "wires": [
            [
                "ddf87d6f5579abc0"
            ]
        ]
    },
    {
        "id": "a2ba1c5262668d66",
        "type": "link in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "links": [
            "2ef9eb1009f776b0",
            "8e39a40787fc90e4",
            "be5ca099.80857",
            "bd6d87dee9526f7d",
            "1af4bb918654299b"
        ],
        "x": 735,
        "y": 420,
        "wires": [
            [
                "2e6dbaa55a5f7258"
            ]
        ]
    },
    {
        "id": "2ef9eb1009f776b0",
        "type": "link out",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "links": [
            "a2ba1c5262668d66",
            "9d7ee02bd3a26b70"
        ],
        "x": 735,
        "y": 500,
        "wires": []
    },
    {
        "id": "8e39a40787fc90e4",
        "type": "link out",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "links": [
            "a2ba1c5262668d66"
        ],
        "x": 1455,
        "y": 1280,
        "wires": []
    },
    {
        "id": "af4e860afa212da7",
        "type": "trigger",
        "z": "beaf3f8ef0e03efe",
        "name": "Read changes",
        "op1": "",
        "op2": "{\"fc\":3,\"address\":\"4\",\"register\":\"101\",\"rlength\":1}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 820,
        "y": 620,
        "wires": [
            [
                "bd6d87dee9526f7d",
                "10a0de4f2473738a"
            ]
        ]
    },
    {
        "id": "9d7ee02bd3a26b70",
        "type": "link in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "links": [
            "2ef9eb1009f776b0",
            "1af4bb918654299b"
        ],
        "x": 755,
        "y": 580,
        "wires": [
            [
                "af4e860afa212da7"
            ]
        ]
    },
    {
        "id": "bd6d87dee9526f7d",
        "type": "link out",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "links": [
            "a2ba1c5262668d66"
        ],
        "x": 1015,
        "y": 620,
        "wires": []
    },
    {
        "id": "4e37d7ebab79a721",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "func": "//if(Buffer.from(msg.payload, 'ascii')[1]!==3) { return null; }\n\nfunction hex2bin(hex){\n    return (\"00000000\" + (parseInt(hex)).toString(2)).substr(-8);\n}\n\nfunction dec2bin(dec){\n  return (dec >>> 0).toString(2);\n}\n\nvar msg2 = { \"payload\": Buffer.from(msg.payload, 'ascii') };\n\nmsg.address = msg.payload[0];\n//msg.register = (256 * msg.payload[2]) + msg.payload[3];\nmsg.register = flow.get(\"curreg\");\n\n\nminfo = flow.get(\"registers.r\" + msg.register) || null;\ndinfo = flow.get(\"devices.\" + msg.address) || null;\n\nif (!minfo) { return null; }\nif (!dinfo) { return null; }  \n\nif (minfo.datatype==\"bits\") {\n    \n    var oot = {};\n    var bits = minfo.items.split(\",\");\n    var bc=15;\n    for (var bit in bits) {\n    \n        var item = {};\n        item.payload = (256 * msg.payload[3]) + msg.payload[4];        \n        item.payload =   (\"00000000000000000\" + dec2bin(item.payload)).substr(-16);\n        item.payload =  item.payload.substr(bc,1);\n        \n        item.topic = dinfo.device + \"/\" + bits[bit].replace(\".\",\"/\");\n        \n        if (minfo[\"units\"]) { item.units = minfo[\"units\"]; }\n        item.title = (bits[bit].split(\".\")[1]?  bits[bit].split(\".\")[1]:bits[bit]) + \" [Modbus \" + msg.register + \", bit \" + bit + \"]\"; \n\n        if (minfo[\"title\"]) { item.title = minfo[\"title\"] + \", \" + item.title; }\n        \n        oot[item.topic] = item;\n        \n        bc=bc-1;\n\n    }\n    msg.payload = oot;\n    \n    return [null,msg];\n    \n    \n} else {\n    \n   \n           \n    msg.payload = (256 * msg.payload[3]) + msg.payload[4];        \n    msg.payload =  msg.payload / parseFloat(minfo[\"multiplier\"] || 1);\n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\",\"/\");\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n    \n    \n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else  { msg.title = (minfo[\"reading\"].split(\".\")[1]?  minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg,null];\n    \n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 310,
        "y": 1140,
        "wires": [
            [],
            [
                "824eb110cf8e27ac"
            ]
        ]
    },
    {
        "id": "824eb110cf8e27ac",
        "type": "split",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 410,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "0c78f6e795125a3a",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "func": "msg= msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 1060,
        "wires": [
            [
                "257f96816cd1d795",
                "ae060a8c0eaacb55"
            ]
        ]
    },
    {
        "id": "f853819140245c5c",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "func": "//if(Buffer.from(msg.payload, 'ascii')[1]!==3) { return null; }\n\nflow.set(\"modbusIn\",msg.payload);\n\n\nif (flow.get(\"fc\")==6) { return null; }  // do not process set command responses\n\nfunction hex2bin(hex){\n    return (\"00000000\" + (parseInt(hex)).toString(2)).substr(-8);\n}\n\nfunction dec2bin(dec){\n  return (dec >>> 0).toString(2);\n}\n\nvar msg2 = { \"payload\": Buffer.from(msg.payload, 'ascii') };\n\nmsg.address = msg.payload[0];\n//msg.register = (256 * msg.payload[2]) + msg.payload[3];\nmsg.register = flow.get(\"curreg\");\n\n\nminfo = flow.get(\"registers.r\" + msg.register) || null;\ndinfo = flow.get(\"devices.\" + msg.address) || null;\n\nif (!minfo) { return null; }\nif (!dinfo) { return null; }  \n\nif (minfo.datatype==\"bits\") {\n    \n    var oot = {};\n    var bits = minfo.items.split(\",\");\n    var bc=15;\n    for (var bit in bits) {\n    \n        var item = {};\n        item.payload = (256 * msg.payload[3]) + msg.payload[4];        \n        item.payload =   (\"00000000000000000\" + dec2bin(item.payload)).substr(-16);\n        item.payload =  item.payload.substr(bc,1);\n        \n        item.topic = dinfo.device + \"/\" + bits[bit].replace(\".\",\"/\");\n        \n        if (minfo[\"units\"]) { item.units = minfo[\"units\"]; }\n        item.title = (bits[bit].split(\".\")[1]?  bits[bit].split(\".\")[1]:bits[bit]) + \" [Modbus \" + msg.register + \", bit \" + bit + \"]\"; \n\n        if (minfo[\"title\"]) { item.title = minfo[\"title\"] + \", \" + item.title; }\n        \n        oot[item.topic] = item.payload;\n        \n        bc = bc - 1;\n\n    }\n    msg.payload = oot;\n    \n    return [null,msg];\n    \n    \n} else {\n    \n   \n           \n    msg.payload = (256 * msg.payload[3]) + msg.payload[4];        \n    msg.payload =  msg.payload / parseFloat(minfo[\"multiplier\"] || 1);\n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\",\"/\");\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else  { msg.title = (minfo[\"reading\"].split(\".\")[1]?  minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n\n    return [msg,null];\n    \n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 715.5833129882812,
        "y": 1163.5833740234375,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a63482da9a0f0948",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "8 - 103",
        "func": "\nmsg.fc = 3;\nmsg.address = 8;\nmsg.register = 103;\nmsg.rlength = 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 1260,
        "wires": [
            [
                "8e39a40787fc90e4"
            ]
        ]
    },
    {
        "id": "7d444dec5e4e2ff4",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1060,
        "y": 1260,
        "wires": [
            [
                "a63482da9a0f0948"
            ]
        ]
    },
    {
        "id": "ae060a8c0eaacb55",
        "type": "subflow:b2d492ed.c4def",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "x": 880,
        "y": 980,
        "wires": [
            [
                "7c75803224f63aee",
                "813c38051d2ce2d5"
            ]
        ]
    },
    {
        "id": "413f4bd4e3f5342f",
        "type": "template",
        "z": "beaf3f8ef0e03efe",
        "name": "alarmCodes",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "0 ok\n1 Leakage current\n84 Memory access error\n181 Signal fault, PTC sensor (shortcircuited)\n2 Missing phase\n85 Verification error, BE parameter area (EEPROM)\n182 Signal fault, bearing temperature sensor (Pt100), bottom bearing\n3 External fault signal \n86 Fault (add-on) I/O module \n183 Signal fault, extra temperature sensor\n4 Too many restarts \n88 Sensor fault \n184 Signal fault, general-purpose sensor\n5 Regenerative braking \n89 Signal fault, (feedback) sensor 1 \n185 Unknown sensor type\n6 Mains fault \n90 Signal fault, speed sensor \n186 Signal fault, power meter sensor\n7 Too many hardware shutdowns \n91 Signal fault, temperature sensor 1 \n187 Signal fault, energy meter\n8 PWM switching frequency reduced \n92 Calibration fault, (feedback) sensor \n188 Signal fault, user-defined sensor\n9 Phase sequence reversal \n93 Signal fault, sensor 2 \n189 Signal fault, level sensor\n10 Communication fault, pump \n94 Limit exceeded, sensor 1 \n190 Limit exceeded, sensor 1 (e.g. alarm level in WW application)\n11 Water-in-oil fault (motor oil) \n95 Limit exceeded, sensor 2 \n191 Limit exceeded, sensor 2 (e.g. high level in WW application)\n12 Time for service (general service information) \n96 Setpoint signal outside range \n192 Limit exceeded, sensor 3 (e.g. overflow level in WW application)\n13 Moisture alarm, analog \n97 Signal fault, setpoint input \n193 Limit exceeded, sensor 4 (e.g. low level in WW/tank filling application \n14 Electronic DC-link protection activated (ERP) \n98 Signal fault, input for setpoint influence 194 Limit exceeded, sensor 5\n15 Communication fault, main system (SCADA) \n99 Signal fault, input for analog setpoint \n195 Limit exceeded, sensor 6\n16 Other \n100 RTC time synchronisation with GSM occured \n196 Operation with reduced efficiency\n17 Performance requirement cannot be met \n102 Dosing pump not ready \n197 Operation with reduced pressure\n18 Commanded alarm standby (trip) \n103 Emergency stop \n198 Operation with increased power consumption\n19 Diaphragm break (dosing pump) \n104 Software shutdown \n199 Process out of range (monitoring/estimation/calculation/control)\n20 Insulation resistance low \n105 Electronic rectifier protection activated (ERP) \n200 Application alarm\n21 Too many starts per hour \n106 Electronic inverter protection activated (EIP) \n201 External sensor input high\n22 Moisture switch alarm, digital \n110 Skew load, electrical asymmetry \n202 External sensor input low\n23 Smart trim gap alarm \n111 Current asymmetry \n203 Alarm on all pumps\n24 Vibration \n112 Cos φ too high \n204 Inconsistency between sensors\n25 Setup conflict \n113 Cos φ too low \n205 Level float switch sequence inconsistency\n26 Load continues even if the motor has been switched off \n114 Motor heater function activated (frost protection) \n206 Water shortage, level 1\n27 External motor protector activated (e.g. MP 204) \n115 Too many grinder reversals or grinder reversal attempt failed \n207 Water leakage\n28 Battery low 116 Grinder motor over temperature \n208 Cavitation\n29 Turbine operation (impellers forced backwards) \n118 Signal fault, hydrogen sulfide H2S sensor \n209 Non-return valve fault\n30 Change bearings (specific service information) \n119 Signal fault, analog input AI4 \n210 High pressure\n31 Change varistor(s) (specific service information) \n120 Auxiliary winding fault (singlephase motors) \n211 Low pressure\n32 Overvoltage \n121 Auxiliary winding current too high (single-phase motors) \n212 Diaphragm tank precharge pressure out of range\n33 Soon time for service (general service information) \n122 Auxiliary winding current too low (single-phase motors) \n213 VFD not ready\n34 No priming water \n123 Start capacitor, low (single-phase motors) \n214 Water shortage, level 2 \n35 Gas in pump head, deaerating problem \n124 Run capacitor, low (single-phase motors) \n215 Soft pressure build-up time-out\n36 Discharge valve leakage \n125 Signal fault, outdoor temperature sensor \n216 Pilot pump alarm\n37 Suction valve leakage \n126 Signal fault, air temperature sensor \n217 Alarm, general-purpose sensor high\n38 Vent valve defective \n127 Signal fault, shunt relative pressure sensor \n218 Alarm, general-purpose sensor low\n39 Valve stuck/defective \n128 Strainer clogged \n219 Pressure relief not adequate\n40 Undervoltage \n144 Motor temperature 3 (Pt100,t_mo3) \n220 Fault, motor contactor feedback\n41 Undervoltage transient \n145 Bearing temperature high (Pt100), in general or top bearing \n221 Fault, mixer contactor feedback\n42 Cut-in fault (dV/dt) \n146 Bearing temperature high (Pt100), middle bearing \n222 Time for service, mixer\n45 Voltage asymmetry \n147 Bearing temperature high (Pt100), bottom bearing \n223 Maximum number of mixer starts per hour exceeded\n48 Overload \n148 Motor bearing temperature high (Pt100) in drive end (DE) \n224 Pump fault (due to auxiliary component or general fault)\n49 Overcurrent (i_line, i_dc, i_mo) \n149 Motor bearing temperature high (Pt100) in non-drive end (NDE) \n225 Communication fault, pump module\n50 Motor protection function, general shutdown (MPF) \n150 Fault (add-on) pump module \n226 Communication fault, I/O module\n51 Blocked motor/pump \n151 Fault, display (HMI) \n227 Combi event\n52 Motor slip high \n152 Communication fault, add-on module \n228 Night flow max. limit exceeded\n53 Stalled motor \n153 Fault, analog output \n229 Water on floor\n54 Motor protection function, 3 sec. limit \n154 Communication fault, display \n230 Network alarm\n55 Motor current protection activated (MCP) \n155 Inrush fault \n231 Ethernet: No IP address from DHCP server\n56 Underload \n156 Communication fault, internal frequency converter module \n232 Ethernet: Auto-disabled due to misuse\n57 Dry running \n157 Real-time clock out of order \n233 Ethernet: IP address conflict\n58 Low flow \n158 Hardware circuit measurement fault \n234 Backup pump alarm\n59 No flow \n159 CIM fault (Communication Interface Module) \n235 Gas detected\n60 Low input power \n160 GSM modem, SIM card fault \n236 Pump 1 fault\n64 Overtemperature \n161 Sensor supply fault, 5 V \n237 Pump 2 fault\n65 Motor temperature 1 (t_m or t_mo or t_mo1) \n162 Sensor supply fault, 24 V \n238 Pump 3 fault\n66 Temperature, control electronics (t_e) \n163 Measurement fault, motor protection \n239 Pump 4 fault\n67 Temperature too high, internal frequency converter module (t_m) \n164 Signal fault, LiqTec sensor \n240 Lubricate bearings (specific service information)\n68 External temperature/water temperature (t_w) \n165 Signal fault, analog input 1 \n241 Motor phase failure\n69 Thermal relay 1 in motor (e.g. Klixon) \n166 Signal fault, analog input 2 \n242 Automatic motor model recognition failed\n70 Thermal relay 2 in motor (e.g. thermistor) \n167 Signal fault, analog input 3 \n243 Motor relay has been forced (manually operated/commanded)\n71 Motor temperature 2 (Pt100, t_mo2) \n168 Signal fault, pressure sensor \n244 Fault, On/Off/Auto switch\n72 Hardware fault, type 1 \n169 Signal fault, flow sensor \n245 Pump continuous runtime too long\n73 Hardware shutdown (HSD) \n170 Signal fault, water-in-oil (WIO) sensor \n246 User-defined relay has been forced (manually operated/commanded)\n74 Internal supply voltage too high \n171 Signal fault, moisture sensor \n247 Power-on notice (device/system has been switched off)\n75 Internal supply voltage too low \n172 Signal fault, atmospheric pressure sensor \n248 Fault, battery/UPS\n76 Internal communication fault \n173 Signal fault, rotor position sensor (Hall sensor) \n249 User-defined event 1\n77 Communication fault, twin-head pump \n174 Signal fault, rotor origo sensor \n250 User-defined event 2\n78 Fault, speed plug \n175 Signal fault, temperature sensor 2 (t_mo2) \n251 User-defined event 3\n79 Functional fault, add-on module \n176 Signal fault, temperature sensor 3 (t_mo3) \n252 User-defined event 4\n80 Hardware fault, type 2 \n177 Signal fault, Smart trim gap sensor \n253 SMS data from DDD sensor not received within time\n81 Verification error, data area (RAM) \n178 Signal fault, vibration sensor \n254 Inconsistent data model\n82 Verification error, code area (ROM, FLASH) \n179 Signal fault, bearing temperature sensor (Pt100), general or top bearing\n83 Verification error, FE parameter area (EEPROM) \n180 Signal fault, bearing temperature sensor (Pt100), middle bearing",
        "output": "str",
        "x": 870,
        "y": 100,
        "wires": [
            [
                "715ee7565b7b6581"
            ]
        ]
    },
    {
        "id": "05b493ba6c4968a0",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 100,
        "wires": [
            [
                "413f4bd4e3f5342f"
            ]
        ]
    },
    {
        "id": "c4e7d08a283d1625",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "Store Alarms",
        "func": "\nvar rin = msg.payload;\n\nvar split = msg.payload.indexOf(\" \");\n\nvar ac = msg.payload.substr(0,split);\nvar acv = (msg.payload.substr(split+1)).trim();\n\nvar alarmCodes = flow.get(\"alarmCodes\") || {};\n\nalarmCodes[ac] = acv;\n\nflow.set(\"alarmCodes\", alarmCodes);\n\n\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "715ee7565b7b6581",
        "type": "split",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 100,
        "wires": [
            [
                "c4e7d08a283d1625"
            ]
        ]
    },
    {
        "id": "835acfdbc9c575e5",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "1 - 104 - Setpoint 50%",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 104;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 5000;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 540,
        "wires": [
            [
                "f17e571bdf0bf51e"
            ]
        ]
    },
    {
        "id": "6f3eda1b301f5165",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "835acfdbc9c575e5"
            ]
        ]
    },
    {
        "id": "f17e571bdf0bf51e",
        "type": "change",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "msglist",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 560,
        "wires": [
            [
                "2ef9eb1009f776b0"
            ]
        ]
    },
    {
        "id": "f1debab435a28583",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 1440,
        "wires": [
            [
                "ca296fc1a5fb141c"
            ]
        ]
    },
    {
        "id": "ca296fc1a5fb141c",
        "type": "file in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "filename": "/var/www/html/ihiu/files/dashboards/magnaScreen.svg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 660,
        "y": 1440,
        "wires": [
            [
                "5a3ed3727eb65c6c"
            ]
        ]
    },
    {
        "id": "219ddd19296bf09d",
        "type": "link out",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "links": [
            "e77ecb2f26288b96"
        ],
        "x": 1135,
        "y": 1440,
        "wires": []
    },
    {
        "id": "5a3ed3727eb65c6c",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "func": "//msg.topic = \"ihiu/ei3boogh/pumpM1/svg/magnaScreen\";\nmsg.topic = \"svg/magnaScreen\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1440,
        "wires": [
            [
                "219ddd19296bf09d"
            ]
        ]
    },
    {
        "id": "290b16499c40ee7d",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 2100,
        "wires": [
            [
                "354e219cc4ee6c0d"
            ]
        ]
    },
    {
        "id": "354e219cc4ee6c0d",
        "type": "change",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "readings.local.pumpA5",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "readings.local.pumpC1C2C3",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "readings.local.pumpDE1",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "readings.local.pumpA1A2",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "074d6f5f408b0bbf",
        "type": "mqtt in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "topic": "+/+/pumpA5/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "83e9e245c2b6c61f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 270,
        "y": 1840,
        "wires": [
            [
                "16e57f4fc3dc7fc8"
            ]
        ]
    },
    {
        "id": "1d52189f85a89e1c",
        "type": "mqtt out",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "broker": "dfca4ae6338cf9b4",
        "x": 700,
        "y": 1940,
        "wires": []
    },
    {
        "id": "16e57f4fc3dc7fc8",
        "type": "change",
        "z": "beaf3f8ef0e03efe",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1940,
        "wires": [
            [
                "1d52189f85a89e1c"
            ]
        ]
    },
    {
        "id": "087d201b94832fc1",
        "type": "mqtt in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "topic": "+/+/pumpDE1/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "83e9e245c2b6c61f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 260,
        "y": 1960,
        "wires": [
            [
                "16e57f4fc3dc7fc8"
            ]
        ]
    },
    {
        "id": "fc1d81c839fa4f5e",
        "type": "mqtt in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "topic": "+/+/pumpC1C2C3/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "83e9e245c2b6c61f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 250,
        "y": 1900,
        "wires": [
            [
                "16e57f4fc3dc7fc8"
            ]
        ]
    },
    {
        "id": "0cb32e41b122c973",
        "type": "mqtt in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "topic": "+/+/pumpA1A2/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "83e9e245c2b6c61f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 260,
        "y": 2020,
        "wires": [
            [
                "16e57f4fc3dc7fc8"
            ]
        ]
    },
    {
        "id": "a58555241ba935d4",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "auto",
        "func": "\nmsg.fc = 6;\nmsg.address = 4;\nmsg.register = 101;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 0;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "f17e571bdf0bf51e"
            ]
        ]
    },
    {
        "id": "f3c23e3a18e38ae6",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "a58555241ba935d4"
            ]
        ]
    },
    {
        "id": "840d78d5df5c5c67",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "1 - 102 - control mode",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 102;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 5;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 760,
        "wires": [
            [
                "f17e571bdf0bf51e"
            ]
        ]
    },
    {
        "id": "d2ab75ccde07371a",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 760,
        "wires": [
            [
                "840d78d5df5c5c67"
            ]
        ]
    },
    {
        "id": "10a0de4f2473738a",
        "type": "trigger",
        "z": "beaf3f8ef0e03efe",
        "name": "Read changes",
        "op1": "",
        "op2": "{\"fc\":3,\"address\":\"4\",\"register\":\"102\",\"rlength\":1}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 820,
        "y": 680,
        "wires": [
            [
                "bd6d87dee9526f7d",
                "a5ea280b829e52f6"
            ]
        ]
    },
    {
        "id": "afb41e30b1986033",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "1 - 103 - operation mode",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 103;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 0;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 820,
        "wires": [
            [
                "f17e571bdf0bf51e"
            ]
        ]
    },
    {
        "id": "406c41f3e3bf82ee",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 820,
        "wires": [
            [
                "afb41e30b1986033"
            ]
        ]
    },
    {
        "id": "a5ea280b829e52f6",
        "type": "trigger",
        "z": "beaf3f8ef0e03efe",
        "name": "Read changes",
        "op1": "",
        "op2": "{\"fc\":3,\"address\":\"4\",\"register\":\"103\",\"rlength\":1}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 820,
        "y": 740,
        "wires": [
            [
                "bd6d87dee9526f7d"
            ]
        ]
    },
    {
        "id": "9ee28d536568f3d3",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "1 - 104 - Setpoint 60%",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 104;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 6000;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            [
                "f17e571bdf0bf51e"
            ]
        ]
    },
    {
        "id": "eabe1161a65c5f5f",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "9ee28d536568f3d3"
            ]
        ]
    },
    {
        "id": "7357eab91bc117a3",
        "type": "delay",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 640,
        "y": 240,
        "wires": [
            [
                "2e6dbaa55a5f7258"
            ]
        ]
    },
    {
        "id": "be3cf168ddf29dd3",
        "type": "split",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "7357eab91bc117a3",
                "e7c28bcdb1551b17"
            ]
        ]
    },
    {
        "id": "3112d186945dee36",
        "type": "mqtt in",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "topic": "+/+/+/cmd/run",
        "qos": "0",
        "datatype": "auto",
        "broker": "83e9e245c2b6c61f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 210,
        "y": 1560,
        "wires": [
            [
                "23059da159a8e3ad"
            ]
        ]
    },
    {
        "id": "f33bce84bb6a7859",
        "type": "debug",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1560,
        "wires": []
    },
    {
        "id": "23059da159a8e3ad",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "is mine",
        "func": "\nvar dev = msg.topic.split(\"/\")[2];\n\n\nvar foundit = false;\n\nfor (var d in flow.get(\"devices\")) {\n    \n    if (dev == (flow.get(\"devices.\"+d+\".device\")||\"\")) {  \n        foundit = true; \n        msg.address = flow.get(\"devices.\"+d+\".address\");\n        break; \n        \n    }\n    \n}\nif (foundit == false) { return null; }\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1560,
        "wires": [
            [
                "4c06b9160ecf9010"
            ]
        ]
    },
    {
        "id": "4c06b9160ecf9010",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "101 - RUN",
        "func": "\nmsg.fc = 6;\n//msg.address = 4;\nmsg.register = 101;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\nif (msg.payload == \"0\") { msg.targetv = 1; } else  { msg.targetv = 3; }\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1560,
        "wires": [
            [
                "6fced7113f348552",
                "024cf41ea5e4df06"
            ]
        ]
    },
    {
        "id": "6fced7113f348552",
        "type": "subflow:b2d492ed.c4def",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "x": 760,
        "y": 1560,
        "wires": [
            [
                "f33bce84bb6a7859",
                "86251edb191d902d"
            ]
        ]
    },
    {
        "id": "1af4bb918654299b",
        "type": "link out",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "links": [
            "a2ba1c5262668d66",
            "9d7ee02bd3a26b70"
        ],
        "x": 935,
        "y": 1700,
        "wires": []
    },
    {
        "id": "024cf41ea5e4df06",
        "type": "rbe",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "x": 650,
        "y": 1640,
        "wires": [
            [
                "4dfd704f86708402"
            ]
        ]
    },
    {
        "id": "4dfd704f86708402",
        "type": "change",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "msglist",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 1700,
        "wires": [
            [
                "1af4bb918654299b"
            ]
        ]
    },
    {
        "id": "1c84232c2872707e",
        "type": "change",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "points",
                "pt": "msg",
                "to": "5000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 940,
        "wires": [
            [
                "7c75803224f63aee"
            ]
        ]
    },
    {
        "id": "20c2cea7ad891ab3",
        "type": "switch",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Alarm",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Warning",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "dat/Head",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "dat/Speed",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 630,
        "y": 920,
        "wires": [
            [
                "7c75803224f63aee"
            ],
            [
                "7c75803224f63aee"
            ],
            [
                "1c84232c2872707e"
            ],
            [
                "1c84232c2872707e"
            ],
            [
                "ae060a8c0eaacb55"
            ]
        ]
    },
    {
        "id": "86251edb191d902d",
        "type": "delay",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 870,
        "y": 1620,
        "wires": [
            [
                "1af4bb918654299b"
            ]
        ]
    },
    {
        "id": "c5ba520ee04dd3fc",
        "type": "function",
        "z": "beaf3f8ef0e03efe",
        "name": "1 - 101 - No CONTROL",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 101;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 0;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 720,
        "wires": [
            [
                "f17e571bdf0bf51e"
            ]
        ]
    },
    {
        "id": "d0eceb9964487696",
        "type": "inject",
        "z": "beaf3f8ef0e03efe",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 720,
        "wires": [
            [
                "c5ba520ee04dd3fc"
            ]
        ]
    },
    {
        "id": "cdf406310826ae51",
        "type": "comment",
        "z": "2f6b80b0432d3773",
        "name": "",
        "info": "192.168.1.60\nport 502\nunitid: 206\n\nSchneider pm5000 \n3203 = energy\n3059 = kW\n\nhttps://ckm-content.se.com/ckmContent/sfc/servlet.shepherd/document/download/0691H00000EFRz4QAH\n\nhttps://nodejs.org/api/buffer.html\n\nhttps://github.com/BiancoRoyal/node-red-contrib-modbus/wiki/Buffer-8Bit,-16Bit,-32Bit,-64Bit,-128Bit-...-reading-with-SDM630-power-meter\n\n\n",
        "x": 300,
        "y": 120,
        "wires": []
    },
    {
        "id": "7b2aae515aa00dd9",
        "type": "modbus-read",
        "z": "2f6b80b0432d3773",
        "name": "Energy",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "206",
        "dataType": "HoldingRegister",
        "adr": "3203",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "d71e6162d7e087b2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 420,
        "wires": [
            [],
            [
                "623058ec96cced69",
                "a87209da70a92820"
            ]
        ]
    },
    {
        "id": "623058ec96cced69",
        "type": "modbus-response",
        "z": "2f6b80b0432d3773",
        "name": "",
        "registerShowMax": 20,
        "x": 415,
        "y": 400,
        "wires": [],
        "l": false
    },
    {
        "id": "9884e48ab8c26a43",
        "type": "modbus-read",
        "z": "2f6b80b0432d3773",
        "name": "Power",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "206",
        "dataType": "HoldingRegister",
        "adr": "3059",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "d71e6162d7e087b2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 600,
        "wires": [
            [],
            [
                "4f58f95d324b8b61",
                "d54ad933a888a8fe"
            ]
        ]
    },
    {
        "id": "4f58f95d324b8b61",
        "type": "modbus-response",
        "z": "2f6b80b0432d3773",
        "name": "",
        "registerShowMax": 20,
        "x": 425,
        "y": 680,
        "wires": [],
        "l": false
    },
    {
        "id": "d54ad933a888a8fe",
        "type": "function",
        "z": "2f6b80b0432d3773",
        "name": "readFloatBE",
        "func": "//msg.payload = (msg.payload[0] * 256) + msg.payload[1];\n\nmsg.payload = msg.payload.buffer.readFloatBE(0);\nmsg.topic = \"plantroom/dat/kwIn\";\nmsg.units = \"kW\";\n\nvar msg1 = {};\n//msg1.payload = Math.max(0, (1.0 * msg.payload) - 0.09);\nmsg1.payload = msg.payload;\nmsg1.topic = \"heatpump/dat/kwIn\";\nmsg1.units = \"kW\";\n\n\nreturn [msg,msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "2b2a5e7866cedf31",
                "e8af654e5c6cc86f"
            ],
            [
                "e8af654e5c6cc86f"
            ]
        ]
    },
    {
        "id": "2b2a5e7866cedf31",
        "type": "debug",
        "z": "2f6b80b0432d3773",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 700,
        "y": 600,
        "wires": []
    },
    {
        "id": "a87209da70a92820",
        "type": "function",
        "z": "2f6b80b0432d3773",
        "name": "readBigInt64BE",
        "func": "//msg.payload = (msg.payload[0] * 256) + msg.payload[1];\n\nmsg.topic = \"heatpump/dat/kwhIn\";\nmsg.units = \"kWh\";\nmsg.payload = parseFloat(msg.payload.buffer.readBigInt64BE(0))/1000;\n\n// Wh\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 480,
        "wires": [
            [
                "44070cb392cbe7ca",
                "e8af654e5c6cc86f"
            ]
        ]
    },
    {
        "id": "44070cb392cbe7ca",
        "type": "debug",
        "z": "2f6b80b0432d3773",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 700,
        "y": 480,
        "wires": []
    },
    {
        "id": "e8af654e5c6cc86f",
        "type": "link out",
        "z": "2f6b80b0432d3773",
        "name": "",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 585,
        "y": 540,
        "wires": []
    },
    {
        "id": "d411a49f.e9ffd8",
        "type": "modbus-server",
        "z": "42ed18ca.652838",
        "name": "",
        "logEnabled": false,
        "hostname": "0.0.0.0",
        "serverPort": "10502",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": "1024",
        "holdingBufferSize": "1024",
        "inputBufferSize": "1024",
        "discreteBufferSize": "1024",
        "showErrors": true,
        "x": 500,
        "y": 160,
        "wires": [
            [
                "36782533.082afa"
            ],
            [
                "fa7b2d15.15806"
            ],
            [
                "6ec442b7.58008c"
            ],
            [
                "1fab23a0.563b14"
            ],
            []
        ]
    },
    {
        "id": "98d7383d.aa12a",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [1,1,1], \n    'register': 'input', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 100,
        "wires": [
            [
                "d411a49f.e9ffd8"
            ]
        ],
        "l": false
    },
    {
        "id": "f9c46e21.735658",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "true",
                "vt": "bool"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 275,
        "y": 100,
        "wires": [
            [
                "98d7383d.aa12a"
            ]
        ],
        "l": false
    },
    {
        "id": "1fab23a0.563b14",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 635,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "d0b032a8.169678",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "a24bea7c.848da",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 95,
        "y": 480,
        "wires": [
            [],
            [
                "a51b31cc.63a8c8"
            ]
        ],
        "l": false
    },
    {
        "id": "a51b31cc.63a8c8",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 230,
        "y": 480,
        "wires": [],
        "l": false
    },
    {
        "id": "5fc93873.d0eb58",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [233,234,235], \n    'register': 'holding', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 140,
        "wires": [
            [
                "d411a49f.e9ffd8"
            ]
        ],
        "l": false
    },
    {
        "id": "1df0ae40.cb902a",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 275,
        "y": 140,
        "wires": [
            [
                "5fc93873.d0eb58"
            ]
        ],
        "l": false
    },
    {
        "id": "6ec442b7.58008c",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 635,
        "y": 160,
        "wires": [],
        "l": false
    },
    {
        "id": "fa7b2d15.15806",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 635,
        "y": 120,
        "wires": [],
        "l": false
    },
    {
        "id": "36782533.082afa",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 635,
        "y": 80,
        "wires": [],
        "l": false
    },
    {
        "id": "afaf95b3.c7345",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 635,
        "y": 240,
        "wires": [],
        "l": false
    },
    {
        "id": "74c23b77.016c1c",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "Input",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "a24bea7c.848da",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 95,
        "y": 420,
        "wires": [
            [],
            [
                "207cf0ad.a46348"
            ]
        ],
        "l": false
    },
    {
        "id": "207cf0ad.a46348",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 230,
        "y": 420,
        "wires": [],
        "l": false
    },
    {
        "id": "550f6965.7b646",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [true,true,true], \n    'register': 'coils', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 180,
        "wires": [
            [
                "d411a49f.e9ffd8"
            ]
        ],
        "l": false
    },
    {
        "id": "8e0fdad2.3d36d8",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 275,
        "y": 180,
        "wires": [
            [
                "550f6965.7b646"
            ]
        ],
        "l": false
    },
    {
        "id": "d9e798fa.a1a0f",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "a24bea7c.848da",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 95,
        "y": 360,
        "wires": [
            [],
            [
                "3ae7077d.cc7c9"
            ]
        ],
        "l": false
    },
    {
        "id": "3ae7077d.cc7c9",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 230,
        "y": 360,
        "wires": [],
        "l": false
    },
    {
        "id": "50139c42.f53b8c",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "a24bea7c.848da",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 95,
        "y": 560,
        "wires": [
            [],
            [
                "7679a351.b1b4d4"
            ]
        ],
        "l": false
    },
    {
        "id": "7679a351.b1b4d4",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 230,
        "y": 560,
        "wires": [],
        "l": false
    },
    {
        "id": "81bc1a3a.a886c",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [true,true,true], \n    'register': 'discrete', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 220,
        "wires": [
            [
                "d411a49f.e9ffd8"
            ]
        ],
        "l": false
    },
    {
        "id": "cd2a5684.44ff68",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 275,
        "y": 220,
        "wires": [
            [
                "81bc1a3a.a886c"
            ]
        ],
        "l": false
    },
    {
        "id": "7da7ffd5.e0a78",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    \"value\": [101, 201, 102, 202, 103, 203, 104, 204, 105, 205, 106, 206],\n    \"register\": 'input',\n    \"address\": 0,\n    \"disableMsgOutput\": 0\n  }; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 815,
        "y": 100,
        "wires": [
            [
                "a36007c2.e2ab",
                "9b38071f.f0e64"
            ]
        ],
        "l": false
    },
    {
        "id": "60e01cfb.657bcc",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 735,
        "y": 100,
        "wires": [
            [
                "7da7ffd5.e0a78"
            ]
        ],
        "l": false
    },
    {
        "id": "b70c703a.2ce758",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1035,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "d88d61f0.43ed4",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [233,234,235], \n    'register': 'holding', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 815,
        "y": 140,
        "wires": [
            [
                "a36007c2.e2ab"
            ]
        ],
        "l": false
    },
    {
        "id": "42e70f31.2716f8",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 735,
        "y": 140,
        "wires": [
            [
                "d88d61f0.43ed4"
            ]
        ],
        "l": false
    },
    {
        "id": "7396158c.16bc64",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1035,
        "y": 160,
        "wires": [],
        "l": false
    },
    {
        "id": "dad8bd10.17615",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1035,
        "y": 120,
        "wires": [],
        "l": false
    },
    {
        "id": "3295320d.e0b5a6",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1035,
        "y": 80,
        "wires": [],
        "l": false
    },
    {
        "id": "f0dbb7f0.c60cb",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1035,
        "y": 240,
        "wires": [],
        "l": false
    },
    {
        "id": "d948112a.b763e8",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [true,true,true], \n    'register': 'coils', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 815,
        "y": 180,
        "wires": [
            [
                "a36007c2.e2ab"
            ]
        ],
        "l": false
    },
    {
        "id": "e26f5ad9.a27318",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 735,
        "y": 180,
        "wires": [
            [
                "d948112a.b763e8"
            ]
        ],
        "l": false
    },
    {
        "id": "b5b09453.c697f8",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "",
        "func": "msg.payload = {\n    'value': [true,true,true], \n    'register': 'discrete', \n    'address': 0 , \n    'disableMsgOutput' : 0 \n}; \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 815,
        "y": 220,
        "wires": [
            [
                "a36007c2.e2ab"
            ]
        ],
        "l": false
    },
    {
        "id": "7f3a58f6.09d4c",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 735,
        "y": 220,
        "wires": [
            [
                "b5b09453.c697f8"
            ]
        ],
        "l": false
    },
    {
        "id": "a36007c2.e2ab",
        "type": "modbus-flex-server",
        "z": "42ed18ca.652838",
        "name": "",
        "logEnabled": false,
        "serverAddress": "0.0.0.0",
        "serverPort": 11502,
        "responseDelay": 100,
        "unitId": 1,
        "delayUnit": "ms",
        "coilsBufferSize": 20000,
        "registersBufferSize": 20000,
        "minAddress": 0,
        "splitAddress": 10000,
        "funcGetCoil": "function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetDiscreteInput": "function getFlexDiscreteInput(addr, unitID) {\n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetInputRegister": "function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcGetHoldingRegister": "function getFlexHoldingRegsiter(addr, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcSetCoil": "function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}",
        "funcSetRegister": "function setFlexRegister(addr, value, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}",
        "showErrors": true,
        "x": 915,
        "y": 160,
        "wires": [
            [
                "3295320d.e0b5a6"
            ],
            [
                "dad8bd10.17615"
            ],
            [
                "7396158c.16bc64"
            ],
            [
                "b70c703a.2ce758"
            ],
            [
                "f0dbb7f0.c60cb"
            ]
        ],
        "l": false
    },
    {
        "id": "7f32509f.0951b",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "aefcd568.ff81c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 735,
        "y": 500,
        "wires": [
            [],
            [
                "7080819.2832e"
            ]
        ],
        "l": false
    },
    {
        "id": "7080819.2832e",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 870,
        "y": 500,
        "wires": [],
        "l": false
    },
    {
        "id": "38f7ff96.70e68",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "Input",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "aefcd568.ff81c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 735,
        "y": 440,
        "wires": [
            [],
            [
                "45cdacc4.8bc574"
            ]
        ],
        "l": false
    },
    {
        "id": "45cdacc4.8bc574",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 870,
        "y": 440,
        "wires": [],
        "l": false
    },
    {
        "id": "d820acbf.3c10e8",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "aefcd568.ff81c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 735,
        "y": 380,
        "wires": [
            [],
            [
                "f28c037a.6514a"
            ]
        ],
        "l": false
    },
    {
        "id": "f28c037a.6514a",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 895,
        "y": 380,
        "wires": [],
        "l": false
    },
    {
        "id": "b71444df.a52298",
        "type": "modbus-read",
        "z": "42ed18ca.652838",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "3",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "aefcd568.ff81c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 735,
        "y": 580,
        "wires": [
            [],
            [
                "8597b09f.6c6ae"
            ]
        ],
        "l": false
    },
    {
        "id": "8597b09f.6c6ae",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 870,
        "y": 580,
        "wires": [],
        "l": false
    },
    {
        "id": "9b38071f.f0e64",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 915,
        "y": 60,
        "wires": [],
        "l": false
    }
]